{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nPrimax School Management System is a comprehensive web application designed to digitize school processes, replacing paper-based systems and Google Sheets. It provides tailored interfaces with advanced role-based access control supporting three user types: TEACHER (limited access), SUPER ADMIN TEACHER (full access including teaching), and SUPER ADMIN MANAGEMENT (full access excluding teaching). The system integrates enrollment, attendance, grade management, billing, payments, and financial reporting into a single platform. Its core vision is to streamline administrative tasks, enhance communication, and provide a unified digital environment for all stakeholders, with a strong focus on a flexible and auditable financial management system.\n\n**RECENT UPDATE (Aug 28, 2025)**: Successfully implemented student deactivation and deletion functionality with comprehensive data management:\n\n- ✅ **STUDENT DEACTIVATION/DELETION SYSTEM**: Complete implementation of student status management\n  - **Deactivate Button**: Orange UserX icon that toggles student active status (preserves all data, disables portal access)\n  - **Delete Button**: Red Trash2 icon with comprehensive confirmation modal and detailed warnings\n  - **View Deactivated Students Toggle**: Added to Column Settings modal for showing/hiding inactive students\n  - **Portal Access Control**: Deactivated students lose portal access but can be reactivated to restore access\n  - **Data Retention**: Deactivated students maintain all historical data for potential future reactivation\n- ✅ **ENHANCED STATUS PILLS**: Replicated exact invoice status pill design in Outstanding Fees column\n  - **Perfect Color Matching**: PAID (green), OVERDUE (red), PARTIAL (yellow), PENDING (light red)  \n  - **Consistent Typography**: All status text in uppercase using same styling system as invoices\n- ✅ **COMPREHENSIVE DELETE PROTECTION**: Multi-layer data integrity with foreign key respect\n  - **Cascading Deletion**: Proper order of deletion respecting database constraints\n  - **Related Data Cleanup**: Removes payments, invoices, grades, attendance, enrollments safely\n  - **Confirmation Modal**: Detailed warning explaining permanent data loss with clear alternatives\n- ✅ **BACKEND IMPLEMENTATION**: Full API routes and storage methods for both operations\n  - **Toggle Active Route**: PATCH `/api/students/:id/toggle-active` for status changes\n  - **Delete Route**: DELETE `/api/students/:id` with comprehensive data cascade deletion\n  - **Database Storage**: Added `toggleStudentActiveStatus` and `deleteStudent` methods to storage interface\n\n**PREVIOUS UPDATE (Aug 28, 2025)**: Successfully completed comprehensive receipt numbering redesign and payment system enhancements:\n\n- ✅ **CLEAN RECEIPT NUMBERS FULLY IMPLEMENTED**: Completely redesigned and deployed clean receipt numbering system\n  - **Invoice-Based Format**: `RCP-INV-1756217730656-01` for payments linked to specific invoices with sequential numbering per invoice\n  - **Advance Payment Format**: `RCP-ADV-2025080001` for advance payments with year/month/sequence structure\n  - **Eliminated Ugly Format**: Removed all instances of timestamp-based `RCP-1756382325061-s17ae3wfu` format\n- ✅ **Complete System Integration**: Fixed receipt generation across all payment entry points:\n  - Updated `server/billing.ts` billing service with clean generation logic\n  - Fixed `server/routes.ts` general payment route \n  - Corrected `server/storage.ts` both `createPayment` and `processPartialPayment` methods\n  - Resolved import issues and made `generateReceiptNumber` method properly accessible\n- ✅ **Editable Payment Notes**: Payment forms now include optional Notes input field instead of auto-generated descriptive text\n- ✅ **Roll Number Generation Fixed**: Resolved enrollment page roll number reservation failure with proper API response parsing\n- ✅ **Enhanced Error Handling**: Added better loading states and retry logic for roll number generation\n- ✅ **Universal Roll Number Search**: Roll numbers are searchable across all tables - search by PMX25-#### format finds relevant invoices/receipts instantly\n- ✅ **Comprehensive Integration**: Roll numbers appear everywhere - invoices, receipts, search results, with proper API joins for performance\n\n**PREVIOUS UPDATE (Aug 28, 2025)**: Successfully implemented comprehensive overdue invoice functionality with Pakistan timezone integration:\n- ✅ **Automatic Overdue Detection**: Invoices automatically marked as \"OVERDUE\" when due date passes using Pakistan time (UTC+5)\n- ✅ **Real-time Status Updates**: Invoice status badges show \"OVERDUE\" in red for past-due invoices regardless of original status  \n- ✅ **Pakistan Timezone Integration**: Hardcoded Pakistan time throughout application with utility functions for consistent time handling\n- ✅ **Smart Status Logic**: Paid invoices remain \"PAID\", unpaid invoices past due date become \"OVERDUE\", others maintain original status\n- ✅ **Comprehensive Coverage**: Overdue status appears in tables, filters, PDF prints, and thermal receipts\n- ✅ **Enhanced Filtering**: Status filter now correctly shows overdue invoices when \"Overdue\" filter is selected\n\n**PREVIOUS UPDATE (Aug 26, 2025)**: Successfully completed enhancement of both New Student Enrollment form and Edit Student Information modal with 6 additional fields:\n- ✅ Student Phone Number* (mandatory)\n- ✅ Student Email Address* (mandatory) \n- ✅ Home Address (optional)\n- ✅ Additional Parent/Guardian Name (optional)\n- ✅ Additional Parent/Guardian Contact Number (optional)\n- ✅ Additional Parent/Guardian Email Address (optional)\n\nBoth forms maintain complete data consistency with identical field structures, proper validation for mandatory fields, and resolved all TypeScript field name mismatches for seamless data integrity.\n\n**CRITICAL FEATURE**: Teacher Data Isolation - Regular teachers have their own isolated dashboard showing only data for subjects they teach, including earnings, gradebook, attendance, and Digital Diary messages restricted to their specific students. Super admins have full access across all areas while maintaining the same data integrity principles.\n\n**NEW FEATURE**: Advanced Role-Based Access Control\n- **TEACHER**: Access only to Teacher Dashboard with data isolation for assigned subjects\n- **SUPER ADMIN (Teacher)**: Full access to Teacher, Finance, Management, and Parent dashboards with complete system oversight\n- **SUPER ADMIN (Management)**: Access to Finance, Management, and Parent dashboards, excluding Teacher dashboard (for non-teaching administrators)\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe frontend is built with React and TypeScript using Vite. It employs a component-based architecture with:\n- **UI Framework**: Custom library based on Radix UI primitives with shadcn/ui styling.\n- **Styling**: Tailwind CSS with custom design tokens.\n- **State Management**: TanStack React Query for server state.\n- **Routing**: Wouter for client-side routing.\n- **Form Handling**: React Hook Form with Zod validation.\n- **Offline Support**: Built-in offline detection with service worker capabilities.\nIt features role-based page structures and shared UI components. The Parent Portal has been recently redesigned with a focus on a clean two-column layout, purple gradient header, stat cards, visual academic performance, attendance overviews, fee status, upcoming events, and contact information.\n\n## Backend Architecture\nThe backend uses Express.js with TypeScript and follows a RESTful API design:\n- **Runtime**: Node.js with ESM modules.\n- **Framework**: Express.js with middleware for authentication, logging, and error handling.\n- **Database Layer**: Drizzle ORM for type-safe database operations.\n- **Storage Interface**: Abstracted CRUD operations for all entities.\n- **Authentication**: Replit-based OpenID Connect with session management.\nIt implements role-based access control and provides comprehensive API endpoints for student, attendance, grade, and financial management.\n\n## Data Storage Solutions\nPostgreSQL is the primary database, utilized with Neon Database as the serverless provider:\n- **ORM**: Drizzle ORM for type-safe operations and migrations.\n- **Schema Design**: Relational schema for students, subjects, classes, enrollments, attendance, grades, invoices, payments, and administrative functions.\n- **Session Storage**: PostgreSQL-backed session storage.\n- **Migration System**: Drizzle Kit for schema migrations.\nThe schema supports complex relationships crucial for features like multi-subject enrollment, per-class attendance, and detailed financial tracking.\n\n## Authentication and Authorization\nAuthentication uses Replit's OpenID Connect:\n- **Provider**: Replit OIDC with automatic user provisioning.\n- **Session Management**: Express-session with PostgreSQL store.\n- **Role-Based Access**: Four distinct user roles with different permission levels, enforced on both frontend and backend.\n- **Security**: HTTP-only cookies, CSRF protection, and secure session handling.\n\n## Comprehensive Billing System\nThis system handles tuition management from invoice generation to payment processing.\n- **Monthly Billing Cycle**: Automated invoice generation on the 1st of each month based on enrolled subjects.\n- **Advance Payment Processing**: Supports multi-month payments with automatic credit allocation and credit balance management.\n- **Partial Payment Support**: Accepts partial payments, tracks balances, and updates invoice statuses.\n- **Mid-Month Enrollment Billing**: Automatically calculates pro-rated fees for mid-month enrollments with options for full-month billing.\n- **Manual Adjustments & Exceptions**: Supports discounts, late fees, write-offs, and refunds with full audit trails, reasons, and user attribution.\n- **Student Credit Management**: Tracks overpayments as credits for future invoice application.\n- **Comprehensive Student Ledger**: Provides a complete transaction history, financial summaries, and payment allocations.\n- **Supported Payment Methods**: Cash and Bank Transfer (requiring transaction numbers).\n- **Payment Allocation Logic**: Prioritizes existing outstanding invoices (oldest first), aiming for full payment before partial allocation, with remaining amounts becoming student credit.\n- **One-Click Portal Link Generation**: A feature for Finance staff to generate and manage parent portal access links, including email template generation.\n\n# External Dependencies\n\n## Third-Party Services\n- **Neon Database**: Serverless PostgreSQL hosting.\n- **Replit Authentication**: OpenID Connect provider.\n- **Replit Development Tools**: Vite plugin integration.\n\n## Key Libraries and Frameworks\n- **Frontend**: React, TypeScript, Vite, TanStack React Query, Wouter, React Hook Form, Zod.\n- **UI Components**: Radix UI primitives, Tailwind CSS, Lucide React, Font Awesome.\n- **Backend**: Express.js, Drizzle ORM, Passport.js.\n- **Database**: PostgreSQL with Neon serverless driver.\n- **Development**: ESBuild, TSX.","size_bytes":11123},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/billing-demo.ts":{"content":"import { billingService } from \"./billing\";\nimport { storage } from \"./storage\";\n\n/**\n * Comprehensive Billing System Demo\n * Tests all billing scenarios and features\n */\nexport class BillingSystemDemo {\n  \n  async runDemo(): Promise<void> {\n    console.log(\"\\n🎯 Starting Primax Billing System Demo\\n\");\n    \n    try {\n      // 1. Setup demo data\n      await this.setupDemoData();\n      \n      // 2. Test monthly billing generation\n      await this.testMonthlyBilling();\n      \n      // 3. Test advance payments\n      await this.testAdvancePayments();\n      \n      // 4. Test partial payments\n      await this.testPartialPayments();\n      \n      // 5. Test pro-rated billing for mid-month enrollment\n      await this.testProRatedBilling();\n      \n      // 6. Test manual adjustments\n      await this.testManualAdjustments();\n      \n      // 7. Test student ledger\n      await this.testStudentLedger();\n      \n      console.log(\"\\n✅ All billing scenarios tested successfully!\");\n      console.log(\"\\n📊 Billing System Features Validated:\");\n      console.log(\"✅ Monthly invoice generation\");\n      console.log(\"✅ Advance payment processing with credit allocation\");\n      console.log(\"✅ Partial payment tracking\");\n      console.log(\"✅ Pro-rated billing for mid-month enrollments\");\n      console.log(\"✅ Manual adjustments with audit trails\");\n      console.log(\"✅ Student credit management\");\n      console.log(\"✅ Comprehensive student ledger\");\n      \n    } catch (error) {\n      console.error(\"\\n❌ Demo failed:\", error);\n    }\n  }\n  \n  private async setupDemoData(): Promise<void> {\n    console.log(\"📝 Setting up demo data...\");\n    \n    // Create demo students\n    const student1 = await storage.createStudent({\n      name: \"Ahmed Hassan\",\n      email: \"ahmed.hassan@example.com\",\n      phone: \"03001234567\",\n      grade: \"AS\",\n      section: \"A\",\n      rollNumber: \"AS-001\",\n      guardianName: \"Hassan Ali\",\n      guardianPhone: \"03007654321\",\n      address: \"123 Main Street, Karachi\"\n    });\n    \n    const student2 = await storage.createStudent({\n      name: \"Fatima Khan\",\n      email: \"fatima.khan@example.com\", \n      phone: \"03009876543\",\n      grade: \"O\",\n      section: \"B\",\n      rollNumber: \"O-002\",\n      guardianName: \"Khan Sahib\",\n      guardianPhone: \"03001122334\",\n      address: \"456 Park Avenue, Lahore\"\n    });\n    \n    // Create demo subjects\n    const mathAS = await storage.createSubject({\n      name: \"AS Mathematics\",\n      code: \"MAT-AS\",\n      baseFee: 8000,\n      level: \"AS\",\n      description: \"Advanced level Mathematics\"\n    });\n    \n    const physicsAS = await storage.createSubject({\n      name: \"AS Physics\", \n      code: \"PHY-AS\",\n      baseFee: 7500,\n      level: \"AS\",\n      description: \"Advanced level Physics\"\n    });\n    \n    const englishO = await storage.createSubject({\n      name: \"O Level English\",\n      code: \"ENG-O\", \n      baseFee: 6000,\n      level: \"O\",\n      description: \"Ordinary level English\"\n    });\n    \n    // Create enrollments\n    await storage.createEnrollment({\n      studentId: student1.id,\n      subjectId: mathAS.id,\n      enrollmentDate: new Date(\"2024-08-01\"),\n      isActive: true\n    });\n    \n    await storage.createEnrollment({\n      studentId: student1.id,\n      subjectId: physicsAS.id,\n      enrollmentDate: new Date(\"2024-08-01\"),\n      isActive: true\n    });\n    \n    await storage.createEnrollment({\n      studentId: student2.id,\n      subjectId: englishO.id,\n      enrollmentDate: new Date(\"2024-08-01\"),\n      isActive: true\n    });\n    \n    console.log(\"✅ Demo data setup complete\");\n    console.log(`   Students: ${student1.name}, ${student2.name}`);\n    console.log(`   Subjects: ${mathAS.name}, ${physicsAS.name}, ${englishO.name}`);\n    \n    // Store student IDs for use in tests\n    this.demoStudentIds = [student1.id, student2.id];\n  }\n  \n  private demoStudentIds: string[] = [];\n  \n  private async testMonthlyBilling(): Promise<void> {\n    console.log(\"\\n💳 Testing Monthly Billing Generation...\");\n    \n    const invoices = await billingService.generateMonthlyInvoices();\n    \n    console.log(`✅ Generated ${invoices.length} monthly invoices`);\n    for (const invoice of invoices) {\n      console.log(`   Invoice ${invoice.invoiceNumber}: Rs. ${invoice.total} (${invoice.status})`);\n    }\n  }\n  \n  private async testAdvancePayments(): Promise<void> {\n    console.log(\"\\n💰 Testing Advance Payments...\");\n    \n    const studentId = this.demoStudentIds[0];\n    const result = await billingService.processAdvancePayment(studentId, 25000, {\n      paymentMethod: 'cash',\n      receivedBy: 'demo-management-001',\n      notes: 'Advance payment for 3 months'\n    });\n    \n    console.log(`✅ Processed advance payment of Rs. 25,000`);\n    console.log(`   Invoices paid: ${result.allocations.length}`);\n    console.log(`   Remaining credit: Rs. ${result.remainingCredit}`);\n    \n    for (const allocation of result.allocations) {\n      console.log(`   Applied Rs. ${allocation.amount} to ${allocation.invoiceNumber}`);\n    }\n  }\n  \n  private async testPartialPayments(): Promise<void> {\n    console.log(\"\\n🔄 Testing Partial Payments...\");\n    \n    // Get an unpaid invoice for student 2\n    const studentId = this.demoStudentIds[1];\n    const ledger = await billingService.getStudentLedger(studentId);\n    const unpaidInvoice = ledger.invoices.find((inv: any) => inv.balanceDue > 0);\n    \n    if (unpaidInvoice) {\n      const partialAmount = parseFloat(unpaidInvoice.balanceDue) / 2;\n      \n      const result = await billingService.processPartialPayment(unpaidInvoice.id, partialAmount, {\n        paymentMethod: 'bank_transfer',\n        transactionNumber: 'TXN123456789',\n        receivedBy: 'demo-management-001',\n        notes: 'Partial payment via bank transfer'\n      });\n      \n      console.log(`✅ Processed partial payment of Rs. ${partialAmount}`);\n      console.log(`   Invoice ${unpaidInvoice.invoiceNumber} balance: Rs. ${result.newBalance}`);\n    }\n  }\n  \n  private async testProRatedBilling(): Promise<void> {\n    console.log(\"\\n📅 Testing Pro-Rated Billing...\");\n    \n    // Create a new student for mid-month enrollment\n    const newStudent = await storage.createStudent({\n      name: \"Ali Raza\",\n      email: \"ali.raza@example.com\",\n      phone: \"03005555555\",\n      grade: \"AS\",\n      section: \"A\", \n      rollNumber: \"AS-003\",\n      guardianName: \"Raza Ahmed\",\n      guardianPhone: \"03006666666\",\n      address: \"789 New Street, Islamabad\"\n    });\n    \n    // Get a subject to enroll in\n    const subjects = await storage.getSubjects();\n    if (subjects.length > 0) {\n      await storage.createEnrollment({\n        studentId: newStudent.id,\n        subjectId: subjects[0].id,\n        enrollmentDate: new Date(\"2024-08-15\"), // Mid-month\n        isActive: true\n      });\n      \n      // Test pro-rated invoice\n      const proRatedInvoice = await billingService.generateProRatedInvoice(\n        newStudent.id,\n        new Date(\"2024-08-15\"), // Mid-month enrollment\n        false // Pro-rated, not full month\n      );\n      \n      console.log(`✅ Generated pro-rated invoice: ${proRatedInvoice.invoiceNumber}`);\n      console.log(`   Amount: Rs. ${proRatedInvoice.total} (${proRatedInvoice.notes})`);\n      \n      // Test full month invoice for comparison\n      const fullMonthInvoice = await billingService.generateProRatedInvoice(\n        newStudent.id,\n        new Date(\"2024-09-01\"), // Next month\n        true // Full month\n      );\n      \n      console.log(`✅ Generated full month invoice: ${fullMonthInvoice.invoiceNumber}`);\n      console.log(`   Amount: Rs. ${fullMonthInvoice.total} (${fullMonthInvoice.notes})`);\n    }\n  }\n  \n  private async testManualAdjustments(): Promise<void> {\n    console.log(\"\\n⚖️ Testing Manual Adjustments...\");\n    \n    // Get an invoice to adjust\n    const studentId = this.demoStudentIds[0];\n    const ledger = await billingService.getStudentLedger(studentId);\n    const invoice = ledger.invoices[0];\n    \n    if (invoice) {\n      // Apply a discount\n      const discountResult = await billingService.applyInvoiceAdjustment(invoice.id, {\n        type: 'discount',\n        amount: 1000,\n        reason: 'Sibling discount - 10% off',\n        appliedBy: 'demo-user',\n        notes: 'Multiple children enrolled'\n      });\n      \n      console.log(`✅ Applied discount to ${invoice.invoiceNumber}`);\n      console.log(`   Discount: Rs. 1,000`);\n      console.log(`   New total: Rs. ${discountResult.updatedInvoice.newTotal}`);\n      \n      // Apply a late fee to another invoice\n      const anotherInvoice = ledger.invoices[1];\n      if (anotherInvoice) {\n        const lateFeeResult = await billingService.applyInvoiceAdjustment(anotherInvoice.id, {\n          type: 'late_fee',\n          amount: 500,\n          reason: 'Payment overdue by 15 days',\n          appliedBy: 'demo-user',\n          notes: 'Late fee as per policy'\n        });\n        \n        console.log(`✅ Applied late fee to ${anotherInvoice.invoiceNumber}`);\n        console.log(`   Late fee: Rs. 500`);\n        console.log(`   New total: Rs. ${lateFeeResult.updatedInvoice.newTotal}`);\n      }\n    }\n  }\n  \n  private async testStudentLedger(): Promise<void> {\n    console.log(\"\\n📊 Testing Student Ledger...\");\n    \n    for (const studentId of this.demoStudentIds) {\n      const ledger = await billingService.getStudentLedger(studentId);\n      const student = await storage.getStudentById(studentId);\n      \n      console.log(`\\n👤 ${student?.name} Ledger Summary:`);\n      console.log(`   Total Invoiced: Rs. ${ledger.summary.totalInvoiced.toFixed(2)}`);\n      console.log(`   Total Paid: Rs. ${ledger.summary.totalPaid.toFixed(2)}`);\n      console.log(`   Outstanding: Rs. ${ledger.summary.totalOutstanding.toFixed(2)}`);\n      console.log(`   Credit Balance: Rs. ${ledger.summary.creditBalance.toFixed(2)}`);\n      console.log(`   Invoices: ${ledger.invoices.length}`);\n      console.log(`   Payments: ${ledger.payments.length}`);\n      console.log(`   Adjustments: ${ledger.adjustments.length}`);\n    }\n  }\n}\n\n// Export demo function for easy access\nexport async function runBillingDemo(): Promise<void> {\n  const demo = new BillingSystemDemo();\n  await demo.runDemo();\n}","size_bytes":10236},"server/billing.ts":{"content":"import { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { invoices, payments, paymentAllocations, invoiceAdjustments, billingSchedules, enrollments, subjects } from \"@shared/schema\";\nimport { eq, and, sum, desc, gte, lte, sql } from \"drizzle-orm\";\n\nexport interface BillingService {\n  // Standard monthly billing\n  generateMonthlyInvoices(targetDate?: string): Promise<any[]>;\n  \n  // Advance payments\n  processAdvancePayment(studentId: string, amount: number, paymentData: any): Promise<any>;\n  \n  // Partial payments\n  processPartialPayment(invoiceId: string, amount: number, paymentData: any): Promise<any>;\n  \n  // Mid-month enrollment\n  generateProRatedInvoice(studentId: string, enrollmentDate: Date, isFullMonth?: boolean): Promise<any>;\n  \n  // Manual adjustments\n  applyInvoiceAdjustment(invoiceId: string, adjustment: any): Promise<any>;\n  \n  // Credit management\n  getStudentCredit(studentId: string): Promise<number>;\n  allocatePaymentToInvoices(paymentId: string, allocations: any[]): Promise<any>;\n  \n  // Invoice management\n  updateInvoiceStatus(invoiceId: string): Promise<any>;\n  getInvoiceBalance(invoiceId: string): Promise<number>;\n}\n\nexport class PrimaxBillingService implements BillingService {\n  \n  /**\n   * Generate monthly invoices for all active students on the 1st of the month\n   */\n  async generateMonthlyInvoices(targetDate?: string): Promise<any[]> {\n    const billingDate = targetDate ? new Date(targetDate) : new Date();\n    const firstOfMonth = new Date(billingDate.getFullYear(), billingDate.getMonth(), 1);\n    const lastOfMonth = new Date(billingDate.getFullYear(), billingDate.getMonth() + 1, 0);\n    \n    // Get all active enrollments\n    const activeEnrollments = await db\n      .select({\n        studentId: enrollments.studentId,\n        subjectId: enrollments.subjectId,\n        baseFee: subjects.baseFee\n      })\n      .from(enrollments)\n      .innerJoin(subjects, eq(enrollments.subjectId, subjects.id))\n      .where(eq(enrollments.isActive, true));\n    \n    // Group by student\n    const studentEnrollments = activeEnrollments.reduce((acc, enrollment) => {\n      if (!acc[enrollment.studentId]) {\n        acc[enrollment.studentId] = [];\n      }\n      acc[enrollment.studentId].push(enrollment);\n      return acc;\n    }, {} as Record<string, any[]>);\n    \n    const generatedInvoices = [];\n    \n    for (const [studentId, studentSubjects] of Object.entries(studentEnrollments)) {\n      // Check if student already has an invoice for this billing period\n      const existingInvoice = await db\n        .select()\n        .from(invoices)\n        .where(\n          and(\n            eq(invoices.studentId, studentId),\n            eq(invoices.billingPeriodStart, firstOfMonth.toISOString().split('T')[0]),\n            eq(invoices.type, 'monthly')\n          )\n        );\n      \n      if (existingInvoice.length > 0) {\n        continue; // Skip if already billed\n      }\n      \n      // Calculate total monthly fee\n      const totalFee = studentSubjects.reduce((sum, subject) => \n        sum + parseFloat(subject.baseFee), 0\n      );\n      \n      // Check for any existing student credit\n      const studentCredit = await this.getStudentCredit(studentId);\n      const finalAmount = Math.max(0, totalFee - studentCredit);\n      \n      // Generate invoice\n      const invoiceData = {\n        studentId,\n        invoiceNumber: await this.generateInvoiceNumber(),\n        type: 'monthly',\n        billingPeriodStart: firstOfMonth.toISOString().split('T')[0],\n        billingPeriodEnd: lastOfMonth.toISOString().split('T')[0],\n        issueDate: billingDate.toISOString().split('T')[0],\n        dueDate: new Date(billingDate.getTime() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 7 days from issue\n        subtotal: totalFee.toString(),\n        discount: '0',\n        lateFee: '0',\n        adjustments: (studentCredit > 0 ? Math.min(studentCredit, totalFee) : 0).toString(),\n        total: finalAmount.toString(),\n        amountPaid: '0',\n        balanceDue: finalAmount.toString(),\n        status: finalAmount > 0 ? 'sent' : 'paid',\n        notes: studentCredit > 0 ? `Applied student credit: Rs. ${Math.min(studentCredit, totalFee)}` : null,\n        createdBy: 'system'\n      };\n      \n      const invoice = await storage.createInvoice(invoiceData);\n      \n      // If credit was used, create a payment record for the credit application\n      if (studentCredit > 0 && totalFee > 0) {\n        const creditUsed = Math.min(studentCredit, totalFee);\n        await this.applyCreditToInvoice(invoice.id, creditUsed);\n      }\n      \n      generatedInvoices.push(invoice);\n    }\n    \n    return generatedInvoices;\n  }\n  \n  /**\n   * Process advance payments that cover multiple months\n   */\n  async processAdvancePayment(studentId: string, amount: number, paymentData: any): Promise<any> {\n    // Get pending invoices for this student to determine primary invoice for receipt number\n    const pendingInvoices = await db\n      .select()\n      .from(invoices)\n      .where(\n        and(\n          eq(invoices.studentId, studentId),\n          eq(invoices.status, 'sent')\n        )\n      )\n      .orderBy(invoices.issueDate);\n    \n    // Use first invoice for receipt number, or fallback for general receipt\n    const primaryInvoiceNumber = pendingInvoices.length > 0 ? pendingInvoices[0].invoiceNumber : undefined;\n    \n    // Create the payment record\n    const payment = await storage.createPayment({\n      ...paymentData,\n      studentId,\n      amount: amount.toString(),\n      receiptNumber: await this.generateReceiptNumber(primaryInvoiceNumber)\n    });\n    \n    let remainingAmount = amount;\n    const allocations = [];\n    \n    // Allocate payment to existing invoices first\n    for (const invoice of pendingInvoices) {\n      if (remainingAmount <= 0) break;\n      \n      const invoiceBalance = parseFloat(invoice.balanceDue);\n      const allocationAmount = Math.min(remainingAmount, invoiceBalance);\n      \n      // Create payment allocation\n      await db.insert(paymentAllocations).values({\n        paymentId: payment.id,\n        invoiceId: invoice.id,\n        amount: allocationAmount.toString()\n      });\n      \n      // Update invoice\n      const newAmountPaid = parseFloat(invoice.amountPaid || '0') + allocationAmount;\n      const newBalanceDue = parseFloat(invoice.total) - newAmountPaid;\n      \n      await db\n        .update(invoices)\n        .set({\n          amountPaid: newAmountPaid.toString(),\n          balanceDue: newBalanceDue.toString(),\n          status: newBalanceDue <= 0 ? 'paid' : 'partial'\n        })\n        .where(eq(invoices.id, invoice.id));\n      \n      allocations.push({\n        invoiceId: invoice.id,\n        amount: allocationAmount,\n        invoiceNumber: invoice.invoiceNumber\n      });\n      \n      remainingAmount -= allocationAmount;\n    }\n    \n    // If there's still remaining amount, it becomes student credit for future invoices\n    if (remainingAmount > 0) {\n      await this.createStudentCredit(studentId, remainingAmount, payment.id);\n    }\n    \n    return {\n      payment,\n      allocations,\n      remainingCredit: remainingAmount\n    };\n  }\n  \n  /**\n   * Process partial payments against specific invoices\n   */\n  async processPartialPayment(invoiceId: string, amount: number, paymentData: any): Promise<any> {\n    const invoice = await db\n      .select()\n      .from(invoices)\n      .where(eq(invoices.id, invoiceId));\n    \n    if (!invoice[0]) {\n      throw new Error('Invoice not found');\n    }\n    \n    const currentBalance = parseFloat(invoice[0].balanceDue);\n    if (amount > currentBalance) {\n      throw new Error('Payment amount exceeds invoice balance');\n    }\n    \n    // Create payment with invoice-based receipt number\n    const payment = await storage.createPayment({\n      ...paymentData,\n      studentId: invoice[0].studentId,\n      amount: amount.toString(),\n      receiptNumber: await this.generateReceiptNumber(invoice[0].invoiceNumber)\n    });\n    \n    // Create payment allocation\n    await db.insert(paymentAllocations).values({\n      paymentId: payment.id,\n      invoiceId,\n      amount: amount.toString()\n    });\n    \n    // Update invoice\n    const newAmountPaid = parseFloat(invoice[0].amountPaid || '0') + amount;\n    const newBalanceDue = currentBalance - amount;\n    \n    await db\n      .update(invoices)\n      .set({\n        amountPaid: newAmountPaid.toString(),\n        balanceDue: newBalanceDue.toString(),\n        status: newBalanceDue <= 0 ? 'paid' : 'partial'\n      })\n      .where(eq(invoices.id, invoiceId));\n    \n    return { payment, invoice: invoice[0], newBalance: newBalanceDue };\n  }\n  \n  /**\n   * Generate pro-rated invoice for mid-month enrollment\n   */\n  async generateProRatedInvoice(studentId: string, enrollmentDate: Date, isFullMonth = false): Promise<any> {\n    // Get student enrollments and calculate fees\n    const studentEnrollments = await db\n      .select({\n        subjectId: enrollments.subjectId,\n        baseFee: subjects.baseFee\n      })\n      .from(enrollments)\n      .innerJoin(subjects, eq(enrollments.subjectId, subjects.id))\n      .where(\n        and(\n          eq(enrollments.studentId, studentId),\n          eq(enrollments.isActive, true)\n        )\n      );\n    \n    const totalMonthlyFee = studentEnrollments.reduce((sum, enrollment) => \n      sum + parseFloat(enrollment.baseFee), 0\n    );\n    \n    let finalAmount = totalMonthlyFee;\n    let notes = 'Mid-month enrollment - full month fee';\n    \n    if (!isFullMonth) {\n      // Calculate pro-rated amount\n      const daysInMonth = new Date(enrollmentDate.getFullYear(), enrollmentDate.getMonth() + 1, 0).getDate();\n      const remainingDays = daysInMonth - enrollmentDate.getDate() + 1;\n      const proRationFactor = remainingDays / daysInMonth;\n      \n      finalAmount = Math.round(totalMonthlyFee * proRationFactor);\n      notes = `Pro-rated fee for ${remainingDays} days of ${daysInMonth} total days`;\n    }\n    \n    const invoiceData = {\n      studentId,\n      invoiceNumber: await this.generateInvoiceNumber(),\n      type: isFullMonth ? 'monthly' : 'prorated',\n      billingPeriodStart: enrollmentDate.toISOString().split('T')[0],\n      billingPeriodEnd: new Date(enrollmentDate.getFullYear(), enrollmentDate.getMonth() + 1, 0).toISOString().split('T')[0],\n      issueDate: new Date().toISOString().split('T')[0],\n      dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      subtotal: totalMonthlyFee.toString(),\n      discount: '0',\n      lateFee: '0',\n      adjustments: (totalMonthlyFee - finalAmount).toString(),\n      total: finalAmount.toString(),\n      amountPaid: '0',\n      balanceDue: finalAmount.toString(),\n      status: 'sent',\n      notes,\n      createdBy: 'system'\n    };\n    \n    return await storage.createInvoice(invoiceData);\n  }\n  \n  /**\n   * Apply manual adjustments to invoices with audit trail\n   */\n  async applyInvoiceAdjustment(invoiceId: string, adjustment: any): Promise<any> {\n    const { type, amount, reason, appliedBy, notes } = adjustment;\n    \n    const invoice = await db\n      .select()\n      .from(invoices)\n      .where(eq(invoices.id, invoiceId));\n    \n    if (!invoice[0]) {\n      throw new Error('Invoice not found');\n    }\n    \n    // Create adjustment record for audit trail\n    const adjustmentRecord = await db\n      .insert(invoiceAdjustments)\n      .values({\n        invoiceId,\n        type,\n        amount: amount.toString(),\n        reason,\n        appliedBy,\n        notes\n      })\n      .returning();\n    \n    // Update invoice amounts\n    const currentTotal = parseFloat(invoice[0].total);\n    const currentPaid = parseFloat(invoice[0].amountPaid || '0');\n    const currentAdjustments = parseFloat(invoice[0].adjustments || '0');\n    \n    let newTotal = currentTotal;\n    let newAdjustments = currentAdjustments;\n    \n    if (type === 'discount' || type === 'writeoff') {\n      newTotal = currentTotal - amount;\n      newAdjustments = currentAdjustments + amount;\n    } else if (type === 'late_fee') {\n      newTotal = currentTotal + amount;\n    } else if (type === 'refund') {\n      newTotal = currentTotal - amount;\n      newAdjustments = currentAdjustments + amount;\n    }\n    \n    const newBalanceDue = Math.max(0, newTotal - currentPaid);\n    const newStatus: 'paid' | 'partial' | 'sent' = newBalanceDue <= 0 ? 'paid' : (currentPaid > 0 ? 'partial' : 'sent');\n    \n    await db\n      .update(invoices)\n      .set({\n        total: newTotal.toString(),\n        adjustments: newAdjustments.toString(),\n        balanceDue: newBalanceDue.toString(),\n        status: newStatus,\n        notes: invoice[0].notes \n          ? `${invoice[0].notes}\\n${reason}`\n          : reason\n      })\n      .where(eq(invoices.id, invoiceId));\n    \n    return { adjustmentRecord: adjustmentRecord[0], updatedInvoice: { newTotal, newBalanceDue, newStatus } };\n  }\n  \n  /**\n   * Get comprehensive student ledger with all invoices, payments, and adjustments\n   */\n  async getStudentLedger(studentId: string): Promise<any> {\n    // Get student invoices\n    const invoices = await db\n      .select()\n      .from(invoices)\n      .where(eq(invoices.studentId, studentId))\n      .orderBy(desc(invoices.issueDate));\n    \n    // Get student payments\n    const payments = await db\n      .select()\n      .from(payments)\n      .where(eq(payments.studentId, studentId))\n      .orderBy(desc(payments.paymentDate));\n    \n    // Get payment allocations for this student\n    const allocations = await db\n      .select({\n        paymentId: paymentAllocations.paymentId,\n        invoiceId: paymentAllocations.invoiceId,\n        amount: paymentAllocations.amount,\n        paymentDate: payments.paymentDate,\n        invoiceNumber: invoices.invoiceNumber,\n        receiptNumber: payments.receiptNumber\n      })\n      .from(paymentAllocations)\n      .innerJoin(payments, eq(paymentAllocations.paymentId, payments.id))\n      .innerJoin(invoices, eq(paymentAllocations.invoiceId, invoices.id))\n      .where(eq(payments.studentId, studentId))\n      .orderBy(desc(payments.paymentDate));\n    \n    // Get invoice adjustments for this student\n    const adjustments = await db\n      .select({\n        id: invoiceAdjustments.id,\n        invoiceId: invoiceAdjustments.invoiceId,\n        type: invoiceAdjustments.type,\n        amount: invoiceAdjustments.amount,\n        reason: invoiceAdjustments.reason,\n        appliedBy: invoiceAdjustments.appliedBy,\n        appliedAt: invoiceAdjustments.appliedAt,\n        invoiceNumber: invoices.invoiceNumber\n      })\n      .from(invoiceAdjustments)\n      .innerJoin(invoices, eq(invoiceAdjustments.invoiceId, invoices.id))\n      .where(eq(invoices.studentId, studentId))\n      .orderBy(desc(invoiceAdjustments.appliedAt));\n    \n    // Calculate totals\n    const totalInvoiced = invoices.reduce((sum, inv) => sum + parseFloat(inv.total), 0);\n    const totalPaid = payments.reduce((sum, pay) => sum + parseFloat(pay.amount), 0);\n    const totalOutstanding = invoices.reduce((sum, inv) => sum + parseFloat(inv.balanceDue || '0'), 0);\n    const creditBalance = await this.getStudentCredit(studentId);\n    \n    return {\n      studentId,\n      summary: {\n        totalInvoiced,\n        totalPaid,\n        totalOutstanding,\n        creditBalance\n      },\n      invoices: invoices.map(inv => ({\n        ...inv,\n        amount: parseFloat(inv.total),\n        amountPaid: parseFloat(inv.amountPaid || '0'),\n        balanceDue: parseFloat(inv.balanceDue || '0'),\n        adjustments: parseFloat(inv.adjustments || '0')\n      })),\n      payments: payments.map(pay => ({\n        ...pay,\n        amount: parseFloat(pay.amount)\n      })),\n      allocations,\n      adjustments\n    };\n  }\n\n  /**\n   * Get student's available credit from overpayments\n   */\n  async getStudentCredit(studentId: string): Promise<number> {\n    // Calculate total payments\n    const totalPayments = await db\n      .select({ total: sum(payments.amount) })\n      .from(payments)\n      .where(eq(payments.studentId, studentId));\n    \n    // Calculate total allocated to invoices\n    const totalAllocated = await db\n      .select({ total: sum(paymentAllocations.amount) })\n      .from(paymentAllocations)\n      .innerJoin(payments, eq(paymentAllocations.paymentId, payments.id))\n      .where(eq(payments.studentId, studentId));\n    \n    const paymentsSum = parseFloat(totalPayments[0]?.total || '0');\n    const allocatedSum = parseFloat(totalAllocated[0]?.total || '0');\n    \n    return Math.max(0, paymentsSum - allocatedSum);\n  }\n  \n  /**\n   * Get invoice balance considering all payments and adjustments\n   */\n  async getInvoiceBalance(invoiceId: string): Promise<number> {\n    const invoice = await db\n      .select()\n      .from(invoices)\n      .where(eq(invoices.id, invoiceId));\n    \n    if (!invoice[0]) return 0;\n    \n    return parseFloat(invoice[0].balanceDue);\n  }\n  \n  /**\n   * Update invoice status based on payments\n   */\n  async updateInvoiceStatus(invoiceId: string): Promise<any> {\n    const balance = await this.getInvoiceBalance(invoiceId);\n    const invoice = await db\n      .select()\n      .from(invoices)\n      .where(eq(invoices.id, invoiceId));\n    \n    if (!invoice[0]) return null;\n    \n    const currentPaid = parseFloat(invoice[0].amountPaid || '0');\n    let status: 'sent' | 'paid' | 'partial' | 'overdue' = 'sent';\n    \n    if (balance <= 0) {\n      status = 'paid';\n    } else if (currentPaid > 0) {\n      status = 'partial';\n    } else if (new Date() > new Date(invoice[0].dueDate || '')) {\n      status = 'overdue';\n    }\n    \n    await db\n      .update(invoices)\n      .set({ status: status })\n      .where(eq(invoices.id, invoiceId));\n    \n    return { invoiceId, status, balance };\n  }\n  \n  // Helper methods\n  private async generateInvoiceNumber(): Promise<string> {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');\n    \n    const lastInvoice = await db\n      .select()\n      .from(invoices)\n      .where(eq(invoices.invoiceNumber, `INV-${year}${month}%`))\n      .orderBy(desc(invoices.createdAt))\n      .limit(1);\n    \n    let sequence = 1;\n    if (lastInvoice.length > 0) {\n      const lastNum = lastInvoice[0].invoiceNumber.split('-')[1];\n      sequence = parseInt(lastNum.slice(6)) + 1;\n    }\n    \n    return `INV-${year}${month}${String(sequence).padStart(4, '0')}`;\n  }\n  \n  async generateReceiptNumber(invoiceNumber?: string): Promise<string> {\n    if (invoiceNumber) {\n      // Generate invoice-based receipt number: RCP-{InvoiceNumber}-{Sequence}\n      const existingReceipts = await db\n        .select()\n        .from(payments)\n        .where(sql`receipt_number LIKE ${`RCP-${invoiceNumber}-%`}`)\n        .orderBy(desc(payments.createdAt));\n      \n      let sequence = 1;\n      if (existingReceipts.length > 0) {\n        const lastReceiptNum = existingReceipts[0].receiptNumber;\n        const lastSequence = lastReceiptNum.split('-').pop();\n        if (lastSequence && !isNaN(parseInt(lastSequence))) {\n          sequence = parseInt(lastSequence) + 1;\n        }\n      }\n      \n      return `RCP-${invoiceNumber}-${String(sequence).padStart(2, '0')}`;\n    } else {\n      // Clean fallback for advance payments without specific invoice\n      const today = new Date();\n      const year = today.getFullYear();\n      const month = String(today.getMonth() + 1).padStart(2, '0');\n      \n      const lastGeneralReceipt = await db\n        .select()\n        .from(payments)\n        .where(sql`receipt_number LIKE ${`RCP-ADV-${year}${month}%`}`)\n        .orderBy(desc(payments.createdAt))\n        .limit(1);\n      \n      let sequence = 1;\n      if (lastGeneralReceipt.length > 0) {\n        const lastNum = lastGeneralReceipt[0].receiptNumber.split('-')[2];\n        if (lastNum && lastNum.startsWith(year + month)) {\n          sequence = parseInt(lastNum.slice(6)) + 1;\n        }\n      }\n      \n      return `RCP-ADV-${year}${month}${String(sequence).padStart(4, '0')}`;\n    }\n  }\n  \n  private async createStudentCredit(studentId: string, amount: number, paymentId: string): Promise<void> {\n    // For now, credit is tracked as unallocated payment amount\n    // In a more complex system, you might have a separate credits table\n  }\n  \n  private async applyCreditToInvoice(invoiceId: string, creditAmount: number): Promise<void> {\n    // Create a virtual payment record for credit application\n    const creditPayment = await storage.createPayment({\n      studentId: '', // Will be filled by the invoice's student\n      amount: creditAmount.toString(),\n      paymentMethod: 'credit_adjustment',\n      receivedBy: 'demo-management-001', // Use a valid user ID for credit adjustments\n      notes: 'Applied student credit balance',\n      receiptNumber: await this.generateReceiptNumber()\n    });\n    \n    await db.insert(paymentAllocations).values({\n      paymentId: creditPayment.id,\n      invoiceId,\n      amount: creditAmount.toString()\n    });\n  }\n  \n  async allocatePaymentToInvoices(paymentId: string, allocations: any[]): Promise<any> {\n    const results = [];\n    \n    for (const allocation of allocations) {\n      const { invoiceId, amount } = allocation;\n      \n      await db.insert(paymentAllocations).values({\n        paymentId,\n        invoiceId,\n        amount: amount.toString()\n      });\n      \n      // Update invoice\n      await this.updateInvoiceAfterPayment(invoiceId, amount);\n      results.push({ invoiceId, amount });\n    }\n    \n    return results;\n  }\n  \n  private async updateInvoiceAfterPayment(invoiceId: string, paymentAmount: number): Promise<void> {\n    const invoice = await db\n      .select()\n      .from(invoices)\n      .where(eq(invoices.id, invoiceId));\n    \n    if (!invoice[0]) return;\n    \n    const newAmountPaid = parseFloat(invoice[0].amountPaid || '0') + paymentAmount;\n    const newBalanceDue = parseFloat(invoice[0].total) - newAmountPaid;\n    const newStatus = newBalanceDue <= 0 ? 'paid' : 'partial';\n    \n    await db\n      .update(invoices)\n      .set({\n        amountPaid: newAmountPaid.toString(),\n        balanceDue: newBalanceDue.toString(),\n        status: newStatus\n      })\n      .where(eq(invoices.id, invoiceId));\n  }\n}\n\nexport const billingService = new PrimaxBillingService();","size_bytes":22216},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { setupTraditionalAuth } from \"./auth-traditional\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Setup traditional authentication\n  setupTraditionalAuth(app);\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2195},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { billingService } from \"./billing\";\nimport { requireAuth } from \"./auth-traditional\";\nimport { \n  insertStudentSchema, \n  insertInvoiceSchema, \n  insertPaymentSchema,\n  insertAttendanceSchema,\n  insertAssessmentSchema,\n  insertGradeSchema,\n  insertAnnouncementSchema,\n  insertClassScheduleSchema,\n  insertScheduleChangeSchema,\n  students,\n  subjects,\n  classes,\n  enrollments,\n  invoices,\n  payments,\n  paymentAllocations,\n  invoiceAdjustments,\n  attendance,\n  users,\n  expenses,\n  assessments,\n  grades,\n  cashDrawRequests,\n  announcements,\n  announcementRecipients,\n  addOns,\n  invoiceItems,\n  classSchedules,\n  scheduleChanges,\n  studentNotifications\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { and, desc, eq, gte, lte, sql } from 'drizzle-orm';\nimport { ObjectStorageService } from \"./objectStorage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Enhanced demo authentication with role-based access control\n  app.use((req: any, res, next) => {\n    // Parse role from URL query parameter for demo purposes\n    const urlRole = req.query.role || 'finance';\n    \n    // Demo user configurations for different role types\n    const demoUsers = {\n      // Regular teacher - only sees teacher dashboard\n      'teacher': {\n        id: 'demo-teacher-1',\n        role: 'teacher',\n        isSuperAdmin: false,\n        isTeacher: true,\n        teacherSubjects: ['99c0039b-c3cb-4182-b311-5d69a755d548', '747f8a50-8cb0-4090-aaf0-1a6dda90103b'],\n        firstName: 'Ahmed',\n        lastName: 'Khan',\n        email: 'teacher1@primax.edu'\n      },\n      // Super admin who is also a teacher - sees everything\n      'super-admin-teacher': {\n        id: 'demo-super-admin-teacher',\n        role: 'teacher', // Base role is teacher\n        isSuperAdmin: true,\n        isTeacher: true,\n        teacherSubjects: ['99c0039b-c3cb-4182-b311-5d69a755d548', '747f8a50-8cb0-4090-aaf0-1a6dda90103b'],\n        firstName: 'Sarah',\n        lastName: 'Ahmed',\n        email: 'sarah.admin@primax.edu'\n      },\n      // Super admin management (not teacher) - sees finance, management, parent\n      'super-admin-management': {\n        id: 'demo-super-admin-mgmt',\n        role: 'management',\n        isSuperAdmin: true,\n        isTeacher: false,\n        teacherSubjects: [],\n        firstName: 'Hassan',\n        lastName: 'Ali',\n        email: 'hassan.admin@primax.edu'\n      },\n      // Regular finance user\n      'finance': {\n        id: 'demo-finance-user',\n        role: 'finance',\n        isSuperAdmin: false,\n        isTeacher: false,\n        teacherSubjects: [],\n        firstName: 'Demo',\n        lastName: 'User',\n        email: 'demo@primax.school'\n      }\n    };\n\n    // Select user based on role parameter\n    const user = demoUsers[urlRole as keyof typeof demoUsers] || demoUsers['finance'];\n    \n    req.user = {\n      ...user,\n      expires_at: Math.floor(Date.now() / 1000) + 3600 // 1 hour from now\n    };\n    req.isAuthenticated = () => true;\n    next();\n  });\n\n  // Enhanced auth route with role-based access info\n  app.get('/api/auth/user', async (req: any, res) => {\n    const user = req.user;\n    \n    // Determine accessible dashboards based on role and permissions\n    const accessibleDashboards = getUserAccessibleDashboards(user);\n    \n    res.json({\n      ...user,\n      accessibleDashboards\n    });\n  });\n\n  // Helper function to determine accessible dashboards\n  function getUserAccessibleDashboards(user: any): string[] {\n    const dashboards = [];\n    \n    if (user.isSuperAdmin) {\n      // Super admins get access to finance, management, and parent dashboards\n      dashboards.push('finance', 'management', 'parent');\n      \n      // Super admin teachers also get teacher dashboard\n      if (user.isTeacher) {\n        dashboards.push('teacher');\n      }\n    } else {\n      // Regular users only get their primary role dashboard\n      dashboards.push(user.role);\n    }\n    \n    return dashboards;\n  }\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Students routes\n  app.get(\"/api/students\", async (req, res) => {\n    try {\n      const students = await storage.getStudents();\n      res.json(students);\n    } catch (error) {\n      console.error(\"Error fetching students:\", error);\n      res.status(500).json({ message: \"Failed to fetch students\" });\n    }\n  });\n\n  // Toggle student active status\n  app.patch(\"/api/students/:id/toggle-active\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { isActive } = req.body;\n      \n      if (typeof isActive !== 'boolean') {\n        return res.status(400).json({ message: \"isActive must be a boolean\" });\n      }\n      \n      const updatedStudent = await storage.toggleStudentActiveStatus(id, isActive);\n      res.json(updatedStudent);\n    } catch (error) {\n      console.error(\"Error toggling student active status:\", error);\n      res.status(500).json({ message: \"Failed to update student status\" });\n    }\n  });\n\n  // Delete student permanently\n  app.delete(\"/api/students/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Check if student exists first\n      const student = await storage.getStudent(id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n      \n      await storage.deleteStudent(id);\n      res.json({ message: \"Student deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting student:\", error);\n      res.status(500).json({ message: \"Failed to delete student\" });\n    }\n  });\n\n  // Roll number management endpoints\n  app.get(\"/api/roll-numbers/next\", async (req, res) => {\n    try {\n      const nextRollNumber = await storage.getNextRollNumber();\n      res.json({ \n        nextRollNumber,\n        format: \"PMXyy-#### (PMX + year + random 4-digit number)\",\n        example: \"PMX25-4782\"\n      });\n    } catch (error) {\n      console.error(\"Error generating next roll number:\", error);\n      res.status(500).json({ message: \"Failed to generate roll number\" });\n    }\n  });\n\n  app.post(\"/api/roll-numbers/reserve\", async (req, res) => {\n    try {\n      const reservation = await storage.reserveRollNumber();\n      res.json({\n        rollNumber: reservation.rollNumber,\n        expiresAt: reservation.expiresAt,\n        format: \"PMXyy-#### (PMX + year + random 4-digit number)\"\n      });\n    } catch (error) {\n      console.error(\"Error reserving roll number:\", error);\n      res.status(500).json({ message: \"Failed to reserve roll number\" });\n    }\n  });\n\n  // Teacher management endpoints\n  app.post(\"/api/teachers\", async (req, res) => {\n    try {\n      const teacherData = req.body;\n      \n      // Validate required fields\n      if (!teacherData.firstName || !teacherData.lastName || !teacherData.email) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const teacher = await storage.createTeacher(teacherData);\n      \n      // Create payout rule for the teacher\n      if (teacherData.payoutPercentage) {\n        await storage.createPayoutRule({\n          teacherId: teacher.id,\n          isFixed: true,\n          fixedPercentage: teacherData.payoutPercentage,\n          effectiveFrom: teacherData.hireDate || new Date().toISOString().split('T')[0],\n        });\n      }\n\n      res.json(teacher);\n    } catch (error) {\n      console.error(\"Error creating teacher:\", error);\n      res.status(500).json({ message: \"Failed to create teacher\" });\n    }\n  });\n\n  app.get(\"/api/teachers\", async (req, res) => {\n    try {\n      const teachers = await storage.getTeachers();\n      res.json(teachers);\n    } catch (error) {\n      console.error(\"Error fetching teachers:\", error);\n      res.status(500).json({ message: \"Failed to fetch teachers\" });\n    }\n  });\n\n  // Management routes\n  app.post('/api/management', requireAuth, async (req, res) => {\n    try {\n      const management = await storage.createManagement(req.body);\n      res.json(management);\n    } catch (error) {\n      console.error('Error creating management:', error);\n      res.status(500).json({ message: 'Failed to create management account' });\n    }\n  });\n\n  app.put('/api/management/:id', requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const managementData = req.body;\n      \n      // Validate required fields\n      if (!managementData.firstName || !managementData.lastName || !managementData.email) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const management = await storage.updateManagement(id, managementData);\n      res.json(management);\n    } catch (error) {\n      console.error('Error updating management:', error);\n      res.status(500).json({ message: 'Failed to update management account' });\n    }\n  });\n\n  app.delete('/api/management/:id', requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteManagement(id);\n      res.json({ message: \"Management account deleted successfully\" });\n    } catch (error) {\n      console.error('Error deleting management:', error);\n      res.status(500).json({ message: 'Failed to delete management account' });\n    }\n  });\n\n  app.put(\"/api/teachers/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const teacherData = req.body;\n      \n      // Validate required fields\n      if (!teacherData.firstName || !teacherData.lastName || !teacherData.email) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const teacher = await storage.updateTeacher(id, teacherData);\n      res.json(teacher);\n    } catch (error) {\n      console.error(\"Error updating teacher:\", error);\n      res.status(500).json({ message: \"Failed to update teacher\" });\n    }\n  });\n\n  app.delete(\"/api/teachers/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteTeacher(id);\n      res.json({ message: \"Teacher deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting teacher:\", error);\n      res.status(500).json({ message: \"Failed to delete teacher\" });\n    }\n  });\n\n  // Staff management endpoints\n  app.post(\"/api/staff\", async (req, res) => {\n    try {\n      const staffData = req.body;\n      \n      // Validate required fields\n      if (!staffData.firstName || !staffData.lastName || !staffData.email || !staffData.role) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const staff = await storage.createStaff(staffData);\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error creating staff:\", error);\n      res.status(500).json({ message: \"Failed to create staff member\" });\n    }\n  });\n\n  app.get(\"/api/staff\", async (req, res) => {\n    try {\n      const staff = await storage.getStaff();\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error fetching staff:\", error);\n      res.status(500).json({ message: \"Failed to fetch staff\" });\n    }\n  });\n\n  app.put(\"/api/staff/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const staffData = req.body;\n      \n      // Validate required fields\n      if (!staffData.firstName || !staffData.lastName || !staffData.email || !staffData.role) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const staff = await storage.updateStaff(id, staffData);\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error updating staff:\", error);\n      res.status(500).json({ message: \"Failed to update staff member\" });\n    }\n  });\n\n  app.delete(\"/api/staff/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteStaff(id);\n      res.json({ message: \"Staff member deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting staff:\", error);\n      res.status(500).json({ message: \"Failed to delete staff member\" });\n    }\n  });\n\n  app.post(\"/api/roll-numbers/check\", async (req, res) => {\n    try {\n      const { rollNumber } = req.body;\n      \n      if (!rollNumber) {\n        return res.status(400).json({ message: \"Roll number is required\" });\n      }\n      \n      const exists = await storage.rollNumberExists(rollNumber);\n      res.json({ \n        rollNumber, \n        exists,\n        available: !exists \n      });\n    } catch (error) {\n      console.error(\"Error checking roll number:\", error);\n      res.status(500).json({ message: \"Failed to check roll number\" });\n    }\n  });\n\n  app.post(\"/api/roll-numbers/assign-bulk\", async (req, res) => {\n    try {\n      const result = await storage.assignRollNumbersToExistingStudents();\n      res.json({\n        message: `Successfully assigned roll numbers to ${result.updated} students`,\n        ...result\n      });\n    } catch (error) {\n      console.error(\"Error in bulk roll number assignment:\", error);\n      res.status(500).json({ message: \"Failed to assign roll numbers\" });\n    }\n  });\n\n  app.post(\"/api/students\", async (req, res) => {\n    try {\n      const validatedData = insertStudentSchema.parse(req.body);\n      const student = await storage.createStudent(validatedData);\n      res.status(201).json(student);\n    } catch (error) {\n      console.error(\"Error creating student:\", error);\n      res.status(400).json({ message: \"Failed to create student\" });\n    }\n  });\n\n  // Get enrollments for a specific student  \n  app.get(\"/api/enrollments/student/:studentId\", async (req, res) => {\n    try {\n      const { studentId } = req.params;\n      const enrollments = await storage.getEnrollmentsByStudent(studentId);\n      res.json(enrollments);\n    } catch (error: any) {\n      console.error(\"Error fetching student enrollments:\", error);\n      res.status(500).json({ \n        message: \"Failed to fetch student enrollments\", \n        error: error.message || error \n      });\n    }\n  });\n\n  // Complete enrollment endpoint - creates student, enrollments, and invoice\n  app.post(\"/api/enrollments\", async (req, res) => {\n    try {\n      const { \n        studentData, \n        selectedSubjects, // Now includes discount info per subject\n        additionalFees = [] \n      } = req.body;\n\n      console.log(\"Processing complete enrollment:\", { studentData, selectedSubjects, additionalFees });\n\n      // 1. Create the student\n      const validatedStudentData = insertStudentSchema.parse(studentData);\n      const student = await storage.createStudent(validatedStudentData);\n      console.log(\"Student created:\", student.id);\n\n      // 2. Create enrollments for selected subjects with per-subject discounts\n      const enrollments = [];\n      let totalTuition = 0;\n      let totalDiscount = 0;\n      const subjectDetails = [];\n\n      for (const subjectSelection of selectedSubjects) {\n        const { subjectId, discountType = 'none', discountValue = 0, discountReason = '' } = subjectSelection;\n        const subject = await storage.getSubjectById(subjectId);\n        \n        if (subject) {\n          // Calculate subject-specific discount\n          const baseFee = parseFloat(subject.baseFee);\n          let discountAmount = 0;\n          \n          if (discountType === 'percentage') {\n            discountAmount = (baseFee * parseFloat(discountValue)) / 100;\n          } else if (discountType === 'fixed') {\n            discountAmount = parseFloat(discountValue);\n          }\n          \n          const finalSubjectFee = baseFee - discountAmount;\n          \n          // Create enrollment with discount information\n          const enrollment = await storage.createEnrollment({\n            studentId: student.id,\n            subjectId: subjectId,\n            discountType,\n            discountValue: discountValue.toString(),\n            discountReason,\n            discountApprovedBy: 'system', // In real app, this would be the current user\n            enrolledAt: new Date(),\n            isActive: true\n          });\n          enrollments.push(enrollment);\n          \n          totalTuition += baseFee;\n          totalDiscount += discountAmount;\n          subjectDetails.push({\n            name: subject.name,\n            baseFee,\n            discountAmount,\n            finalFee: finalSubjectFee,\n            discountType,\n            discountValue,\n            discountReason\n          });\n          \n          console.log(`Enrolled in ${subject.name} - Base Fee: Rs.${baseFee}, Discount: Rs.${discountAmount}, Final: Rs.${finalSubjectFee}`);\n        }\n      }\n\n      // 3. Calculate final amount with subject-specific discounts\n      const additionalFeesTotal = additionalFees.reduce((sum: number, fee: any) => sum + parseFloat(fee.amount || 0), 0);\n      const finalTotal = totalTuition - totalDiscount + additionalFeesTotal;\n\n      // 4. Generate initial invoice\n      if (finalTotal > 0) {\n        const invoiceNumber = `INV-${Date.now()}`;\n        const currentDate = new Date();\n        const nextMonth = new Date(currentDate);\n        nextMonth.setMonth(currentDate.getMonth() + 1);\n        const dueDate = new Date(currentDate);\n        dueDate.setDate(currentDate.getDate() + 7); // 7 days to pay\n\n        const invoice = await storage.createInvoice({\n          studentId: student.id,\n          invoiceNumber,\n          type: 'monthly',\n          billingPeriodStart: currentDate.toISOString().split('T')[0],\n          billingPeriodEnd: nextMonth.toISOString().split('T')[0],\n          issueDate: currentDate.toISOString().split('T')[0],\n          dueDate: dueDate.toISOString().split('T')[0],\n          subtotal: totalTuition.toFixed(2),\n          discountAmount: totalDiscount.toFixed(2),\n          total: finalTotal.toFixed(2),\n          amountPaid: '0.00',\n          balanceDue: finalTotal.toFixed(2),\n          status: 'sent',\n          notes: `Initial enrollment invoice for ${subjectDetails.map(s => s.name).join(', ')}${totalDiscount > 0 ? ` (Rs.${totalDiscount.toFixed(2)} total subject discounts applied)` : ''}`,\n          createdBy: 'system'\n        });\n        \n        console.log(`Invoice ${invoiceNumber} created for Rs.${finalTotal}`);\n\n        res.status(201).json({\n          student,\n          enrollments,\n          invoice,\n          summary: {\n            totalSubjects: selectedSubjects.length,\n            subtotal: totalTuition,\n            totalDiscount: totalDiscount,\n            subjectDetails: subjectDetails,\n            total: finalTotal\n          }\n        });\n      } else {\n        res.status(201).json({\n          student,\n          enrollments,\n          summary: {\n            totalSubjects: selectedSubjects.length,\n            subtotal: totalTuition,\n            totalDiscount: totalDiscount,\n            subjectDetails: subjectDetails,\n            total: finalTotal\n          }\n        });\n      }\n\n    } catch (error: any) {\n      console.error(\"Error processing enrollment:\", error);\n      res.status(400).json({ \n        message: \"Failed to process enrollment\", \n        error: error.message || error \n      });\n    }\n  });\n\n  app.get(\"/api/students/:id\", async (req, res) => {\n    try {\n      const student = await storage.getStudent(req.params.id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n      res.json(student);\n    } catch (error) {\n      console.error(\"Error fetching student:\", error);\n      res.status(500).json({ message: \"Failed to fetch student\" });\n    }\n  });\n\n  // New financial endpoints\n  app.get(\"/api/students/:id/financial\", async (req, res) => {\n    try {\n      const financialSummary = await storage.getStudentFinancialSummary(req.params.id);\n      res.json(financialSummary);\n    } catch (error) {\n      console.error(\"Error fetching student financial data:\", error);\n      res.status(500).json({ message: \"Failed to fetch financial data\" });\n    }\n  });\n\n  app.get(\"/api/students/:id/attendance\", async (req, res) => {\n    try {\n      const attendancePercentage = await storage.getStudentAttendancePercentage(req.params.id);\n      res.json({ attendancePercentage });\n    } catch (error) {\n      console.error(\"Error fetching student attendance:\", error);\n      res.status(500).json({ message: \"Failed to fetch attendance data\" });\n    }\n  });\n\n  app.get(\"/api/students/:id/grade\", async (req, res) => {\n    try {\n      const averageGrade = await storage.getStudentAverageGrade(req.params.id);\n      res.json({ averageGrade });\n    } catch (error) {\n      console.error(\"Error fetching student grade:\", error);\n      res.status(500).json({ message: \"Failed to fetch grade data\" });\n    }\n  });\n\n  // Subjects routes\n  app.get(\"/api/subjects\", async (req, res) => {\n    try {\n      const classLevel = req.query.classLevel as string;\n      const subjects = classLevel \n        ? await storage.getSubjectsByClassLevel(classLevel)\n        : await storage.getSubjects();\n      res.json(subjects);\n    } catch (error) {\n      console.error(\"Error fetching subjects:\", error);\n      res.status(500).json({ message: \"Failed to fetch subjects\" });\n    }\n  });\n\n  // Add-ons routes\n  app.get(\"/api/add-ons\", async (req, res) => {\n    try {\n      const addOns = await storage.getAddOns();\n      res.json(addOns);\n    } catch (error) {\n      console.error(\"Error fetching add-ons:\", error);\n      res.status(500).json({ message: \"Failed to fetch add-ons\" });\n    }\n  });\n\n  app.post(\"/api/add-ons\", async (req, res) => {\n    try {\n      const addOn = await storage.createAddOn(req.body);\n      res.status(201).json(addOn);\n    } catch (error) {\n      console.error(\"Error creating add-on:\", error);\n      res.status(400).json({ message: \"Failed to create add-on\" });\n    }\n  });\n\n  // Teacher routes\n  app.get(\"/api/teacher/classes/today\", async (req: any, res) => {\n    try {\n      // Use actual teacher ID from session (fallback to demo for now)\n      const teacherId = req.user?.role === 'teacher' ? req.user.id : \"demo-teacher-1\";\n      const classes = await storage.getTodayClasses(teacherId);\n      res.json(classes);\n    } catch (error) {\n      console.error(\"Error fetching today's classes:\", error);\n      res.status(500).json({ message: \"Failed to fetch today's classes\" });\n    }\n  });\n\n  app.get(\"/api/teacher/earnings\", async (req: any, res) => {\n    try {\n      // Use actual teacher ID from session (fallback to demo for now)\n      const teacherId = req.user?.role === 'teacher' ? req.user.id : \"demo-teacher-1\";\n      const earnings = await storage.getTeacherEarningsRestricted(teacherId);\n      res.json(earnings);\n    } catch (error) {\n      console.error(\"Error fetching teacher earnings:\", error);\n      res.status(500).json({ message: \"Failed to fetch teacher earnings\" });\n    }\n  });\n\n  // Get teacher's assigned subjects only\n  app.get(\"/api/teacher/subjects\", async (req: any, res) => {\n    try {\n      const teacherId = req.user?.role === 'teacher' ? req.user.id : \"demo-teacher-1\";\n      const subjects = await storage.getTeacherSubjects(teacherId);\n      res.json(subjects);\n    } catch (error) {\n      console.error(\"Error fetching teacher subjects:\", error);\n      res.status(500).json({ message: \"Failed to fetch teacher subjects\" });\n    }\n  });\n\n  // Get students enrolled in teacher's subjects only\n  app.get(\"/api/teacher/students\", async (req: any, res) => {\n    try {\n      const teacherId = req.user?.role === 'teacher' ? req.user.id : \"demo-teacher-1\";\n      const students = await storage.getTeacherStudents(teacherId);\n      res.json(students);\n    } catch (error) {\n      console.error(\"Error fetching teacher students:\", error);\n      res.status(500).json({ message: \"Failed to fetch teacher students\" });\n    }\n  });\n\n  // Get assessments created by teacher only (maintaining data isolation)\n  app.get(\"/api/teacher/assessments\", async (req: any, res) => {\n    try {\n      const teacherId = req.user?.role === 'teacher' ? req.user.id : \"demo-teacher-1\";\n      const assessments = await storage.getTeacherAssessments(teacherId);\n      res.json(assessments);\n    } catch (error) {\n      console.error(\"Error fetching teacher assessments:\", error);\n      res.status(500).json({ message: \"Failed to fetch teacher assessments\" });\n    }\n  });\n\n  // Schedule Management Routes\n  \n  // Get teacher's schedules\n  app.get(\"/api/teacher/schedules\", async (req: any, res) => {\n    try {\n      const teacherId = req.user?.role === 'teacher' ? req.user.id : \"demo-teacher-1\";\n      const schedules = await storage.getTeacherSchedules(teacherId);\n      res.json(schedules);\n    } catch (error) {\n      console.error(\"Error fetching teacher schedules:\", error);\n      res.status(500).json({ message: \"Failed to fetch teacher schedules\" });\n    }\n  });\n\n  // Create new schedule\n  app.post(\"/api/teacher/schedules\", async (req: any, res) => {\n    try {\n      const teacherId = req.user?.role === 'teacher' ? req.user.id : \"demo-teacher-1\";\n      \n      const scheduleData = insertClassScheduleSchema.parse({\n        ...req.body,\n        teacherId: teacherId, // Ensure teacher can only create schedules for themselves\n      });\n      \n      const schedule = await storage.createSchedule(scheduleData);\n      res.status(201).json(schedule);\n    } catch (error) {\n      console.error(\"Error creating schedule:\", error);\n      res.status(500).json({ message: \"Failed to create schedule\" });\n    }\n  });\n\n  // Update schedule\n  app.put(\"/api/teacher/schedules/:id\", async (req: any, res) => {\n    try {\n      const teacherId = req.user?.role === 'teacher' ? req.user.id : \"demo-teacher-1\";\n      const scheduleId = req.params.id;\n      \n      // Verify schedule belongs to teacher before updating\n      const existingSchedules = await storage.getTeacherSchedules(teacherId);\n      const scheduleExists = existingSchedules.find(s => s.id === scheduleId);\n      \n      if (!scheduleExists) {\n        return res.status(403).json({ message: \"You can only update your own schedules\" });\n      }\n      \n      const updates = insertClassScheduleSchema.partial().parse(req.body);\n      const updatedSchedule = await storage.updateSchedule(scheduleId, updates);\n      res.json(updatedSchedule);\n    } catch (error) {\n      console.error(\"Error updating schedule:\", error);\n      res.status(500).json({ message: \"Failed to update schedule\" });\n    }\n  });\n\n  // Delete schedule\n  app.delete(\"/api/teacher/schedules/:id\", async (req: any, res) => {\n    try {\n      const teacherId = req.user?.role === 'teacher' ? req.user.id : \"demo-teacher-1\";\n      const scheduleId = req.params.id;\n      \n      // Verify schedule belongs to teacher before deleting\n      const existingSchedules = await storage.getTeacherSchedules(teacherId);\n      const scheduleExists = existingSchedules.find(s => s.id === scheduleId);\n      \n      if (!scheduleExists) {\n        return res.status(403).json({ message: \"You can only delete your own schedules\" });\n      }\n      \n      await storage.deleteSchedule(scheduleId);\n      res.json({ message: \"Schedule deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting schedule:\", error);\n      res.status(500).json({ message: \"Failed to delete schedule\" });\n    }\n  });\n\n  // Schedule Changes Routes\n  \n  // Get schedule changes for teacher\n  app.get(\"/api/teacher/schedule-changes\", async (req: any, res) => {\n    try {\n      const teacherId = req.user?.role === 'teacher' ? req.user.id : \"demo-teacher-1\";\n      const startDate = req.query.startDate ? new Date(req.query.startDate as string) : undefined;\n      const endDate = req.query.endDate ? new Date(req.query.endDate as string) : undefined;\n      \n      const changes = await storage.getScheduleChanges(teacherId, startDate, endDate);\n      res.json(changes);\n    } catch (error) {\n      console.error(\"Error fetching schedule changes:\", error);\n      res.status(500).json({ message: \"Failed to fetch schedule changes\" });\n    }\n  });\n\n  // Create schedule change (cancellation, reschedule, extra class)\n  app.post(\"/api/teacher/schedule-changes\", async (req: any, res) => {\n    try {\n      const teacherId = req.user?.role === 'teacher' ? req.user.id : \"demo-teacher-1\";\n      \n      const changeData = insertScheduleChangeSchema.parse({\n        ...req.body,\n        teacherId: teacherId,\n        createdBy: req.user?.id || teacherId,\n      });\n      \n      const change = await storage.createScheduleChange(changeData);\n      res.status(201).json(change);\n    } catch (error) {\n      console.error(\"Error creating schedule change:\", error);\n      res.status(500).json({ message: \"Failed to create schedule change\" });\n    }\n  });\n\n  // Update schedule change\n  app.put(\"/api/teacher/schedule-changes/:id\", async (req: any, res) => {\n    try {\n      const teacherId = req.user?.role === 'teacher' ? req.user.id : \"demo-teacher-1\";\n      const changeId = req.params.id;\n      \n      // Verify change belongs to teacher\n      const existingChanges = await storage.getScheduleChanges(teacherId);\n      const changeExists = existingChanges.find(c => c.id === changeId);\n      \n      if (!changeExists) {\n        return res.status(403).json({ message: \"You can only update your own schedule changes\" });\n      }\n      \n      const updates = insertScheduleChangeSchema.partial().parse(req.body);\n      const updatedChange = await storage.updateScheduleChange(changeId, updates);\n      res.json(updatedChange);\n    } catch (error) {\n      console.error(\"Error updating schedule change:\", error);\n      res.status(500).json({ message: \"Failed to update schedule change\" });\n    }\n  });\n\n  // Delete schedule change\n  app.delete(\"/api/teacher/schedule-changes/:id\", async (req: any, res) => {\n    try {\n      const teacherId = req.user?.role === 'teacher' ? req.user.id : \"demo-teacher-1\";\n      const changeId = req.params.id;\n      \n      // Verify change belongs to teacher\n      const existingChanges = await storage.getScheduleChanges(teacherId);\n      const changeExists = existingChanges.find(c => c.id === changeId);\n      \n      if (!changeExists) {\n        return res.status(403).json({ message: \"You can only delete your own schedule changes\" });\n      }\n      \n      await storage.deleteScheduleChange(changeId);\n      res.json({ message: \"Schedule change deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting schedule change:\", error);\n      res.status(500).json({ message: \"Failed to delete schedule change\" });\n    }\n  });\n\n  // Student Schedule Routes\n  \n  // Get student's schedule and schedule changes\n  app.get(\"/api/student/:studentId/schedule\", async (req: any, res) => {\n    try {\n      const studentId = req.params.studentId;\n      const startDate = req.query.startDate ? new Date(req.query.startDate as string) : undefined;\n      const endDate = req.query.endDate ? new Date(req.query.endDate as string) : undefined;\n      \n      const schedule = await storage.getStudentSchedule(studentId, startDate, endDate);\n      res.json(schedule);\n    } catch (error) {\n      console.error(\"Error fetching student schedule:\", error);\n      res.status(500).json({ message: \"Failed to fetch student schedule\" });\n    }\n  });\n\n  // Get student's schedule notifications\n  app.get(\"/api/student/:studentId/notifications\", async (req: any, res) => {\n    try {\n      const studentId = req.params.studentId;\n      const notifications = await storage.getStudentNotifications(studentId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching student notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch student notifications\" });\n    }\n  });\n\n  // Mark notification as read\n  app.put(\"/api/student/notifications/:id/read\", async (req: any, res) => {\n    try {\n      const notificationId = req.params.id;\n      await storage.markNotificationRead(notificationId);\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // Classes routes\n  app.get(\"/api/classes/:id/students\", async (req, res) => {\n    try {\n      const students = await storage.getStudentsByClass(req.params.id);\n      res.json(students);\n    } catch (error) {\n      console.error(\"Error fetching class students:\", error);\n      res.status(500).json({ message: \"Failed to fetch class students\" });\n    }\n  });\n\n  // Attendance routes\n  app.post(\"/api/attendance\", requireAuth, async (req: any, res) => {\n    try {\n      const validatedData = insertAttendanceSchema.parse({\n        ...req.body,\n        markedBy: \"demo-teacher-id\", // For demo purposes\n      });\n      const attendance = await storage.createAttendance(validatedData);\n      res.status(201).json(attendance);\n    } catch (error) {\n      console.error(\"Error creating attendance:\", error);\n      res.status(400).json({ message: \"Failed to create attendance record\" });\n    }\n  });\n\n  app.get(\"/api/attendance/class/:classId/:date\", async (req, res) => {\n    try {\n      const { classId, date } = req.params;\n      const attendance = await storage.getAttendanceByClass(classId, date);\n      res.json(attendance);\n    } catch (error) {\n      console.error(\"Error fetching class attendance:\", error);\n      res.status(500).json({ message: \"Failed to fetch class attendance\" });\n    }\n  });\n\n  app.get(\"/api/attendance/student/:studentId\", async (req, res) => {\n    try {\n      const { studentId } = req.params;\n      const { startDate, endDate } = req.query;\n      const attendance = await storage.getStudentAttendance(\n        studentId, \n        startDate as string, \n        endDate as string\n      );\n      res.json(attendance);\n    } catch (error) {\n      console.error(\"Error fetching student attendance:\", error);\n      res.status(500).json({ message: \"Failed to fetch student attendance\" });\n    }\n  });\n\n  // Invoices routes\n  app.get(\"/api/invoices\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const invoices = await storage.getInvoices(limit);\n      res.json(invoices);\n    } catch (error) {\n      console.error(\"Error fetching invoices:\", error);\n      res.status(500).json({ message: \"Failed to fetch invoices\" });\n    }\n  });\n\n  app.post(\"/api/invoices\", async (req, res) => {\n    try {\n      console.log(\"Creating invoice with data:\", JSON.stringify(req.body, null, 2));\n      \n      // Handle both old format and new wizard format\n      if (req.body.items && Array.isArray(req.body.items)) {\n        // New wizard format with items\n        const invoice = await storage.createInvoiceWithItems(req.body);\n        res.status(201).json(invoice);\n      } else if (req.body.studentId && req.body.total) {\n        // Old format - create simple invoice without schema validation\n        const invoiceData = {\n          id: crypto.randomUUID(),\n          invoiceNumber: `INV-${Date.now()}`,\n          studentId: req.body.studentId,\n          issueDate: new Date(),\n          dueDate: new Date(),\n          subtotal: req.body.total,\n          discountAmount: '0.00',\n          total: req.body.total,\n          amountPaid: '0.00',\n          balanceDue: req.body.total,\n          status: 'sent',\n          notes: req.body.notes || '',\n          createdBy: 'demo-user',\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        };\n        \n        const invoice = await storage.createInvoice(invoiceData);\n        res.status(201).json(invoice);\n      } else {\n        res.status(400).json({ message: \"Invalid invoice data format\" });\n      }\n    } catch (error) {\n      console.error(\"Error creating invoice:\", error);\n      res.status(400).json({ \n        message: \"Failed to create invoice\",\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  app.put(\"/api/invoices/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const invoice = await storage.updateInvoiceWithItems(id, req.body);\n      res.json(invoice);\n    } catch (error) {\n      console.error(\"Error updating invoice:\", error);\n      res.status(500).json({ message: \"Failed to update invoice\" });\n    }\n  });\n\n  app.patch(\"/api/invoices/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const updatedInvoice = await storage.updateInvoice(id, updates);\n      res.json(updatedInvoice);\n    } catch (error) {\n      console.error(\"Error updating invoice:\", error);\n      res.status(500).json({ message: \"Failed to update invoice\" });\n    }\n  });\n\n  // Payments routes\n  app.get(\"/api/payments\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const payments = await storage.getPayments(limit);\n      res.json(payments);\n    } catch (error) {\n      console.error(\"Error fetching payments:\", error);\n      res.status(500).json({ message: \"Failed to fetch payments\" });\n    }\n  });\n\n  app.post(\"/api/payments\", async (req: any, res) => {\n    try {\n      // If this payment is for a specific invoice, use partial payment logic\n      if (req.body.invoiceId) {\n        const invoice = await storage.getInvoiceById(req.body.invoiceId);\n        if (!invoice) {\n          return res.status(404).json({ message: \"Invoice not found\" });\n        }\n\n        // Use the billing system's partial payment processing\n        const result = await storage.processPartialPayment({\n          paymentAmount: parseFloat(req.body.amount),\n          studentId: req.body.studentId,\n          paymentMethod: req.body.paymentMethod,\n          paymentDate: req.body.paymentDate ? new Date(req.body.paymentDate) : new Date(),\n          receivedBy: req.user?.claims?.sub || req.user?.id || 'demo-management-001',\n          notes: req.body.notes || '',\n          transactionNumber: req.body.transactionNumber || '',\n          invoiceId: req.body.invoiceId\n        });\n\n        res.status(201).json(result);\n      } else {\n        // For general payments without specific invoice, create payment with clean receipt number\n        const cleanReceiptNumber = await billingService.generateReceiptNumber();\n        const validatedData = insertPaymentSchema.parse({\n          ...req.body,\n          receiptNumber: cleanReceiptNumber,\n          paymentDate: new Date(req.body.paymentDate),\n          receivedBy: req.user?.claims?.sub || req.user?.id || 'demo-management-001',\n        });\n        \n        const payment = await storage.createPayment(validatedData);\n        \n        // Try to apply as advance payment to outstanding invoices\n        try {\n          const outstandingInvoices = await storage.getInvoicesByStudent(req.body.studentId);\n          const unpaidInvoices = outstandingInvoices.filter(inv => parseFloat(inv.balanceDue) > 0);\n          \n          if (unpaidInvoices.length > 0) {\n            // Apply payment to oldest invoice first\n            const targetInvoice = unpaidInvoices.sort((a, b) => \n              new Date(a.issueDate).getTime() - new Date(b.issueDate).getTime()\n            )[0];\n            \n            const paymentAmount = parseFloat(req.body.amount);\n            const invoiceBalance = parseFloat(targetInvoice.balanceDue);\n            const allocationAmount = Math.min(paymentAmount, invoiceBalance);\n            \n            // Create payment allocation\n            await storage.createPaymentAllocation({\n              paymentId: payment.id,\n              invoiceId: targetInvoice.id,\n              amount: allocationAmount.toFixed(2),\n            });\n            \n            // Update invoice\n            const newAmountPaid = parseFloat(targetInvoice.amountPaid) + allocationAmount;\n            const newBalanceDue = parseFloat(targetInvoice.total) - newAmountPaid;\n            \n            await storage.updateInvoice(targetInvoice.id, {\n              amountPaid: newAmountPaid.toFixed(2),\n              balanceDue: newBalanceDue.toFixed(2),\n              status: newBalanceDue <= 0 ? 'paid' : 'partial',\n            });\n          }\n        } catch (allocationError) {\n          console.error(\"Error allocating payment:\", allocationError);\n          // Payment still created successfully, allocation just failed\n        }\n        \n        res.status(201).json(payment);\n      }\n    } catch (error) {\n      console.error(\"Error creating payment:\", error);\n      res.status(400).json({ \n        message: error instanceof Error ? error.message : \"Failed to create payment\" \n      });\n    }\n  });\n\n  // Assessments routes - NO AUTH REQUIRED FOR DEMO\n  app.get(\"/api/assessments\", async (req, res) => {\n    try {\n      const assessments = await storage.getAssessments();\n      res.json(assessments);\n    } catch (error) {\n      console.error(\"Error fetching assessments:\", error);\n      res.status(500).json({ message: \"Failed to fetch assessments\" });\n    }\n  });\n\n  // Test route to bypass all authentication issues\n  app.post(\"/api/assessments-test\", async (req: any, res) => {\n    try {\n      console.log(\"Received assessment creation request:\", req.body);\n      const validatedData = {\n        name: req.body.name,\n        subjectId: req.body.subjectId,\n        totalMarks: req.body.totalMarks,\n        assessmentDate: req.body.assessmentDate ? new Date(req.body.assessmentDate) : new Date(),\n        description: req.body.description || '',\n        teacherId: \"demo-teacher-id\", // For demo purposes\n      };\n      \n      console.log(\"Creating assessment with data:\", validatedData);\n      const assessment = await storage.createAssessment(validatedData);\n      console.log(\"Assessment created successfully:\", assessment);\n      res.status(201).json(assessment);\n    } catch (error) {\n      console.error(\"Error creating assessment:\", error);\n      res.status(400).json({ message: \"Failed to create assessment\", error: error.message });\n    }\n  });\n\n  app.post(\"/api/assessments\", async (req: any, res) => {\n    try {\n      console.log(\"Assessment creation request - bypassing auth:\", req.body);\n      const validatedData = {\n        name: req.body.name,\n        subjectId: req.body.subjectId,\n        totalMarks: req.body.totalMarks,\n        assessmentDate: req.body.assessmentDate ? new Date(req.body.assessmentDate) : new Date(),\n        description: req.body.description || '',\n        teacherId: \"demo-teacher-id\", // For demo purposes\n      };\n      const assessment = await storage.createAssessment(validatedData);\n      res.status(201).json(assessment);\n    } catch (error) {\n      console.error(\"Error creating assessment:\", error);\n      res.status(400).json({ message: \"Failed to create assessment\", error: error.message });\n    }\n  });\n\n  app.post(\"/api/grades\", requireAuth, async (req: any, res) => {\n    try {\n      const validatedData = insertGradeSchema.parse({\n        ...req.body,\n        enteredBy: \"demo-teacher-id\", // For demo purposes\n      });\n      const grade = await storage.createGrade(validatedData);\n      res.status(201).json(grade);\n    } catch (error) {\n      console.error(\"Error creating grade:\", error);\n      res.status(400).json({ message: \"Failed to create grade\" });\n    }\n  });\n\n  app.get(\"/api/grades/student/:studentId\", async (req, res) => {\n    try {\n      const grades = await storage.getStudentGrades(req.params.studentId);\n      res.json(grades);\n    } catch (error) {\n      console.error(\"Error fetching student grades:\", error);\n      res.status(500).json({ message: \"Failed to fetch student grades\" });\n    }\n  });\n\n  // Cash draw requests routes\n  app.get(\"/api/cash-draw-requests\", async (req, res) => {\n    try {\n      const requests = await storage.getCashDrawRequests();\n      res.json(requests);\n    } catch (error) {\n      console.error(\"Error fetching cash draw requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch cash draw requests\" });\n    }\n  });\n\n  app.post(\"/api/cash-draw-requests\", requireAuth, async (req: any, res) => {\n    try {\n      const requestData = {\n        ...req.body,\n        teacherId: \"demo-teacher-id\", // For demo purposes\n      };\n      const request = await storage.createCashDrawRequest(requestData);\n      res.status(201).json(request);\n    } catch (error) {\n      console.error(\"Error creating cash draw request:\", error);\n      res.status(400).json({ message: \"Failed to create cash draw request\" });\n    }\n  });\n\n  app.patch(\"/api/cash-draw-requests/:id\", requireAuth, async (req: any, res) => {\n    try {\n      const updates = {\n        ...req.body,\n        reviewedBy: \"demo-finance-user\", // For demo purposes\n        reviewedAt: new Date(),\n      };\n      const request = await storage.updateCashDrawRequest(req.params.id, updates);\n      res.json(request);\n    } catch (error) {\n      console.error(\"Error updating cash draw request:\", error);\n      res.status(400).json({ message: \"Failed to update cash draw request\" });\n    }\n  });\n\n  // Daily close routes\n  app.get(\"/api/daily-close/:date\", async (req, res) => {\n    try {\n      const dailyCloseRecord = await storage.getDailyClose(req.params.date);\n      res.json(dailyCloseRecord || null);\n    } catch (error) {\n      console.error(\"Error fetching daily close:\", error);\n      res.status(500).json({ message: \"Failed to fetch daily close\" });\n    }\n  });\n\n  // Get all daily closes for management dashboard\n  app.get(\"/api/daily-close\", async (req, res) => {\n    try {\n      const dailyCloseRecords = await storage.getAllDailyCloses();\n      res.json(dailyCloseRecords);\n    } catch (error) {\n      console.error(\"Error fetching daily closes:\", error);\n      res.status(500).json({ message: \"Failed to fetch daily closes\" });\n    }\n  });\n\n  app.post(\"/api/daily-close\", requireAuth, async (req: any, res) => {\n    try {\n      const { closeDate } = req.body;\n      \n      // Prevent future date modifications\n      const today = new Date().toISOString().split('T')[0];\n      if (closeDate > today) {\n        return res.status(400).json({ \n          message: \"Daily close operations can only be performed for past and current dates\" \n        });\n      }\n      \n      // Check if daily close already exists for this date\n      const existingRecord = await storage.getDailyClose(closeDate);\n      \n      const dailyCloseData = {\n        ...req.body,\n        closedBy: \"demo-finance-user\", // For demo purposes\n        closedAt: new Date()\n      };\n\n      if (existingRecord) {\n        // Update existing record\n        const updatedRecord = await storage.updateDailyClose(closeDate, dailyCloseData);\n        return res.json(updatedRecord);\n      }\n      \n      const dailyCloseRecord = await storage.createDailyClose(dailyCloseData);\n      res.status(201).json(dailyCloseRecord);\n    } catch (error) {\n      console.error(\"Error creating/updating daily close:\", error);\n      res.status(400).json({ message: \"Failed to create/update daily close\" });\n    }\n  });\n\n  // Daily close lock/finalize (no PDF generation)\n  app.post(\"/api/daily-close/lock\", requireAuth, async (req: any, res) => {\n    try {\n      const { closeDate, dailyCloseData } = req.body;\n      \n      // Prevent future date modifications\n      const today = new Date().toISOString().split('T')[0];\n      if (closeDate > today) {\n        return res.status(400).json({ \n          message: \"Daily close operations can only be performed for past and current dates\" \n        });\n      }\n      \n      // Check if record already exists and is locked\n      const existingRecord = await storage.getDailyClose(closeDate);\n      if (existingRecord?.isLocked) {\n        return res.status(400).json({ \n          message: \"This date is already locked and cannot be modified\" \n        });\n      }\n      \n      // Create or update the daily close record\n      const dataToSave = {\n        ...dailyCloseData,\n        closedBy: \"demo-finance-user\", // Ensure closedBy is set\n        isLocked: true,\n        closedAt: new Date()\n      };\n\n      let dailyCloseRecord;\n      if (existingRecord) {\n        dailyCloseRecord = await storage.updateDailyClose(closeDate, dataToSave);\n      } else {\n        dailyCloseRecord = await storage.createDailyClose(dataToSave);\n      }\n      \n      res.json({ \n        success: true, \n        message: \"Daily close locked and finalized successfully\",\n        dailyCloseRecord\n      });\n    } catch (error) {\n      console.error(\"Error locking daily close:\", error);\n      res.status(500).json({ message: \"Failed to lock daily close\" });\n    }\n  });\n\n  // Staff routes (for expense tracking)\n  app.get(\"/api/staff\", async (req, res) => {\n    try {\n      const staff = await storage.getStaffMembers();\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error fetching staff:\", error);\n      res.status(500).json({ message: \"Failed to fetch staff members\" });\n    }\n  });\n\n  // Expenses routes\n  app.get(\"/api/expenses\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const expenses = await storage.getExpenses(limit);\n      res.json(expenses);\n    } catch (error) {\n      console.error(\"Error fetching expenses:\", error);\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", async (req: any, res) => {\n    try {\n      const expenseData = {\n        ...req.body,\n        enteredBy: \"demo-finance-user\", // For demo purposes\n      };\n      const expense = await storage.createExpense(expenseData);\n      res.status(201).json(expense);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n      res.status(400).json({ message: \"Failed to create expense\" });\n    }\n  });\n\n  // Attendance Management Routes\n  \n  // Get all classes for a specific date (used by front desk attendance management)\n  app.get(\"/api/classes/all\", async (req, res) => {\n    try {\n      const date = req.query.date as string;\n      const dayOfWeek = new Date(date).getDay(); // 0 = Sunday, 1 = Monday, etc.\n      \n      // Get all classes for the specified day\n      const classes = await storage.getClassesForDay(dayOfWeek);\n      res.json(classes);\n    } catch (error) {\n      console.error(\"Error fetching all classes:\", error);\n      res.status(500).json({ message: \"Failed to fetch classes\" });\n    }\n  });\n\n  // Get attendance records for a specific class and date\n  app.get(\"/api/attendance\", async (req, res) => {\n    try {\n      const { classId, date } = req.query;\n      if (!classId || !date) {\n        return res.status(400).json({ message: \"Class ID and date are required\" });\n      }\n      \n      const attendance = await storage.getAttendanceByClassAndDate(classId as string, date as string);\n      res.json(attendance);\n    } catch (error) {\n      console.error(\"Error fetching attendance:\", error);\n      res.status(500).json({ message: \"Failed to fetch attendance\" });\n    }\n  });\n\n  // Create or update attendance record\n  app.post(\"/api/attendance\", async (req: any, res) => {\n    try {\n      const { classId, studentId, attendanceDate, status } = req.body;\n      \n      if (!classId || !studentId || !attendanceDate || !status) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Check if attendance record already exists\n      const existingRecord = await storage.getAttendanceRecord(classId, studentId, attendanceDate);\n      \n      let attendanceRecord;\n      if (existingRecord) {\n        // Update existing record\n        attendanceRecord = await storage.updateAttendance(existingRecord.id, {\n          status,\n          markedBy: 'demo-user' // In real app, this would be req.user.id\n        });\n      } else {\n        // Create new record\n        attendanceRecord = await storage.createAttendance({\n          classId,\n          studentId,\n          date: new Date(attendanceDate),\n          status,\n          markedBy: 'demo-user' // In real app, this would be req.user.id\n        });\n      }\n      \n      res.status(201).json(attendanceRecord);\n    } catch (error) {\n      console.error(\"Error creating/updating attendance:\", error);\n      res.status(400).json({ message: \"Failed to create/update attendance\" });\n    }\n  });\n\n  // Student Portal API Routes - For parent access to view their child's information\n  \n  // Get comprehensive student information for parent portal\n  app.get(\"/api/students/:studentId\", async (req, res) => {\n    try {\n      const { studentId } = req.params;\n      const student = await storage.getStudent(studentId);\n      \n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n      \n      res.json(student);\n    } catch (error) {\n      console.error(\"Error fetching student:\", error);\n      res.status(500).json({ message: \"Failed to fetch student information\" });\n    }\n  });\n\n  // Get student grades and assessments\n  app.get(\"/api/students/:studentId/grades\", async (req, res) => {\n    try {\n      const { studentId } = req.params;\n      \n      // Get grades with assessment and subject information\n      const studentGrades = await db\n        .select({\n          id: grades.id,\n          score: grades.marksObtained,\n          maxScore: assessments.totalMarks,\n          assessmentName: assessments.name,\n          subjectName: subjects.name,\n          gradedAt: grades.enteredAt,\n          feedback: grades.comments\n        })\n        .from(grades)\n        .innerJoin(assessments, eq(grades.assessmentId, assessments.id))\n        .innerJoin(subjects, eq(assessments.subjectId, subjects.id))\n        .where(eq(grades.studentId, studentId))\n        .orderBy(desc(grades.enteredAt))\n        .limit(20);\n      \n      res.json(studentGrades);\n    } catch (error) {\n      console.error(\"Error fetching student grades:\", error);\n      res.status(500).json({ message: \"Failed to fetch student grades\" });\n    }\n  });\n\n  // Get student attendance records\n  app.get(\"/api/students/:studentId/attendance\", async (req, res) => {\n    try {\n      const { studentId } = req.params;\n      \n      // Get attendance with class and subject information\n      const attendanceRecords = await db\n        .select({\n          id: attendance.id,\n          status: attendance.status,\n          attendanceDate: attendance.attendanceDate,\n          notes: attendance.notes,\n          markedAt: attendance.markedAt,\n          subjectName: subjects.name,\n          className: classes.name\n        })\n        .from(attendance)\n        .innerJoin(classes, eq(attendance.classId, classes.id))\n        .innerJoin(subjects, eq(classes.subjectId, subjects.id))\n        .where(eq(attendance.studentId, studentId))\n        .orderBy(desc(attendance.attendanceDate))\n        .limit(50);\n      \n      res.json(attendanceRecords);\n    } catch (error) {\n      console.error(\"Error fetching student attendance:\", error);\n      res.status(500).json({ message: \"Failed to fetch student attendance\" });\n    }\n  });\n\n  // Get all enrolled subjects for a student with teacher info\n  app.get(\"/api/students/:studentId/enrolled-subjects\", async (req, res) => {\n    try {\n      const { studentId } = req.params;\n      \n      const enrolledSubjects = await db\n        .select({\n          subjectId: subjects.id,\n          subjectName: subjects.name,\n          subjectCode: subjects.code,\n          teacherId: enrollments.teacherId,\n          teacherFirstName: users.firstName,\n          teacherLastName: users.lastName,\n          teacherEmail: users.email,\n          baseFee: subjects.baseFee,\n          isActive: enrollments.isActive\n        })\n        .from(enrollments)\n        .innerJoin(subjects, eq(enrollments.subjectId, subjects.id))\n        .leftJoin(users, eq(enrollments.teacherId, users.id))\n        .where(and(\n          eq(enrollments.studentId, studentId),\n          eq(enrollments.isActive, true)\n        ))\n        .orderBy(subjects.name);\n      \n      res.json(enrolledSubjects);\n    } catch (error) {\n      console.error(\"Error fetching enrolled subjects:\", error);\n      res.status(500).json({ message: \"Failed to fetch enrolled subjects\" });\n    }\n  });\n\n  // Get attendance for a specific subject\n  app.get(\"/api/students/:studentId/attendance/:subjectId\", async (req, res) => {\n    try {\n      const { studentId, subjectId } = req.params;\n      \n      const attendanceRecords = await db\n        .select({\n          id: attendance.id,\n          status: attendance.status,\n          attendanceDate: attendance.attendanceDate,\n          notes: attendance.notes,\n          markedAt: attendance.markedAt,\n          subjectName: subjects.name,\n          className: classes.name,\n          classTime: classes.startTime\n        })\n        .from(attendance)\n        .innerJoin(classes, eq(attendance.classId, classes.id))\n        .innerJoin(subjects, eq(classes.subjectId, subjects.id))\n        .where(and(\n          eq(attendance.studentId, studentId),\n          eq(subjects.id, subjectId)\n        ))\n        .orderBy(desc(attendance.attendanceDate))\n        .limit(50);\n      \n      res.json(attendanceRecords);\n    } catch (error) {\n      console.error(\"Error fetching subject attendance:\", error);\n      res.status(500).json({ message: \"Failed to fetch subject attendance\" });\n    }\n  });\n\n  // Get grades for a specific subject\n  app.get(\"/api/students/:studentId/grades/:subjectId\", async (req, res) => {\n    try {\n      const { studentId, subjectId } = req.params;\n      \n      const studentGrades = await db\n        .select({\n          id: grades.id,\n          score: grades.marksObtained,\n          maxScore: assessments.totalMarks,\n          assessmentName: assessments.name,\n          subjectName: subjects.name,\n          gradedAt: grades.enteredAt,\n          feedback: grades.comments\n        })\n        .from(grades)\n        .innerJoin(assessments, eq(grades.assessmentId, assessments.id))\n        .innerJoin(subjects, eq(assessments.subjectId, subjects.id))\n        .where(and(\n          eq(grades.studentId, studentId),\n          eq(subjects.id, subjectId)\n        ))\n        .orderBy(desc(grades.enteredAt))\n        .limit(20);\n      \n      res.json(studentGrades);\n    } catch (error) {\n      console.error(\"Error fetching subject grades:\", error);\n      res.status(500).json({ message: \"Failed to fetch subject grades\" });\n    }\n  });\n\n  // Get student invoices and payment information\n  app.get(\"/api/students/:studentId/invoices\", async (req, res) => {\n    try {\n      const { studentId } = req.params;\n      \n      // For now, return empty array since we don't have invoice data yet\n      // This can be implemented when billing system is fully integrated\n      res.json([]);\n    } catch (error) {\n      console.error(\"Error fetching student invoices:\", error);\n      res.status(500).json({ message: \"Failed to fetch student invoices\" });\n    }\n  });\n\n  // Enhanced Billing System Routes\n  \n  // Generate monthly invoices\n  app.post(\"/api/billing/generate-monthly\", async (req: any, res) => {\n    try {\n      const { targetDate } = req.body;\n      const invoices = await billingService.generateMonthlyInvoices(targetDate);\n      res.json({ success: true, invoicesGenerated: invoices.length, invoices });\n    } catch (error) {\n      console.error(\"Error generating monthly invoices:\", error);\n      res.status(500).json({ message: \"Failed to generate monthly invoices\" });\n    }\n  });\n\n  // Process advance payment\n  app.post(\"/api/billing/advance-payment\", async (req: any, res) => {\n    try {\n      const { studentId, amount, paymentMethod, notes, transactionNumber } = req.body;\n      \n      const paymentData = {\n        paymentMethod,\n        receivedBy: req.user?.claims?.sub || req.user?.id || 'demo-management-001',\n        notes,\n        transactionNumber: paymentMethod === 'bank_transfer' ? transactionNumber : null\n      };\n      \n      const result = await billingService.processAdvancePayment(studentId, amount, paymentData);\n      res.json({ success: true, ...result });\n    } catch (error) {\n      console.error(\"Error processing advance payment:\", error);\n      res.status(500).json({ message: \"Failed to process advance payment\" });\n    }\n  });\n\n  // Process partial payment\n  app.post(\"/api/billing/partial-payment\", async (req: any, res) => {\n    try {\n      const { invoiceId, amount, paymentMethod, notes, transactionNumber } = req.body;\n      \n      const paymentData = {\n        paymentMethod,\n        receivedBy: req.user?.claims?.sub || req.user?.id || 'demo-management-001',\n        notes,\n        transactionNumber: paymentMethod === 'bank_transfer' ? transactionNumber : null\n      };\n      \n      const result = await billingService.processPartialPayment(invoiceId, amount, paymentData);\n      res.json({ success: true, ...result });\n    } catch (error) {\n      console.error(\"Error processing partial payment:\", error);\n      res.status(500).json({ message: \"Failed to process partial payment\" });\n    }\n  });\n\n  // Generate pro-rated invoice for mid-month enrollment\n  app.post(\"/api/billing/prorated-invoice\", async (req: any, res) => {\n    try {\n      const { studentId, enrollmentDate, isFullMonth } = req.body;\n      const invoice = await billingService.generateProRatedInvoice(\n        studentId, \n        new Date(enrollmentDate), \n        isFullMonth\n      );\n      res.json({ success: true, invoice });\n    } catch (error) {\n      console.error(\"Error generating pro-rated invoice:\", error);\n      res.status(500).json({ message: \"Failed to generate pro-rated invoice\" });\n    }\n  });\n\n  // Apply invoice adjustment\n  app.post(\"/api/billing/adjustment\", async (req: any, res) => {\n    try {\n      const { invoiceId, type, amount, reason, notes } = req.body;\n      \n      const adjustment = {\n        type,\n        amount: parseFloat(amount),\n        reason,\n        appliedBy: 'demo-user', // req.user.claims.sub,\n        notes\n      };\n      \n      const result = await billingService.applyInvoiceAdjustment(invoiceId, adjustment);\n      res.json({ success: true, ...result });\n    } catch (error) {\n      console.error(\"Error applying invoice adjustment:\", error);\n      res.status(500).json({ message: \"Failed to apply invoice adjustment\" });\n    }\n  });\n\n  // Get student credit balance\n  app.get(\"/api/billing/student-credit/:studentId\", async (req, res) => {\n    try {\n      const credit = await billingService.getStudentCredit(req.params.studentId);\n      res.json({ creditBalance: credit });\n    } catch (error) {\n      console.error(\"Error fetching student credit:\", error);\n      res.status(500).json({ message: \"Failed to fetch student credit\" });\n    }\n  });\n\n  // Get student ledger\n  app.get(\"/api/billing/student-ledger/:studentId\", async (req, res) => {\n    try {\n      const ledger = await billingService.getStudentLedger(req.params.studentId);\n      res.json(ledger);\n    } catch (error) {\n      console.error(\"Error fetching student ledger:\", error);\n      res.status(500).json({ message: \"Failed to fetch student ledger\" });\n    }\n  });\n\n  // Update invoice status\n  app.patch(\"/api/billing/invoice-status/:invoiceId\", async (req, res) => {\n    try {\n      const result = await billingService.updateInvoiceStatus(req.params.invoiceId);\n      res.json({ success: true, ...result });\n    } catch (error) {\n      console.error(\"Error updating invoice status:\", error);\n      res.status(500).json({ message: \"Failed to update invoice status\" });\n    }\n  });\n\n  // Demo endpoint to test the billing system\n  app.post(\"/api/billing/run-demo\", async (req, res) => {\n    try {\n      const { runBillingDemo } = await import(\"./billing-demo\");\n      await runBillingDemo();\n      res.json({ \n        success: true, \n        message: \"Billing system demo completed successfully. Check console for detailed results.\" \n      });\n    } catch (error) {\n      console.error(\"Error running billing demo:\", error);\n      res.status(500).json({ message: \"Failed to run billing demo\" });\n    }\n  });\n\n  // Digital Diary - Announcement Routes\n  \n  // Get all announcements (with optional teacher filter)\n  app.get(\"/api/announcements\", async (req: any, res) => {\n    try {\n      // For teachers, only show their own announcements\n      let teacherId = req.query.teacherId as string;\n      if (req.user?.role === 'teacher') {\n        teacherId = req.user.id; // Override to ensure data isolation\n      }\n      const announcements = await storage.getAnnouncements(teacherId);\n      res.json(announcements);\n    } catch (error) {\n      console.error(\"Error fetching announcements:\", error);\n      res.status(500).json({ message: \"Failed to fetch announcements\" });\n    }\n  });\n\n  // Create new announcement\n  app.post(\"/api/announcements\", async (req: any, res) => {\n    try {\n      console.log(\"Creating announcement with data:\", req.body);\n      \n      const announcementData = {\n        id: crypto.randomUUID(),\n        title: req.body.title,\n        content: req.body.content,\n        type: req.body.type,\n        priority: req.body.priority,\n        subjectId: req.body.subjectId || null,\n        classId: req.body.classId || null,\n        dueDate: req.body.dueDate || null,\n        createdBy: req.user?.id || 'demo-user',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      \n      const announcement = await storage.createAnnouncement(announcementData);\n      \n      // If recipients are provided, add them\n      if (req.body.recipients && req.body.recipients.length > 0) {\n        await storage.addAnnouncementRecipients(announcement.id, req.body.recipients);\n      }\n      \n      res.status(201).json(announcement);\n    } catch (error) {\n      console.error(\"Error creating announcement:\", error);\n      res.status(400).json({ \n        message: \"Failed to create announcement\", \n        error: error instanceof Error ? error.message : 'Unknown error',\n        details: error \n      });\n    }\n  });\n\n  // Update announcement\n  app.put(\"/api/announcements/:id\", async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const updatedAnnouncement = await storage.updateAnnouncement(id, updates);\n      res.json(updatedAnnouncement);\n    } catch (error) {\n      console.error(\"Error updating announcement:\", error);\n      res.status(500).json({ message: \"Failed to update announcement\" });\n    }\n  });\n\n  // Delete announcement (soft delete)\n  app.delete(\"/api/announcements/:id\", async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteAnnouncement(id);\n      res.json({ success: true, message: \"Announcement deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting announcement:\", error);\n      res.status(500).json({ message: \"Failed to delete announcement\" });\n    }\n  });\n\n  // Add recipients to announcement\n  app.post(\"/api/announcements/:id/recipients\", async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { studentIds } = req.body;\n      \n      if (!studentIds || !Array.isArray(studentIds)) {\n        return res.status(400).json({ message: \"Student IDs array is required\" });\n      }\n      \n      await storage.addAnnouncementRecipients(id, studentIds);\n      res.json({ success: true, message: \"Recipients added successfully\" });\n    } catch (error) {\n      console.error(\"Error adding announcement recipients:\", error);\n      res.status(500).json({ message: \"Failed to add recipients\" });\n    }\n  });\n\n  // Get announcements for a specific student\n  app.get(\"/api/students/:studentId/announcements\", async (req, res) => {\n    try {\n      const { studentId } = req.params;\n      const announcements = await storage.getStudentAnnouncements(studentId);\n      res.json(announcements);\n    } catch (error) {\n      console.error(\"Error fetching student announcements:\", error);\n      res.status(500).json({ message: \"Failed to fetch student announcements\" });\n    }\n  });\n\n  // Mark announcement as read\n  app.post(\"/api/announcements/:announcementId/read\", async (req: any, res) => {\n    try {\n      const { announcementId } = req.params;\n      const { studentId } = req.body;\n      \n      if (!studentId) {\n        return res.status(400).json({ message: \"Student ID is required\" });\n      }\n      \n      await storage.markAnnouncementAsRead(announcementId, studentId);\n      res.json({ success: true, message: \"Announcement marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking announcement as read:\", error);\n      res.status(500).json({ message: \"Failed to mark announcement as read\" });\n    }\n  });\n\n  // Get announcements for a specific class\n  app.get(\"/api/classes/:classId/announcements\", async (req, res) => {\n    try {\n      const { classId } = req.params;\n      const announcements = await storage.getAnnouncementsByClass(classId);\n      res.json(announcements);\n    } catch (error) {\n      console.error(\"Error fetching class announcements:\", error);\n      res.status(500).json({ message: \"Failed to fetch class announcements\" });\n    }\n  });\n\n  // Get announcements for a specific subject\n  app.get(\"/api/subjects/:subjectId/announcements\", async (req, res) => {\n    try {\n      const { subjectId } = req.params;\n      const announcements = await storage.getAnnouncementsBySubject(subjectId);\n      res.json(announcements);\n    } catch (error) {\n      console.error(\"Error fetching subject announcements:\", error);\n      res.status(500).json({ message: \"Failed to fetch subject announcements\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":69711},"server/storage.ts":{"content":"import {\n  users,\n  students,\n  subjects,\n  classes,\n  enrollments,\n  invoices,\n  payments,\n  paymentAllocations,\n  invoiceAdjustments,\n  billingSchedules,\n  attendance,\n  assessments,\n  grades,\n  payoutRules,\n  cashDrawRequests,\n  dailyClose,\n  expenses,\n  announcements,\n  announcementRecipients,\n  addOns,\n  invoiceItems,\n  classSchedules,\n  scheduleChanges,\n  studentNotifications,\n  type User,\n  type UpsertUser,\n  type Student,\n  type InsertStudent,\n  type Subject,\n  type Class,\n  type Invoice,\n  type Payment,\n  type Attendance,\n  type Assessment,\n  type Grade,\n  type CashDrawRequest,\n  type DailyClose,\n  type Expense,\n  type Announcement,\n  type InsertAnnouncement,\n  type AnnouncementRecipient,\n  type InsertAnnouncementRecipient,\n  type ClassSchedule,\n  type InsertClassSchedule,\n  type ScheduleChange,\n  type InsertScheduleChange,\n  type StudentNotification,\n  type InsertStudentNotification,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql, gte, lte, count, sum, avg } from \"drizzle-orm\";\nimport { PrimaxBillingService } from \"./billing\";\nimport { generateUserCredentials } from \"./passwordUtils\";\n\nconst billingService = new PrimaxBillingService();\n\nexport interface IStorage {\n  // User operations - mandatory for Replit Auth\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Students\n  getStudents(): Promise<Student[]>;\n  getStudent(id: string): Promise<Student | undefined>;\n  createStudent(student: InsertStudent): Promise<Student>;\n  updateStudent(id: string, student: Partial<InsertStudent>): Promise<Student>;\n  toggleStudentActiveStatus(id: string, isActive: boolean): Promise<Student>;\n  deleteStudent(id: string): Promise<void>;\n  \n  // Roll Number Management\n  generateRollNumber(): Promise<string>;\n  rollNumberExists(rollNumber: string): Promise<boolean>;\n  getNextRollNumber(): Promise<string>;\n  reserveRollNumber(): Promise<{ rollNumber: string; expiresAt: Date }>;\n  assignRollNumbersToExistingStudents(): Promise<{ updated: number; errors: string[] }>;\n\n  // Teacher and Staff Management\n  createTeacher(teacherData: any): Promise<any>;\n  getTeachers(): Promise<any[]>;\n  updateTeacher(id: string, teacherData: any): Promise<any>;\n  deleteTeacher(id: string): Promise<void>;\n  createStaff(staffData: any): Promise<any>;\n  getStaff(): Promise<any[]>;\n  updateStaff(id: string, staffData: any): Promise<any>;\n  deleteStaff(id: string): Promise<void>;\n  createManagement(managementData: any): Promise<any>;\n  updateManagement(id: string, managementData: any): Promise<any>;\n  deleteManagement(id: string): Promise<void>;\n  createPayoutRule(payoutData: any): Promise<any>;\n  \n  // Subjects\n  getSubjects(): Promise<Subject[]>;\n  getSubjectsByClassLevel(classLevel: string): Promise<Subject[]>;\n  \n  // Classes\n  getClassesByTeacher(teacherId: string): Promise<Class[]>;\n  getTodayClasses(teacherId: string): Promise<any[]>;\n  getClassesForDay(dayOfWeek: number): Promise<any[]>;\n  \n  // Enrollments\n  getStudentsByClass(classId: string): Promise<any[]>;\n  createEnrollment(enrollment: any): Promise<any>;\n  \n  // Invoices\n  getInvoices(limit?: number): Promise<Invoice[]>;\n  getStudentInvoices(studentId: string): Promise<Invoice[]>;\n  getInvoiceById(invoiceId: string): Promise<Invoice | null>;\n  createInvoice(invoice: any): Promise<Invoice>;\n  updateInvoice(id: string, updates: Partial<Invoice>): Promise<Invoice>;\n  getInvoicesByStudent(studentId: string): Promise<Invoice[]>;\n  getEnrollmentsByStudent(studentId: string): Promise<any[]>;\n  getSubjectById(subjectId: string): Promise<Subject | null>;\n  createPaymentAllocation(allocationData: { paymentId: string; invoiceId: string; amount: string; }): Promise<any>;\n  \n  // Payments\n  getPayments(limit?: number): Promise<Payment[]>;\n  createPayment(payment: any): Promise<Payment>;\n  \n  // Attendance\n  createAttendance(attendanceData: any): Promise<Attendance>;\n  getAttendanceByClassAndDate(classId: string, date: string): Promise<Attendance[]>;\n  getAttendanceRecord(classId: string, studentId: string, date: string): Promise<Attendance | undefined>;\n  updateAttendance(attendanceId: string, updates: Partial<Attendance>): Promise<Attendance>;\n  getAttendanceByClass(classId: string, date: string): Promise<Attendance[]>;\n  getStudentAttendance(studentId: string, startDate?: string, endDate?: string): Promise<Attendance[]>;\n  \n  // Assessments\n  getAssessments(): Promise<Assessment[]>;\n  getTeacherAssessments(teacherId: string): Promise<Assessment[]>;\n  createAssessment(assessment: any): Promise<Assessment>;\n  \n  // Grades\n  createGrade(grade: any): Promise<Grade>;\n  getStudentGrades(studentId: string): Promise<Grade[]>;\n  \n  // Cash Draw Requests\n  getCashDrawRequests(): Promise<CashDrawRequest[]>;\n  \n  // Enhanced Billing System\n  getStudentFinancialSummary(studentId: string): Promise<{\n    totalOwed: number;\n    totalPaid: number;\n    outstandingBalance: number;\n    feeStatus: 'paid' | 'pending' | 'overdue' | 'partial';\n    lastPaymentDate?: Date;\n  }>;\n  \n  getStudentAttendancePercentage(studentId: string): Promise<number>;\n  getStudentAverageGrade(studentId: string): Promise<string>;\n  \n  // Advanced Billing Operations\n  createPaymentWithAllocations(paymentData: any, allocations: any[]): Promise<Payment>;\n  addInvoiceAdjustment(invoiceId: string, adjustment: any): Promise<any>;\n  getStudentLedger(studentId: string): Promise<any[]>;\n  createBillingSchedule(scheduleData: any): Promise<any>;\n  generateRecurringInvoices(date?: string): Promise<Invoice[]>;\n  createCashDrawRequest(request: any): Promise<CashDrawRequest>;\n  updateCashDrawRequest(id: string, updates: any): Promise<CashDrawRequest>;\n  \n  // Daily Close\n  getDailyClose(date: string): Promise<DailyClose | undefined>;\n  createDailyClose(dailyCloseData: any): Promise<DailyClose>;\n  \n  // Expenses\n  getExpenses(limit?: number): Promise<Expense[]>;\n  createExpense(expense: any): Promise<Expense>;\n  \n  // Staff Members (for expense tracking)\n  getStaffMembers(): Promise<any[]>;\n  \n  // Dashboard stats\n  getDashboardStats(): Promise<any>;\n  getTeacherEarnings(teacherId: string): Promise<any>;\n\n  // Teacher Data Isolation\n  getTeacherSubjects(teacherId: string): Promise<Subject[]>;\n  getTeacherStudents(teacherId: string): Promise<Student[]>;\n  getTeacherEarningsRestricted(teacherId: string): Promise<any>;\n  getTeacherAnnouncements(teacherId: string): Promise<Announcement[]>;\n\n  // Digital Diary - Announcements\n  getAnnouncements(teacherId?: string): Promise<Announcement[]>;\n  createAnnouncement(announcement: InsertAnnouncement): Promise<Announcement>;\n  updateAnnouncement(id: string, updates: Partial<InsertAnnouncement>): Promise<Announcement>;\n  deleteAnnouncement(id: string): Promise<void>;\n  \n  // Announcement Recipients\n  addAnnouncementRecipients(announcementId: string, studentIds: string[]): Promise<void>;\n  getStudentAnnouncements(studentId: string): Promise<any[]>;\n  markAnnouncementAsRead(announcementId: string, studentId: string): Promise<void>;\n  getAnnouncementsByClass(classId: string): Promise<Announcement[]>;\n  getAnnouncementsBySubject(subjectId: string): Promise<Announcement[]>;\n\n  // Add-ons\n  getAddOns(): Promise<any[]>;\n  createAddOn(addOn: any): Promise<any>;\n\n  // Schedule Management\n  getTeacherSchedules(teacherId: string): Promise<ClassSchedule[]>;\n  createSchedule(schedule: InsertClassSchedule): Promise<ClassSchedule>;\n  updateSchedule(id: string, updates: Partial<InsertClassSchedule>): Promise<ClassSchedule>;\n  deleteSchedule(id: string): Promise<void>;\n  \n  // Schedule Changes\n  getScheduleChanges(teacherId: string, startDate?: Date, endDate?: Date): Promise<ScheduleChange[]>;\n  createScheduleChange(change: InsertScheduleChange): Promise<ScheduleChange>;\n  updateScheduleChange(id: string, updates: Partial<InsertScheduleChange>): Promise<ScheduleChange>;\n  deleteScheduleChange(id: string): Promise<void>;\n  \n  // Student Schedule & Notifications\n  getStudentSchedule(studentId: string, startDate?: Date, endDate?: Date): Promise<any[]>;\n  getStudentNotifications(studentId: string): Promise<StudentNotification[]>;\n  createStudentNotification(notification: InsertStudentNotification): Promise<StudentNotification>;\n  markNotificationRead(notificationId: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations - mandatory for Replit Auth\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Students\n  async getStudents(): Promise<Student[]> {\n    return await db.select().from(students).orderBy(students.firstName);\n  }\n\n  async getStudent(id: string): Promise<Student | undefined> {\n    const [student] = await db.select().from(students).where(eq(students.id, id));\n    return student;\n  }\n\n  async createStudent(student: InsertStudent): Promise<Student> {\n    // Generate roll number if not provided\n    if (!student.rollNumber) {\n      student.rollNumber = await this.generateRollNumber();\n    }\n    \n    const [newStudent] = await db.insert(students).values(student).returning();\n    return newStudent;\n  }\n\n  // Roll number generation system\n  async generateRollNumber(): Promise<string> {\n    const currentYear = new Date().getFullYear();\n    const yearSuffix = currentYear.toString().slice(-2); // Last 2 digits (e.g., \"25\" for 2025)\n    \n    let rollNumber: string;\n    let attempts = 0;\n    const maxAttempts = 100;\n    \n    do {\n      // Generate random 4-digit number\n      const randomNum = Math.floor(Math.random() * 9000) + 1000; // 1000-9999\n      rollNumber = `PMX${yearSuffix}-${randomNum}`;\n      attempts++;\n      \n      // Check if this roll number already exists\n      const exists = await this.rollNumberExists(rollNumber);\n      if (!exists) {\n        break;\n      }\n    } while (attempts < maxAttempts);\n    \n    if (attempts >= maxAttempts) {\n      throw new Error('Unable to generate unique roll number after maximum attempts');\n    }\n    \n    // Format: PMXyy-#### (e.g., PMX25-4782, PMX25-8391)\n    return rollNumber;\n  }\n\n\n\n  // Get next available roll number for preview\n  async getNextRollNumber(): Promise<string> {\n    return await this.generateRollNumber();\n  }\n\n  // Reserve a roll number for temporary use (30 minutes)\n  async reserveRollNumber(): Promise<{ rollNumber: string; expiresAt: Date }> {\n    const rollNumber = await this.generateRollNumber();\n    const expiresAt = new Date(Date.now() + 30 * 60 * 1000); // 30 minutes from now\n    \n    // For now, we'll store reservations in memory (in production, use Redis or database)\n    if (!global.rollNumberReservations) {\n      global.rollNumberReservations = new Map();\n    }\n    \n    global.rollNumberReservations.set(rollNumber, expiresAt);\n    \n    // Clean up expired reservations\n    this.cleanupExpiredReservations();\n    \n    return { rollNumber, expiresAt };\n  }\n\n  // Clean up expired roll number reservations\n  private cleanupExpiredReservations() {\n    if (!global.rollNumberReservations) return;\n    \n    const now = new Date();\n    for (const [rollNumber, expiresAt] of global.rollNumberReservations.entries()) {\n      if (expiresAt < now) {\n        global.rollNumberReservations.delete(rollNumber);\n      }\n    }\n  }\n\n  // Check if roll number exists (including reservations)\n  async rollNumberExists(rollNumber: string): Promise<boolean> {\n    // Check database\n    const [existing] = await db\n      .select({ id: students.id })\n      .from(students)\n      .where(eq(students.rollNumber, rollNumber))\n      .limit(1);\n    \n    if (existing) return true;\n    \n    // Check reservations\n    if (global.rollNumberReservations?.has(rollNumber)) {\n      const expiresAt = global.rollNumberReservations.get(rollNumber);\n      if (expiresAt && expiresAt > new Date()) {\n        return true; // Still reserved\n      } else {\n        global.rollNumberReservations.delete(rollNumber); // Expired, clean up\n      }\n    }\n    \n    return false;\n  }\n\n  // Bulk assign roll numbers to existing students without them\n  async assignRollNumbersToExistingStudents(): Promise<{ updated: number; errors: string[] }> {\n    const studentsWithoutRollNumbers = await db\n      .select()\n      .from(students)\n      .where(sql`${students.rollNumber} IS NULL OR ${students.rollNumber} = '' OR ${students.rollNumber} ~ '^[0-9]+$'`);\n    \n    let updated = 0;\n    const errors: string[] = [];\n    \n    for (const student of studentsWithoutRollNumbers) {\n      try {\n        const newRollNumber = await this.generateRollNumber();\n        await db\n          .update(students)\n          .set({ \n            rollNumber: newRollNumber, \n            updatedAt: new Date() \n          })\n          .where(eq(students.id, student.id));\n        updated++;\n      } catch (error) {\n        errors.push(`Failed to update student ${student.firstName} ${student.lastName}: ${error}`);\n      }\n    }\n    \n    return { updated, errors };\n  }\n\n  async updateStudent(id: string, student: Partial<InsertStudent>): Promise<Student> {\n    const [updatedStudent] = await db\n      .update(students)\n      .set({ ...student, updatedAt: new Date() })\n      .where(eq(students.id, id))\n      .returning();\n    return updatedStudent;\n  }\n\n  async toggleStudentActiveStatus(id: string, isActive: boolean): Promise<Student> {\n    const [updatedStudent] = await db\n      .update(students)\n      .set({ isActive, updatedAt: new Date() })\n      .where(eq(students.id, id))\n      .returning();\n    return updatedStudent;\n  }\n\n  async deleteStudent(id: string): Promise<void> {\n    // Delete in order to respect foreign key constraints\n    // First delete related records, then the student\n    \n    // Get all payments for this student to delete their allocations\n    const studentPayments = await db.select({ id: payments.id }).from(payments).where(eq(payments.studentId, id));\n    const paymentIds = studentPayments.map(p => p.id);\n    \n    // Delete payment allocations for this student's payments\n    if (paymentIds.length > 0) {\n      for (const paymentId of paymentIds) {\n        await db.delete(paymentAllocations).where(eq(paymentAllocations.paymentId, paymentId));\n      }\n    }\n    \n    // Delete grades (which link assessments to students)\n    await db.delete(grades).where(eq(grades.studentId, id));\n    \n    // Delete attendance records\n    await db.delete(attendance).where(eq(attendance.studentId, id));\n    \n    // Delete enrollments\n    await db.delete(enrollments).where(eq(enrollments.studentId, id));\n    \n    // Delete billing schedules\n    await db.delete(billingSchedules).where(eq(billingSchedules.studentId, id));\n    \n    // Delete invoice adjustments for this student's invoices\n    const studentInvoices = await db.select({ id: invoices.id }).from(invoices).where(eq(invoices.studentId, id));\n    const invoiceIds = studentInvoices.map(i => i.id);\n    \n    if (invoiceIds.length > 0) {\n      for (const invoiceId of invoiceIds) {\n        await db.delete(invoiceAdjustments).where(eq(invoiceAdjustments.invoiceId, invoiceId));\n        await db.delete(invoiceItems).where(eq(invoiceItems.invoiceId, invoiceId));\n      }\n    }\n    \n    // Delete invoices\n    await db.delete(invoices).where(eq(invoices.studentId, id));\n    \n    // Delete payments\n    await db.delete(payments).where(eq(payments.studentId, id));\n    \n    // Delete announcement recipients\n    await db.delete(announcementRecipients).where(eq(announcementRecipients.studentId, id));\n    \n    // Delete student notifications\n    await db.delete(studentNotifications).where(eq(studentNotifications.studentId, id));\n    \n    // Finally, delete the student\n    await db.delete(students).where(eq(students.id, id));\n  }\n\n  // Subjects\n  async getSubjects(): Promise<Subject[]> {\n    return await db.select().from(subjects).where(eq(subjects.isActive, true));\n  }\n\n  async getSubjectsByClassLevel(classLevel: string): Promise<Subject[]> {\n    return await db\n      .select()\n      .from(subjects)\n      .where(and(sql`${classLevel} = ANY(${subjects.classLevels})`, eq(subjects.isActive, true)));\n  }\n\n  // Classes\n  async getClassesByTeacher(teacherId: string): Promise<Class[]> {\n    return await db\n      .select()\n      .from(classes)\n      .where(and(eq(classes.teacherId, teacherId), eq(classes.isActive, true)));\n  }\n\n  async getTodayClasses(teacherId: string): Promise<any[]> {\n    const today = new Date();\n    const dayOfWeek = today.getDay();\n    \n    // Convert JavaScript Date.getDay() (0-6, 0=Sunday) to dayOfWeekEnum strings\n    const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n    const todayString = dayNames[dayOfWeek];\n    \n    return await db\n      .select({\n        id: classSchedules.id,\n        subject: subjects.name,\n        startTime: classSchedules.startTime,\n        endTime: classSchedules.endTime,\n        location: classSchedules.location,\n      })\n      .from(classSchedules)\n      .innerJoin(subjects, eq(classSchedules.subjectId, subjects.id))\n      .where(\n        and(\n          eq(classSchedules.teacherId, teacherId),\n          eq(classSchedules.dayOfWeek, todayString as any),\n          eq(classSchedules.isActive, true)\n        )\n      )\n      .orderBy(classSchedules.startTime);\n  }\n\n  async getClassesForDay(dayOfWeek: number): Promise<any[]> {\n    return await db\n      .select({\n        id: classes.id,\n        name: classes.name,\n        startTime: classes.startTime,\n        endTime: classes.endTime,\n        subject: subjects.name,\n        teacherName: sql<string>`COALESCE(${users.firstName} || ' ' || ${users.lastName}, 'Demo Teacher')`,\n        teacherId: classes.teacherId,\n      })\n      .from(classes)\n      .innerJoin(subjects, eq(classes.subjectId, subjects.id))\n      .leftJoin(users, eq(classes.teacherId, users.id))\n      .where(\n        and(\n          eq(classes.dayOfWeek, dayOfWeek),\n          eq(classes.isActive, true)\n        )\n      )\n      .orderBy(classes.startTime);\n  }\n\n  // Enrollments\n  async getStudentsByClass(classId: string): Promise<any[]> {\n    return await db\n      .select({\n        id: students.id,\n        firstName: students.firstName,\n        lastName: students.lastName,\n        rollNumber: students.rollNumber,\n        profileImageUrl: students.profileImageUrl,\n      })\n      .from(enrollments)\n      .innerJoin(students, eq(enrollments.studentId, students.id))\n      .innerJoin(classes, eq(classes.subjectId, enrollments.subjectId))\n      .where(and(eq(classes.id, classId), eq(enrollments.isActive, true)));\n  }\n\n  // Invoices\n  async getInvoices(limit = 50): Promise<any[]> {\n    return await db\n      .select({\n        ...invoices,\n        studentRollNumber: students.rollNumber,\n        studentFirstName: students.firstName,\n        studentLastName: students.lastName\n      })\n      .from(invoices)\n      .leftJoin(students, eq(invoices.studentId, students.id))\n      .orderBy(desc(invoices.createdAt))\n      .limit(limit);\n  }\n\n  async getInvoiceById(invoiceId: string): Promise<Invoice | null> {\n    const result = await db\n      .select()\n      .from(invoices)\n      .where(eq(invoices.id, invoiceId));\n    \n    return result.length > 0 ? result[0] : null;\n  }\n\n  async getStudentInvoices(studentId: string): Promise<Invoice[]> {\n    return await db\n      .select()\n      .from(invoices)\n      .where(eq(invoices.studentId, studentId))\n      .orderBy(desc(invoices.createdAt));\n  }\n\n  async createInvoice(invoiceData: any): Promise<Invoice> {\n    const [invoice] = await db.insert(invoices).values(invoiceData).returning();\n    return invoice;\n  }\n\n  async updateInvoice(id: string, updates: Partial<Invoice>): Promise<Invoice> {\n    const [updated] = await db\n      .update(invoices)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(invoices.id, id))\n      .returning();\n    \n    if (!updated) {\n      throw new Error('Invoice not found');\n    }\n    \n    return updated;\n  }\n\n  async getInvoicesByStudent(studentId: string): Promise<Invoice[]> {\n    return await db\n      .select()\n      .from(invoices)\n      .where(eq(invoices.studentId, studentId))\n      .orderBy(desc(invoices.createdAt));\n  }\n\n  async createEnrollment(enrollmentData: any): Promise<any> {\n    const [enrollment] = await db.insert(enrollments).values(enrollmentData).returning();\n    return enrollment;\n  }\n\n  async getEnrollmentsByStudent(studentId: string): Promise<any[]> {\n    return await db\n      .select({\n        id: enrollments.id,\n        studentId: enrollments.studentId,\n        subjectId: enrollments.subjectId,\n        subjectName: subjects.name,\n        tuitionFee: subjects.baseFee,\n        enrollmentDate: enrollments.enrolledAt,\n        isActive: enrollments.isActive,\n      })\n      .from(enrollments)\n      .innerJoin(subjects, eq(enrollments.subjectId, subjects.id))\n      .where(and(eq(enrollments.studentId, studentId), eq(enrollments.isActive, true)));\n  }\n\n  async getSubjectById(subjectId: string): Promise<Subject | null> {\n    const result = await db\n      .select()\n      .from(subjects)\n      .where(eq(subjects.id, subjectId));\n    \n    return result.length > 0 ? result[0] : null;\n  }\n\n  async createPaymentAllocation(allocationData: {\n    paymentId: string;\n    invoiceId: string;\n    amount: string;\n  }): Promise<any> {\n    const [allocation] = await db.insert(paymentAllocations).values(allocationData).returning();\n    return allocation;\n  }\n\n  // Payments\n  async getPayments(limit = 50): Promise<any[]> {\n    return await db\n      .select({\n        ...payments,\n        studentRollNumber: students.rollNumber,\n        studentFirstName: students.firstName,\n        studentLastName: students.lastName\n      })\n      .from(payments)\n      .leftJoin(students, eq(payments.studentId, students.id))\n      .orderBy(desc(payments.createdAt))\n      .limit(limit);\n  }\n\n  async createPayment(paymentData: any): Promise<Payment> {\n    // Ensure receiptNumber is provided or generate clean one\n    let receiptNumber = paymentData.receiptNumber;\n    if (!receiptNumber) {\n      receiptNumber = await billingService.generateReceiptNumber();\n    }\n    const paymentDataWithReceipt = {\n      ...paymentData,\n      receiptNumber\n    };\n    const [payment] = await db.insert(payments).values(paymentDataWithReceipt).returning();\n    return payment;\n  }\n\n  async processPartialPayment(paymentData: {\n    paymentAmount: number;\n    studentId: string;\n    paymentMethod: string;\n    paymentDate: string | Date;\n    receivedBy: string;\n    notes: string;\n    transactionNumber?: string | null;\n    invoiceId: string;\n  }): Promise<any> {\n    // Get the invoice to validate and update\n    const invoice = await this.getInvoiceById(paymentData.invoiceId);\n    if (!invoice) {\n      throw new Error('Invoice not found');\n    }\n\n    const currentBalance = parseFloat(invoice.balanceDue);\n    if (paymentData.paymentAmount > currentBalance) {\n      throw new Error(`Payment amount Rs. ${paymentData.paymentAmount.toLocaleString()} exceeds invoice balance Rs. ${currentBalance.toLocaleString()}`);\n    }\n    \n    if (currentBalance <= 0) {\n      throw new Error('Invoice is already fully paid and cannot accept additional payments');\n    }\n\n    // Create payment record with clean receipt number based on invoice\n    const cleanReceiptNumber = await billingService.generateReceiptNumber(invoice.invoiceNumber);\n    const [payment] = await db.insert(payments).values({\n      receiptNumber: cleanReceiptNumber,\n      studentId: paymentData.studentId,\n      amount: paymentData.paymentAmount.toFixed(2),\n      paymentMethod: paymentData.paymentMethod as \"cash\" | \"bank_transfer\" | \"card\" | \"cheque\",\n      paymentDate: typeof paymentData.paymentDate === 'string' ? new Date(paymentData.paymentDate) : paymentData.paymentDate,\n      receivedBy: paymentData.receivedBy,\n      notes: paymentData.notes,\n      transactionNumber: paymentData.transactionNumber,\n      status: 'completed'\n    }).returning();\n\n    // Create payment allocation\n    await db.insert(paymentAllocations).values({\n      paymentId: payment.id,\n      invoiceId: paymentData.invoiceId,\n      amount: paymentData.paymentAmount.toFixed(2)\n    });\n\n    // Update invoice balances\n    const newAmountPaid = parseFloat(invoice.amountPaid || '0') + paymentData.paymentAmount;\n    const newBalanceDue = parseFloat(invoice.total) - newAmountPaid;\n    const newStatus = newBalanceDue <= 0 ? 'paid' : 'sent';\n\n    await db.update(invoices)\n      .set({\n        amountPaid: newAmountPaid.toFixed(2),\n        balanceDue: newBalanceDue.toFixed(2),\n        status: newStatus,\n        updatedAt: new Date()\n      })\n      .where(eq(invoices.id, paymentData.invoiceId));\n\n    return {\n      payment,\n      invoice: {\n        ...invoice,\n        amountPaid: newAmountPaid.toFixed(2),\n        balanceDue: newBalanceDue.toFixed(2),\n        status: newStatus\n      }\n    };\n  }\n\n  // Attendance\n  async createAttendance(attendanceData: any): Promise<Attendance> {\n    const [attendanceRecord] = await db.insert(attendance).values(attendanceData).returning();\n    return attendanceRecord;\n  }\n\n  async getAttendanceByClass(classId: string, date: string): Promise<Attendance[]> {\n    return await db\n      .select()\n      .from(attendance)\n      .where(and(eq(attendance.classId, classId), eq(attendance.attendanceDate, date)));\n  }\n\n  async getStudentAttendance(studentId: string, startDate?: string, endDate?: string): Promise<Attendance[]> {\n    let conditions = [eq(attendance.studentId, studentId)];\n    \n    if (startDate) {\n      conditions.push(gte(attendance.attendanceDate, startDate));\n    }\n    if (endDate) {\n      conditions.push(lte(attendance.attendanceDate, endDate));\n    }\n    \n    return await db\n      .select()\n      .from(attendance)\n      .where(and(...conditions))\n      .orderBy(desc(attendance.attendanceDate));\n  }\n\n  async getAttendanceByClassAndDate(classId: string, date: string): Promise<any[]> {\n    return await db\n      .select({\n        id: attendance.id,\n        studentId: attendance.studentId,\n        status: attendance.status,\n        markedBy: attendance.markedBy,\n        markedAt: attendance.markedAt,\n        notes: attendance.notes,\n        student: {\n          firstName: students.firstName,\n          lastName: students.lastName,\n          rollNumber: students.rollNumber,\n        }\n      })\n      .from(attendance)\n      .innerJoin(students, eq(attendance.studentId, students.id))\n      .where(\n        and(\n          eq(attendance.classId, classId),\n          eq(attendance.attendanceDate, date)\n        )\n      );\n  }\n\n  async getAttendanceRecord(classId: string, studentId: string, date: string): Promise<Attendance | undefined> {\n    const result = await db\n      .select()\n      .from(attendance)\n      .where(\n        and(\n          eq(attendance.classId, classId),\n          eq(attendance.studentId, studentId),\n          eq(attendance.attendanceDate, date)\n        )\n      );\n\n    return result.length > 0 ? result[0] : undefined;\n  }\n\n  async updateAttendance(attendanceId: string, updates: Partial<Attendance>): Promise<Attendance> {\n    const [updated] = await db\n      .update(attendance)\n      .set({\n        ...updates,\n      })\n      .where(eq(attendance.id, attendanceId))\n      .returning();\n    \n    if (!updated) {\n      throw new Error('Attendance record not found');\n    }\n    \n    return updated;\n  }\n\n  // Grades\n  async getAssessments(): Promise<Assessment[]> {\n    const allAssessments = await db.select().from(assessments).orderBy(desc(assessments.createdAt));\n    return allAssessments;\n  }\n\n  async getTeacherAssessments(teacherId: string): Promise<Assessment[]> {\n    const teacherAssessments = await db\n      .select()\n      .from(assessments)\n      .where(eq(assessments.teacherId, teacherId))\n      .orderBy(desc(assessments.createdAt));\n    return teacherAssessments;\n  }\n\n  async createAssessment(assessmentData: any): Promise<Assessment> {\n    const [assessment] = await db.insert(assessments).values(assessmentData).returning();\n    return assessment;\n  }\n\n  async createGrade(gradeData: any): Promise<Grade> {\n    const [grade] = await db.insert(grades).values(gradeData).returning();\n    return grade;\n  }\n\n  async getStudentGrades(studentId: string): Promise<Grade[]> {\n    return await db\n      .select()\n      .from(grades)\n      .where(eq(grades.studentId, studentId))\n      .orderBy(desc(grades.enteredAt));\n  }\n\n  // Cash Draw Requests\n  async getCashDrawRequests(): Promise<CashDrawRequest[]> {\n    return await db\n      .select()\n      .from(cashDrawRequests)\n      .orderBy(desc(cashDrawRequests.requestedAt));\n  }\n\n  async createCashDrawRequest(requestData: any): Promise<CashDrawRequest> {\n    const [request] = await db.insert(cashDrawRequests).values(requestData).returning();\n    return request;\n  }\n\n  async updateCashDrawRequest(id: string, updates: any): Promise<CashDrawRequest> {\n    const [updatedRequest] = await db\n      .update(cashDrawRequests)\n      .set(updates)\n      .where(eq(cashDrawRequests.id, id))\n      .returning();\n    return updatedRequest;\n  }\n\n  // Daily Close\n  async getDailyClose(date: string): Promise<DailyClose | undefined> {\n    const [dailyCloseRecord] = await db\n      .select()\n      .from(dailyClose)\n      .where(eq(dailyClose.closeDate, date));\n    return dailyCloseRecord;\n  }\n\n  async createDailyClose(dailyCloseData: any): Promise<DailyClose> {\n    const [dailyCloseRecord] = await db.insert(dailyClose).values(dailyCloseData).returning();\n    return dailyCloseRecord;\n  }\n\n  async updateDailyClose(date: string, updates: any): Promise<DailyClose> {\n    const [updatedRecord] = await db\n      .update(dailyClose)\n      .set(updates)\n      .where(eq(dailyClose.closeDate, date))\n      .returning();\n    return updatedRecord;\n  }\n\n  async getAllDailyCloses(): Promise<DailyClose[]> {\n    return await db\n      .select()\n      .from(dailyClose)\n      .orderBy(desc(dailyClose.closeDate));\n  }\n\n  // Expenses\n  async getExpenses(limit = 50): Promise<Expense[]> {\n    return await db\n      .select()\n      .from(expenses)\n      .orderBy(desc(expenses.createdAt))\n      .limit(limit);\n  }\n\n  async createExpense(expenseData: any): Promise<Expense> {\n    const [expense] = await db.insert(expenses).values(expenseData).returning();\n    return expense;\n  }\n\n  // Staff Members (for expense tracking)\n  async getStaffMembers(): Promise<any[]> {\n    return await db\n      .select({\n        id: users.id,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        email: users.email,\n        role: users.role,\n      })\n      .from(users)\n      .where(sql`${users.role} IN ('teacher', 'management', 'finance')`)\n      .orderBy(users.firstName);\n  }\n\n  // Dashboard stats\n  async getDashboardStats(): Promise<any> {\n    const totalStudents = await db.select({ count: count() }).from(students);\n    const monthlyRevenue = await db\n      .select({ total: sum(payments.amount) })\n      .from(payments)\n      .where(gte(payments.paymentDate, sql`date_trunc('month', current_date)`));\n    \n    const pendingInvoices = await db\n      .select({ total: sum(invoices.total) })\n      .from(invoices)\n      .where(eq(invoices.status, 'overdue'));\n\n    const avgAttendance = await db\n      .select({ avg: avg(sql`case when status = 'present' then 1.0 else 0.0 end`) })\n      .from(attendance)\n      .where(gte(attendance.attendanceDate, sql`date_trunc('month', current_date)`));\n\n    return {\n      totalStudents: totalStudents[0]?.count || 0,\n      monthlyRevenue: monthlyRevenue[0]?.total || 0,\n      pendingFees: pendingInvoices[0]?.total || 0,\n      avgAttendance: Math.round(Number(avgAttendance[0]?.avg || 0) * 100),\n    };\n  }\n\n  async getTeacherEarnings(teacherId: string): Promise<any> {\n    // Calculate earnings based on enrollments and payout rules\n    // This is a simplified version - in reality would be more complex\n    return {\n      baseAmount: 21000,\n      extraClasses: 3500,\n      total: 24500,\n    };\n  }\n  \n  async getStudentFinancialSummary(studentId: string): Promise<{\n    totalOwed: number;\n    totalPaid: number;\n    outstandingBalance: number;\n    feeStatus: 'paid' | 'pending' | 'overdue' | 'partial';\n    lastPaymentDate?: Date;\n  }> {\n    // Get all invoices for this student\n    const studentInvoices = await db\n      .select()\n      .from(invoices)\n      .where(eq(invoices.studentId, studentId));\n    \n    // Get all payments for this student\n    const studentPayments = await db\n      .select()\n      .from(payments)\n      .where(eq(payments.studentId, studentId));\n    \n    const totalOwed = studentInvoices.reduce((sum, inv) => sum + parseFloat(inv.total), 0);\n    const totalPaid = studentPayments.reduce((sum, pay) => sum + parseFloat(pay.amount), 0);\n    const outstandingBalance = totalOwed - totalPaid;\n    \n    // Determine fee status\n    let feeStatus: 'paid' | 'pending' | 'overdue' | 'partial' = 'paid';\n    if (outstandingBalance > 0) {\n      // Check if any invoices are overdue\n      const now = new Date();\n      const hasOverdueInvoice = studentInvoices.some(inv => \n        new Date(inv.dueDate) < now && inv.status !== 'paid'\n      );\n      \n      if (hasOverdueInvoice) {\n        feeStatus = 'overdue';\n      } else if (totalPaid > 0 && outstandingBalance > 0) {\n        feeStatus = 'partial';\n      } else {\n        feeStatus = 'pending';\n      }\n    }\n    \n    const lastPayment = studentPayments\n      .filter(p => p.paymentDate)\n      .sort((a, b) => new Date(b.paymentDate!).getTime() - new Date(a.paymentDate!).getTime())[0];\n    \n    return {\n      totalOwed,\n      totalPaid,\n      outstandingBalance,\n      feeStatus,\n      lastPaymentDate: lastPayment?.paymentDate ?? undefined\n    };\n  }\n  \n  async getStudentAttendancePercentage(studentId: string): Promise<number> {\n    // Get all attendance records for this student in the current academic year\n    const attendanceRecords = await db\n      .select()\n      .from(attendance)\n      .where(eq(attendance.studentId, studentId));\n    \n    if (attendanceRecords.length === 0) return 0;\n    \n    const presentCount = attendanceRecords.filter(record => \n      record.status === 'present' || record.status === 'late'\n    ).length;\n    \n    return Math.round((presentCount / attendanceRecords.length) * 100);\n  }\n  \n  async getStudentAverageGrade(studentId: string): Promise<string> {\n    // Get all grades for this student\n    const studentGrades = await db\n      .select()\n      .from(grades)\n      .innerJoin(assessments, eq(grades.assessmentId, assessments.id))\n      .where(eq(grades.studentId, studentId));\n    \n    if (studentGrades.length === 0) return 'N/A';\n    \n    // Calculate percentage average\n    const totalPercentage = studentGrades.reduce((sum, gradeRecord) => {\n      const { grades: grade, assessments: assessment } = gradeRecord;\n      const percentage = (grade.marksObtained / assessment.totalMarks) * 100;\n      return sum + percentage;\n    }, 0);\n    \n    const averagePercentage = totalPercentage / studentGrades.length;\n    \n    // Convert to grade\n    if (averagePercentage >= 95) return 'A+';\n    if (averagePercentage >= 90) return 'A';\n    if (averagePercentage >= 85) return 'A-';\n    if (averagePercentage >= 80) return 'B+';\n    if (averagePercentage >= 75) return 'B';\n    if (averagePercentage >= 70) return 'B-';\n    if (averagePercentage >= 65) return 'C+';\n    if (averagePercentage >= 60) return 'C';\n    if (averagePercentage >= 55) return 'C-';\n    if (averagePercentage >= 50) return 'D';\n    return 'F';\n  }\n\n  // Missing methods to complete interface implementation\n  async createPaymentWithAllocations(paymentData: any, allocations: any[]): Promise<Payment> {\n    const [payment] = await db.insert(payments).values(paymentData).returning();\n    \n    // Create payment allocations\n    for (const allocation of allocations) {\n      await db.insert(paymentAllocations).values({\n        paymentId: payment.id,\n        ...allocation\n      });\n    }\n    \n    return payment;\n  }\n\n  async addInvoiceAdjustment(invoiceId: string, adjustment: any): Promise<any> {\n    const [adjustmentRecord] = await db.insert(invoiceAdjustments).values({\n      invoiceId,\n      ...adjustment\n    }).returning();\n    return adjustmentRecord;\n  }\n\n  async getStudentLedger(studentId: string): Promise<any[]> {\n    // Get student invoices and payments to create ledger\n    const invoices = await this.getStudentInvoices(studentId);\n    const studentPayments = await db\n      .select()\n      .from(payments)\n      .where(eq(payments.studentId, studentId))\n      .orderBy(desc(payments.createdAt));\n\n    // Combine and sort by date\n    const ledger = [\n      ...invoices.map(inv => ({\n        id: inv.id,\n        date: inv.issueDate,\n        type: 'invoice' as const,\n        description: `Invoice #${inv.invoiceNumber}`,\n        amount: parseFloat(inv.total),\n        balance: 0 // Will be calculated\n      })),\n      ...studentPayments.map((pay: any) => ({\n        id: pay.id,\n        date: pay.paymentDate || pay.createdAt,\n        type: 'payment' as const,\n        description: `Payment #${pay.receiptNumber}`,\n        amount: -parseFloat(pay.amount),\n        balance: 0 // Will be calculated\n      }))\n    ].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n    // Calculate running balance\n    let runningBalance = 0;\n    ledger.forEach(entry => {\n      runningBalance += entry.amount;\n      entry.balance = runningBalance;\n    });\n\n    return ledger;\n  }\n\n  async createBillingSchedule(scheduleData: any): Promise<any> {\n    const [schedule] = await db.insert(billingSchedules).values(scheduleData).returning();\n    return schedule;\n  }\n\n  async generateRecurringInvoices(date?: string): Promise<Invoice[]> {\n    // This would generate invoices based on billing schedules\n    // For now, return empty array as placeholder\n    return [];\n  }\n\n  // Digital Diary - Announcement Implementation\n  async getAnnouncements(teacherId?: string): Promise<Announcement[]> {\n    const whereCondition = teacherId \n      ? and(eq(announcements.isActive, true), eq(announcements.createdBy, teacherId))\n      : eq(announcements.isActive, true);\n\n    return await db\n      .select({\n        id: announcements.id,\n        title: announcements.title,\n        content: announcements.content,\n        type: announcements.type,\n        priority: announcements.priority,\n        createdBy: announcements.createdBy,\n        subjectId: announcements.subjectId,\n        classId: announcements.classId,\n        dueDate: announcements.dueDate,\n        isActive: announcements.isActive,\n        createdAt: announcements.createdAt,\n        updatedAt: announcements.updatedAt,\n      })\n      .from(announcements)\n      .where(whereCondition)\n      .orderBy(desc(announcements.createdAt));\n  }\n\n  async createAnnouncement(announcement: InsertAnnouncement): Promise<Announcement> {\n    const [newAnnouncement] = await db.insert(announcements).values(announcement).returning();\n    return newAnnouncement;\n  }\n\n  async updateAnnouncement(id: string, updates: Partial<InsertAnnouncement>): Promise<Announcement> {\n    const [updatedAnnouncement] = await db\n      .update(announcements)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(announcements.id, id))\n      .returning();\n    return updatedAnnouncement;\n  }\n\n  async deleteAnnouncement(id: string): Promise<void> {\n    await db.update(announcements)\n      .set({ isActive: false })\n      .where(eq(announcements.id, id));\n  }\n\n  async addAnnouncementRecipients(announcementId: string, studentIds: string[]): Promise<void> {\n    const recipients = studentIds.map(studentId => ({\n      announcementId,\n      studentId,\n    }));\n    \n    await db.insert(announcementRecipients).values(recipients);\n  }\n\n  async getStudentAnnouncements(studentId: string): Promise<any[]> {\n    const results = await db\n      .select({\n        id: announcements.id,\n        title: announcements.title,\n        content: announcements.content,\n        type: announcements.type,\n        priority: announcements.priority,\n        dueDate: announcements.dueDate,\n        createdAt: announcements.createdAt,\n        isRead: announcementRecipients.isRead,\n        readAt: announcementRecipients.readAt,\n        // Include teacher and subject info\n        teacherFirstName: users.firstName,\n        teacherLastName: users.lastName,\n        subjectName: subjects.name,\n        subjectCode: subjects.code,\n      })\n      .from(announcementRecipients)\n      .innerJoin(announcements, eq(announcementRecipients.announcementId, announcements.id))\n      .innerJoin(users, eq(announcements.createdBy, users.id))\n      .leftJoin(subjects, eq(announcements.subjectId, subjects.id))\n      .where(\n        and(\n          eq(announcementRecipients.studentId, studentId),\n          eq(announcements.isActive, true)\n        )\n      )\n      .orderBy(desc(announcements.createdAt));\n\n    return results;\n  }\n\n  async markAnnouncementAsRead(announcementId: string, studentId: string): Promise<void> {\n    await db\n      .update(announcementRecipients)\n      .set({ \n        isRead: true, \n        readAt: new Date() \n      })\n      .where(\n        and(\n          eq(announcementRecipients.announcementId, announcementId),\n          eq(announcementRecipients.studentId, studentId)\n        )\n      );\n  }\n\n  async getAnnouncementsByClass(classId: string): Promise<Announcement[]> {\n    return await db\n      .select()\n      .from(announcements)\n      .where(\n        and(\n          eq(announcements.classId, classId),\n          eq(announcements.isActive, true)\n        )\n      )\n      .orderBy(desc(announcements.createdAt));\n  }\n\n  async getAnnouncementsBySubject(subjectId: string): Promise<Announcement[]> {\n    return await db\n      .select()\n      .from(announcements)\n      .where(\n        and(\n          eq(announcements.subjectId, subjectId),\n          eq(announcements.isActive, true)\n        )\n      )\n      .orderBy(desc(announcements.createdAt));\n  }\n\n  // Add-ons management\n  async getAddOns(): Promise<any[]> {\n    try {\n      return await db.select().from(addOns).orderBy(addOns.name);\n    } catch (error) {\n      console.error(\"Error fetching add-ons:\", error);\n      return [];\n    }\n  }\n\n  async createAddOn(addOnData: any): Promise<any> {\n    const [addOn] = await db.insert(addOns).values({\n      name: addOnData.name,\n      description: addOnData.description || '',\n      price: addOnData.price.toString(),\n      isActive: addOnData.isActive ?? true,\n      category: addOnData.category || 'other',\n    }).returning();\n    return addOn;\n  }\n\n  // Enhanced invoice creation with items\n  async createInvoiceWithItems(invoiceData: any): Promise<Invoice> {\n    // Generate invoice number\n    const invoiceNumber = `INV-${Date.now()}`;\n    \n    // Use provided totals or calculate from items\n    const subtotal = parseFloat(invoiceData.subtotal) || invoiceData.items.reduce((sum: number, item: any) => \n      sum + parseFloat(item.totalPrice), 0);\n    const discountAmount = parseFloat(invoiceData.discountAmount) || 0;\n    const total = parseFloat(invoiceData.total) || (subtotal - discountAmount);\n\n    // Create invoice\n    const [invoice] = await db.insert(invoices).values({\n      invoiceNumber,\n      studentId: invoiceData.studentId,\n      billingPeriodStart: invoiceData.billingPeriodStart || invoiceData.dueDate,\n      billingPeriodEnd: invoiceData.billingPeriodEnd || invoiceData.dueDate,\n      issueDate: invoiceData.dueDate,\n      dueDate: invoiceData.dueDate,\n      subtotal: subtotal.toFixed(2),\n      discount: discountAmount.toFixed(2),\n      total: total.toFixed(2),\n      amountPaid: '0.00',\n      balanceDue: total.toFixed(2),\n      status: 'sent',\n      notes: invoiceData.notes || '',\n      createdBy: invoiceData.createdBy || 'system',\n    }).returning();\n\n    // Create invoice items\n    if (invoiceData.items && invoiceData.items.length > 0) {\n      const itemsToInsert = invoiceData.items.map((item: any) => ({\n        id: crypto.randomUUID(),\n        invoiceId: invoice.id,\n        type: item.type,\n        subjectId: item.type === 'subject' ? item.itemId : null,\n        addOnId: item.type === 'addon' ? item.itemId : null,\n        description: item.description || item.name || '',\n        quantity: item.quantity || 1,\n        unitPrice: item.unitPrice,\n        total: item.totalPrice,\n      }));\n      \n      await db.insert(invoiceItems).values(itemsToInsert);\n    }\n\n    return invoice;\n  }\n\n  async updateInvoiceWithItems(invoiceId: string, invoiceData: any): Promise<Invoice> {\n    // Update invoice\n    const [invoice] = await db\n      .update(invoices)\n      .set({\n        dueDate: invoiceData.dueDate,\n        subtotal: invoiceData.subtotal,\n        discount: invoiceData.discountAmount || '0.00',\n        total: invoiceData.total,\n        balanceDue: invoiceData.total,\n        notes: invoiceData.notes || '',\n      })\n      .where(eq(invoices.id, invoiceId))\n      .returning();\n\n    // Delete existing items and recreate\n    await db.delete(invoiceItems).where(eq(invoiceItems.invoiceId, invoiceId));\n\n    if (invoiceData.items && invoiceData.items.length > 0) {\n      const itemsToInsert = invoiceData.items.map((item: any) => ({\n        id: crypto.randomUUID(),\n        invoiceId: invoice.id,\n        type: item.type,\n        subjectId: item.type === 'subject' ? item.itemId : null,\n        addOnId: item.type === 'addon' ? item.itemId : null,\n        description: item.description || item.name || '',\n        quantity: item.quantity || 1,\n        unitPrice: item.unitPrice,\n        total: item.totalPrice,\n      }));\n      \n      await db.insert(invoiceItems).values(itemsToInsert);\n    }\n\n    return invoice;\n  }\n\n  // Teacher Data Isolation Methods\n  async getTeacherSubjects(teacherId: string): Promise<Subject[]> {\n    return await db\n      .select({\n        id: subjects.id,\n        name: subjects.name,\n        code: subjects.code,\n        classLevels: subjects.classLevels,\n        baseFee: subjects.baseFee,\n        description: subjects.description,\n        isActive: subjects.isActive,\n        createdAt: subjects.createdAt,\n      })\n      .from(subjects)\n      .innerJoin(enrollments, eq(subjects.id, enrollments.subjectId))\n      .where(and(\n        eq(enrollments.teacherId, teacherId),\n        eq(subjects.isActive, true)\n      ))\n      .groupBy(subjects.id);\n  }\n\n  async getTeacherStudents(teacherId: string): Promise<Student[]> {\n    return await db\n      .select({\n        id: students.id,\n        rollNumber: students.rollNumber,\n        firstName: students.firstName,\n        lastName: students.lastName,\n        dateOfBirth: students.dateOfBirth,\n        gender: students.gender,\n        classLevels: students.classLevels,\n        parentId: students.parentId,\n        profileImageUrl: students.profileImageUrl,\n        isActive: students.isActive,\n        createdAt: students.createdAt,\n        updatedAt: students.updatedAt,\n      })\n      .from(students)\n      .innerJoin(enrollments, eq(students.id, enrollments.studentId))\n      .where(and(\n        eq(enrollments.teacherId, teacherId),\n        eq(students.isActive, true)\n      ))\n      .groupBy(students.id);\n  }\n\n  async getTeacherEarningsRestricted(teacherId: string): Promise<any> {\n    // Get teacher's subjects first\n    const teacherSubjects = await this.getTeacherSubjects(teacherId);\n    const subjectIds = teacherSubjects.map(s => s.id);\n    \n    if (subjectIds.length === 0) {\n      return {\n        baseAmount: 0,\n        extraClasses: 0,\n        bonuses: 0,\n        deductions: 0,\n        netAmount: 0,\n        subjectBreakdown: []\n      };\n    }\n\n    // Calculate earnings only for teacher's subjects\n    const earnings = {\n      baseAmount: teacherSubjects.reduce((sum, subject) => \n        sum + parseFloat(subject.baseFee), 0),\n      extraClasses: 3500, // Placeholder - would calculate from actual extra classes\n      bonuses: 2000,\n      deductions: 500,\n      netAmount: 0,\n      subjectBreakdown: teacherSubjects.map(subject => ({\n        subjectName: subject.name,\n        studentCount: 0, // Will be calculated\n        baseFee: parseFloat(subject.baseFee)\n      }))\n    };\n    \n    earnings.netAmount = earnings.baseAmount + earnings.extraClasses + earnings.bonuses - earnings.deductions;\n    \n    return earnings;\n  }\n\n  async getTeacherAnnouncements(teacherId: string): Promise<Announcement[]> {\n    // Get announcements created by this teacher only\n    return await db\n      .select({\n        id: announcements.id,\n        title: announcements.title,\n        content: announcements.content,\n        type: announcements.type,\n        priority: announcements.priority,\n        createdBy: announcements.createdBy,\n        subjectId: announcements.subjectId,\n        classId: announcements.classId,\n        dueDate: announcements.dueDate,\n        isActive: announcements.isActive,\n        createdAt: announcements.createdAt,\n        updatedAt: announcements.updatedAt,\n      })\n      .from(announcements)\n      .where(and(\n        eq(announcements.createdBy, teacherId),\n        eq(announcements.isActive, true)\n      ))\n      .orderBy(desc(announcements.createdAt));\n  }\n\n  // Schedule Management Implementation\n  async getTeacherSchedules(teacherId: string): Promise<ClassSchedule[]> {\n    return await db\n      .select({\n        id: classSchedules.id,\n        teacherId: classSchedules.teacherId,\n        subjectId: classSchedules.subjectId,\n        dayOfWeek: classSchedules.dayOfWeek,\n        startTime: classSchedules.startTime,\n        endTime: classSchedules.endTime,\n        location: classSchedules.location,\n        isActive: classSchedules.isActive,\n        createdAt: classSchedules.createdAt,\n        updatedAt: classSchedules.updatedAt,\n        subjectName: subjects.name,\n        subjectCode: subjects.code,\n      })\n      .from(classSchedules)\n      .innerJoin(subjects, eq(classSchedules.subjectId, subjects.id))\n      .where(\n        and(\n          eq(classSchedules.teacherId, teacherId),\n          eq(classSchedules.isActive, true)\n        )\n      )\n      .orderBy(classSchedules.dayOfWeek, classSchedules.startTime);\n  }\n\n  async createSchedule(schedule: InsertClassSchedule): Promise<ClassSchedule> {\n    const [newSchedule] = await db.insert(classSchedules).values(schedule).returning();\n    return newSchedule;\n  }\n\n  async updateSchedule(id: string, updates: Partial<InsertClassSchedule>): Promise<ClassSchedule> {\n    const [updatedSchedule] = await db\n      .update(classSchedules)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(classSchedules.id, id))\n      .returning();\n    return updatedSchedule;\n  }\n\n  async deleteSchedule(id: string): Promise<void> {\n    await db\n      .update(classSchedules)\n      .set({ isActive: false })\n      .where(eq(classSchedules.id, id));\n  }\n\n  // Schedule Changes Implementation\n  async getScheduleChanges(teacherId: string, startDate?: Date, endDate?: Date): Promise<ScheduleChange[]> {\n    const conditions = [eq(scheduleChanges.teacherId, teacherId)];\n    \n    if (startDate) {\n      conditions.push(gte(scheduleChanges.affectedDate, startDate.toISOString().split('T')[0]));\n    }\n    if (endDate) {\n      conditions.push(lte(scheduleChanges.affectedDate, endDate.toISOString().split('T')[0]));\n    }\n\n    return await db\n      .select()\n      .from(scheduleChanges)\n      .innerJoin(subjects, eq(scheduleChanges.subjectId, subjects.id))\n      .where(and(...conditions))\n      .orderBy(desc(scheduleChanges.affectedDate));\n  }\n\n  async createScheduleChange(change: InsertScheduleChange): Promise<ScheduleChange> {\n    const [newChange] = await db.insert(scheduleChanges).values(change).returning();\n    \n    // Auto-generate notifications for affected students\n    await this.generateScheduleChangeNotifications(newChange.id);\n    \n    return newChange;\n  }\n\n  async updateScheduleChange(id: string, updates: Partial<InsertScheduleChange>): Promise<ScheduleChange> {\n    const [updatedChange] = await db\n      .update(scheduleChanges)\n      .set(updates)\n      .where(eq(scheduleChanges.id, id))\n      .returning();\n    return updatedChange;\n  }\n\n  async deleteScheduleChange(id: string): Promise<void> {\n    await db.delete(scheduleChanges).where(eq(scheduleChanges.id, id));\n  }\n\n  // Helper method to generate notifications for schedule changes\n  private async generateScheduleChangeNotifications(scheduleChangeId: string): Promise<void> {\n    // Get the schedule change details\n    const [change] = await db\n      .select()\n      .from(scheduleChanges)\n      .where(eq(scheduleChanges.id, scheduleChangeId));\n\n    if (!change) return;\n\n    // Get students enrolled in the affected subject\n    const enrolledStudents = await db\n      .select({ id: students.id })\n      .from(students)\n      .innerJoin(enrollments, eq(students.id, enrollments.studentId))\n      .where(\n        and(\n          eq(enrollments.subjectId, change.subjectId),\n          eq(enrollments.isActive, true),\n          eq(students.isActive, true)\n        )\n      );\n\n    // Generate notification message\n    const subject = await db\n      .select({ name: subjects.name })\n      .from(subjects)\n      .where(eq(subjects.id, change.subjectId));\n\n    let message = '';\n    const subjectName = subject[0]?.name || 'Class';\n    const affectedDate = new Date(change.affectedDate).toLocaleDateString();\n\n    switch (change.changeType) {\n      case 'cancellation':\n        message = `${subjectName} class on ${affectedDate} has been cancelled. ${change.reason ? 'Reason: ' + change.reason : ''}`;\n        break;\n      case 'reschedule':\n        const oldTime = change.originalStartTime ? `${change.originalStartTime}-${change.originalEndTime}` : '';\n        const newTime = change.newStartTime ? `${change.newStartTime}-${change.newEndTime}` : '';\n        message = `${subjectName} class on ${affectedDate} has been rescheduled from ${oldTime} to ${newTime}. ${change.reason ? 'Reason: ' + change.reason : ''}`;\n        break;\n      case 'extra_class':\n        const extraTime = change.newStartTime ? `${change.newStartTime}-${change.newEndTime}` : '';\n        message = `Extra ${subjectName} class scheduled for ${affectedDate} at ${extraTime}. ${change.reason ? 'Reason: ' + change.reason : ''}`;\n        break;\n    }\n\n    // Create notifications for all affected students\n    const notifications = enrolledStudents.map((student: any) => ({\n      studentId: student.id,\n      scheduleChangeId: scheduleChangeId,\n      message: message.trim(),\n      status: 'pending' as const,\n    }));\n\n    if (notifications.length > 0) {\n      await db.insert(studentNotifications).values(notifications);\n    }\n  }\n\n  // Student Schedule & Notifications Implementation\n  async getStudentSchedule(studentId: string, startDate?: Date, endDate?: Date): Promise<any[]> {\n    // Get regular schedules for student's enrolled subjects\n    const regularSchedules = await db\n      .select({\n        id: classSchedules.id,\n        type: sql<string>`'regular'`.as('type'),\n        subjectId: subjects.id,\n        subjectName: subjects.name,\n        subjectCode: subjects.code,\n        dayOfWeek: classSchedules.dayOfWeek,\n        startTime: classSchedules.startTime,\n        endTime: classSchedules.endTime,\n        location: classSchedules.location,\n        teacherName: sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`.as('teacherName'),\n      })\n      .from(enrollments)\n      .innerJoin(subjects, eq(enrollments.subjectId, subjects.id))\n      .innerJoin(classSchedules, eq(subjects.id, classSchedules.subjectId))\n      .innerJoin(users, eq(classSchedules.teacherId, users.id))\n      .where(\n        and(\n          eq(enrollments.studentId, studentId),\n          eq(enrollments.isActive, true),\n          eq(classSchedules.isActive, true)\n        )\n      );\n\n    return { regularSchedules, scheduleChanges: [] };\n  }\n\n  async getStudentNotifications(studentId: string): Promise<StudentNotification[]> {\n    return await db\n      .select()\n      .from(studentNotifications)\n      .innerJoin(scheduleChanges, eq(studentNotifications.scheduleChangeId, scheduleChanges.id))\n      .innerJoin(subjects, eq(scheduleChanges.subjectId, subjects.id))\n      .where(eq(studentNotifications.studentId, studentId))\n      .orderBy(desc(studentNotifications.createdAt));\n  }\n\n  async createStudentNotification(notification: InsertStudentNotification): Promise<StudentNotification> {\n    const [newNotification] = await db.insert(studentNotifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async markNotificationRead(notificationId: string): Promise<void> {\n    await db\n      .update(studentNotifications)\n      .set({ \n        status: 'read', \n        readAt: new Date() \n      })\n      .where(eq(studentNotifications.id, notificationId));\n  }\n\n  // Teacher and Staff Management Methods\n  async createTeacher(teacherData: any): Promise<any> {\n    // Generate temporary password for new teacher\n    const credentials = await generateUserCredentials();\n    \n    const teacher = await db.insert(users).values({\n      firstName: teacherData.firstName,\n      lastName: teacherData.lastName,\n      email: teacherData.email,\n      phone: teacherData.phone,\n      role: 'teacher',\n      isTeacher: true,\n      isSuperAdmin: false,\n      teacherSubjects: teacherData.teacherSubjects || [],\n      teacherClassLevels: teacherData.teacherClassLevels || [],\n      hireDate: teacherData.hireDate,\n      payoutPercentage: teacherData.payoutPercentage,\n      password: credentials.password,\n      temporaryPassword: credentials.temporaryPassword,\n      mustChangePassword: credentials.mustChangePassword,\n      isActive: true,\n    }).returning();\n    \n    // Return teacher data with temporary password for display\n    return {\n      ...teacher[0],\n      tempPassword: credentials.temporaryPassword, // Add temp password for admin to see\n    };\n  }\n\n  async getTeachers(): Promise<any[]> {\n    const teachers = await db.select().from(users).where(eq(users.isTeacher, true));\n    // Transform data to match frontend expectations\n    return teachers.map(teacher => ({\n      ...teacher,\n      name: `${teacher.firstName || ''} ${teacher.lastName || ''}`.trim()\n    }));\n  }\n\n  async createStaff(staffData: any): Promise<any> {\n    // Generate temporary password for new staff\n    const credentials = await generateUserCredentials();\n    \n    const staff = await db.insert(users).values({\n      firstName: staffData.firstName,\n      lastName: staffData.lastName,\n      email: staffData.email,\n      phone: staffData.phone,\n      role: staffData.role,\n      position: staffData.position,\n      isTeacher: false,\n      isSuperAdmin: false,\n      hireDate: staffData.hireDate,\n      password: credentials.password,\n      temporaryPassword: credentials.temporaryPassword,\n      mustChangePassword: credentials.mustChangePassword,\n      isActive: true,\n    }).returning();\n    \n    // Return staff data with temporary password for display\n    return {\n      ...staff[0],\n      tempPassword: credentials.temporaryPassword, // Add temp password for admin to see\n    };\n  }\n\n  async createManagement(managementData: any): Promise<any> {\n    // Generate temporary password for new management\n    const credentials = await generateUserCredentials();\n    \n    const management = await db.insert(users).values({\n      firstName: managementData.firstName,\n      lastName: managementData.lastName,\n      email: managementData.email,\n      phone: managementData.phone,\n      role: 'management',\n      position: managementData.position,\n      isTeacher: managementData.isAlsoTeacher || false,\n      isSuperAdmin: true,\n      teacherSubjects: managementData.isAlsoTeacher ? (managementData.teacherSubjects || []) : [],\n      teacherClassLevels: managementData.isAlsoTeacher ? (managementData.teacherClassLevels || []) : [],\n      payoutPercentage: managementData.isAlsoTeacher ? managementData.payoutPercentage : null,\n      hireDate: managementData.hireDate,\n      password: credentials.password,\n      temporaryPassword: credentials.temporaryPassword,\n      mustChangePassword: credentials.mustChangePassword,\n      isActive: true,\n    }).returning();\n    \n    // Return management data with temporary password for display\n    return {\n      ...management[0],\n      tempPassword: credentials.temporaryPassword, // Add temp password for admin to see\n    };\n  }\n\n  async updateManagement(id: string, managementData: any): Promise<any> {\n    const [management] = await db\n      .update(users)\n      .set({\n        firstName: managementData.firstName,\n        lastName: managementData.lastName,\n        email: managementData.email,\n        phone: managementData.phone,\n        position: managementData.position,\n        isTeacher: managementData.isAlsoTeacher || false,\n        isSuperAdmin: true, // Management always has super admin\n        teacherSubjects: managementData.isAlsoTeacher ? (managementData.teacherSubjects || []) : [],\n        teacherClassLevels: managementData.isAlsoTeacher ? (managementData.teacherClassLevels || []) : [],\n        payoutPercentage: managementData.isAlsoTeacher ? managementData.payoutPercentage : null,\n        hireDate: managementData.hireDate,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n\n    return management;\n  }\n\n  async deleteManagement(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async getStaff(): Promise<any[]> {\n    // Get all active users (both teachers and non-teachers) for the staff management page\n    const allUsers = await db.select().from(users).where(eq(users.isActive, true));\n    // Transform data to match frontend expectations\n    return allUsers.map(user => ({\n      ...user,\n      name: `${user.firstName || ''} ${user.lastName || ''}`.trim()\n    }));\n  }\n\n  async updateTeacher(id: string, teacherData: any): Promise<any> {\n    const [teacher] = await db.update(users)\n      .set({\n        firstName: teacherData.firstName,\n        lastName: teacherData.lastName,\n        email: teacherData.email,\n        phone: teacherData.phone,\n        teacherSubjects: teacherData.teacherSubjects || [],\n        teacherClassLevels: teacherData.teacherClassLevels || [],\n        hireDate: teacherData.hireDate,\n        payoutPercentage: teacherData.payoutPercentage,\n      })\n      .where(eq(users.id, id))\n      .returning();\n    \n    return teacher;\n  }\n\n  async deleteTeacher(id: string): Promise<void> {\n    // Handle cascading deletion for teachers\n    // For non-nullable foreign keys, we need to create a \"deleted user\" placeholder\n    \n    // Ensure we have a \"deleted user\" placeholder\n    const deletedUserId = 'deleted-user-system';\n    const existingDeletedUser = await db.select().from(users).where(eq(users.id, deletedUserId)).limit(1);\n    \n    if (existingDeletedUser.length === 0) {\n      await db.insert(users).values({\n        id: deletedUserId,\n        email: 'deleted@system.internal',\n        firstName: 'Deleted',\n        lastName: 'User',\n        role: 'management',\n        isTeacher: false,\n        isSuperAdmin: false,\n        isActive: false,\n      });\n    }\n    \n    // 1. Update assessments to point to deleted user (preserve assessment records)\n    await db.update(assessments)\n      .set({ teacherId: deletedUserId })\n      .where(eq(assessments.teacherId, id));\n    \n    // 2. Update classes to point to deleted user (preserve class records)\n    await db.update(classes)\n      .set({ teacherId: deletedUserId })\n      .where(eq(classes.teacherId, id));\n    \n    // 3. Update grades to point to deleted user (preserve grade records) \n    await db.update(grades)\n      .set({ enteredBy: deletedUserId })\n      .where(eq(grades.enteredBy, id));\n    \n    // 4. Update attendance records\n    await db.update(attendance)\n      .set({ markedBy: deletedUserId })\n      .where(eq(attendance.markedBy, id));\n    \n    // 5. Delete payout rules (administrative data - safe to delete)\n    await db.delete(payoutRules).where(eq(payoutRules.teacherId, id));\n    \n    // 6. Delete cash draw requests (administrative data)\n    await db.delete(cashDrawRequests).where(eq(cashDrawRequests.teacherId, id));\n    \n    // 7. Update other cash draw requests they may have reviewed\n    await db.update(cashDrawRequests)\n      .set({ reviewedBy: deletedUserId })\n      .where(eq(cashDrawRequests.reviewedBy, id));\n    \n    // 8. Update payment records to point to deleted user (preserve audit trail)\n    await db.update(payments)\n      .set({ receivedBy: deletedUserId })\n      .where(eq(payments.receivedBy, id));\n    \n    // 9. Update refunds they processed (nullable field)\n    await db.update(payments)\n      .set({ refundedBy: null })\n      .where(eq(payments.refundedBy, id));\n    \n    // 10. Update daily close records\n    await db.update(dailyClose)\n      .set({ closedBy: deletedUserId })\n      .where(eq(dailyClose.closedBy, id));\n    \n    // 11. Update expense records\n    await db.update(expenses)\n      .set({ enteredBy: deletedUserId })\n      .where(eq(expenses.enteredBy, id));\n    \n    // 11b. Update expense records - whoPaid field\n    await db.update(expenses)\n      .set({ whoPaid: deletedUserId })\n      .where(eq(expenses.whoPaid, id));\n    \n    // 12. Update invoice adjustments\n    await db.update(invoiceAdjustments)\n      .set({ appliedBy: deletedUserId })\n      .where(eq(invoiceAdjustments.appliedBy, id));\n    \n    // 13. Update announcements\n    await db.update(announcements)\n      .set({ createdBy: deletedUserId })\n      .where(eq(announcements.createdBy, id));\n    \n    // 14. Update class schedules\n    await db.update(classSchedules)\n      .set({ teacherId: deletedUserId })\n      .where(eq(classSchedules.teacherId, id));\n    \n    // 15. Update enrollments\n    await db.update(enrollments)\n      .set({ teacherId: deletedUserId })\n      .where(eq(enrollments.teacherId, id));\n    \n    // Finally, delete the teacher record\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async updateStaff(id: string, staffData: any): Promise<any> {\n    const [staff] = await db.update(users)\n      .set({\n        firstName: staffData.firstName,\n        lastName: staffData.lastName,\n        email: staffData.email,\n        phone: staffData.phone,\n        role: staffData.role,\n        position: staffData.position,\n        hireDate: staffData.hireDate,\n      })\n      .where(eq(users.id, id))\n      .returning();\n    \n    return staff;\n  }\n\n  async deleteStaff(id: string): Promise<void> {\n    // Handle cascading deletion for staff members\n    // For non-nullable foreign keys, we need to use a \"deleted user\" placeholder\n    \n    // Ensure we have a \"deleted user\" placeholder\n    const deletedUserId = 'deleted-user-system';\n    const existingDeletedUser = await db.select().from(users).where(eq(users.id, deletedUserId)).limit(1);\n    \n    if (existingDeletedUser.length === 0) {\n      await db.insert(users).values({\n        id: deletedUserId,\n        email: 'deleted@system.internal',\n        firstName: 'Deleted',\n        lastName: 'User',\n        role: 'management',\n        isTeacher: false,\n        isSuperAdmin: false,\n        isActive: false,\n      });\n    }\n    \n    // 1. Update payments to point to deleted user (preserve financial audit trail)\n    await db.update(payments)\n      .set({ receivedBy: deletedUserId })\n      .where(eq(payments.receivedBy, id));\n    \n    // 2. Update refunds they processed (nullable field - can be null)\n    await db.update(payments)\n      .set({ refundedBy: null })\n      .where(eq(payments.refundedBy, id));\n    \n    // 3. Update daily close records (preserve audit trail)\n    await db.update(dailyClose)\n      .set({ closedBy: deletedUserId })\n      .where(eq(dailyClose.closedBy, id));\n    \n    // 4. Update expenses (preserve financial records)\n    await db.update(expenses)\n      .set({ enteredBy: deletedUserId })\n      .where(eq(expenses.enteredBy, id));\n    \n    // 4b. Update expense records - whoPaid field for staff\n    await db.update(expenses)\n      .set({ whoPaid: deletedUserId })\n      .where(eq(expenses.whoPaid, id));\n    \n    // 5. Update invoice adjustments (preserve audit trail)\n    await db.update(invoiceAdjustments)\n      .set({ appliedBy: deletedUserId })\n      .where(eq(invoiceAdjustments.appliedBy, id));\n    \n    // 6. Update cash draw requests they reviewed\n    await db.update(cashDrawRequests)\n      .set({ reviewedBy: deletedUserId })\n      .where(eq(cashDrawRequests.reviewedBy, id));\n    \n    // 7. Update grades entered by this staff member\n    await db.update(grades)\n      .set({ enteredBy: deletedUserId })\n      .where(eq(grades.enteredBy, id));\n    \n    // 8. Update attendance records marked by this staff member\n    await db.update(attendance)\n      .set({ markedBy: deletedUserId })\n      .where(eq(attendance.markedBy, id));\n    \n    // 9. Update announcements\n    await db.update(announcements)\n      .set({ createdBy: deletedUserId })\n      .where(eq(announcements.createdBy, id));\n    \n    // Finally, delete the staff record\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async createPayoutRule(payoutData: any): Promise<any> {\n    const rule = await db.insert(payoutRules).values({\n      teacherId: payoutData.teacherId,\n      isFixed: payoutData.isFixed,\n      fixedPercentage: payoutData.fixedPercentage?.toString(),\n      tier1Percentage: payoutData.tier1Percentage?.toString(),\n      tier1Threshold: payoutData.tier1Threshold?.toString(),\n      tier2Percentage: payoutData.tier2Percentage?.toString(),\n      effectiveFrom: payoutData.effectiveFrom,\n      isActive: true,\n    }).returning();\n    \n    return rule[0];\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":70184},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  date,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table - mandatory for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Enhanced role system enums\nexport const userRoleEnum = pgEnum('user_role', ['teacher', 'finance', 'parent', 'management']);\n\n// User storage table - mandatory for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  phone: varchar(\"phone\"), // Phone number for staff/teachers\n  profileImageUrl: varchar(\"profile_image_url\"),\n  password: varchar(\"password\"), // Hashed password for login\n  temporaryPassword: varchar(\"temporary_password\"), // Temporary password for first login\n  mustChangePassword: boolean(\"must_change_password\").default(true), // Force password change on first login\n  role: userRoleEnum(\"role\").notNull(), // Primary role: teacher, finance, parent, management\n  isSuperAdmin: boolean(\"is_super_admin\").default(false), // Super admin privileges\n  isTeacher: boolean(\"is_teacher\").default(false), // Whether they teach (for super admins who are also teachers)\n  teacherSubjects: text(\"teacher_subjects\").array(), // Array of subject IDs they teach (for teachers/super admin teachers)\n  teacherClassLevels: text(\"teacher_class_levels\").array(), // Array of class levels they teach\n  payoutPercentage: integer(\"payout_percentage\"), // Teacher payout percentage\n  isActive: boolean(\"is_active\").default(true), // Whether staff member is active\n  hireDate: date(\"hire_date\"), // When they were hired\n  position: varchar(\"position\"), // Job title/position for non-teaching staff\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Enums\nexport const classLevelEnum = pgEnum('class_level', ['o-level', 'igcse', 'as-level', 'a2-level']);\nexport const genderEnum = pgEnum('gender', ['male', 'female']);\nexport const feeStatusEnum = pgEnum('fee_status', ['paid', 'pending', 'overdue', 'partial']);\nexport const attendanceStatusEnum = pgEnum('attendance_status', ['present', 'absent', 'late']);\nexport const paymentMethodEnum = pgEnum('payment_method', ['cash', 'bank_transfer', 'card', 'cheque']);\nexport const invoiceStatusEnum = pgEnum('invoice_status', ['draft', 'sent', 'paid', 'overdue', 'partial', 'cancelled']);\nexport const invoiceTypeEnum = pgEnum('invoice_type', ['monthly', 'prorated', 'custom', 'multi_month', 'adjustment']);\nexport const paymentStatusEnum = pgEnum('payment_status', ['completed', 'pending', 'failed', 'refunded']);\nexport const adjustmentTypeEnum = pgEnum('adjustment_type', ['discount', 'late_fee', 'manual_edit', 'refund', 'writeoff']);\nexport const announcementTypeEnum = pgEnum('announcement_type', ['homework', 'announcement', 'notice', 'reminder', 'event']);\nexport const priorityEnum = pgEnum('priority', ['low', 'medium', 'high']);\nexport const dayOfWeekEnum = pgEnum('day_of_week', ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']);\nexport const scheduleChangeTypeEnum = pgEnum('schedule_change_type', ['cancellation', 'reschedule', 'extra_class']);\nexport const notificationStatusEnum = pgEnum('notification_status', ['pending', 'sent', 'read']);\n\n// Students table\nexport const students = pgTable(\"students\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rollNumber: varchar(\"roll_number\").notNull().unique(),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  dateOfBirth: date(\"date_of_birth\").notNull(),\n  gender: genderEnum(\"gender\").notNull(),\n  classLevels: text(\"class_levels\").array().notNull(),\n  // Student contact information\n  studentPhone: varchar(\"student_phone\"),\n  studentEmail: varchar(\"student_email\"),\n  homeAddress: text(\"home_address\"),\n  // Parent/Guardian information\n  parentName: varchar(\"parent_name\"),\n  parentPhone: varchar(\"parent_phone\"),\n  parentEmail: varchar(\"parent_email\"),\n  // Additional Parent/Guardian information\n  additionalParentName: varchar(\"additional_parent_name\"),\n  additionalParentPhone: varchar(\"additional_parent_phone\"),\n  additionalParentEmail: varchar(\"additional_parent_email\"),\n  // System fields\n  parentId: varchar(\"parent_id\").references(() => users.id),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Subjects table\nexport const subjects = pgTable(\"subjects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  code: varchar(\"code\").notNull().unique(),\n  classLevels: text(\"class_levels\").array().notNull(),\n  baseFee: decimal(\"base_fee\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Subject combinations/combos\nexport const subjectCombos = pgTable(\"subject_combos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  classLevels: text(\"class_levels\").array().notNull(),\n  discountedFee: decimal(\"discounted_fee\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Junction table for combo subjects\nexport const comboSubjects = pgTable(\"combo_subjects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  comboId: varchar(\"combo_id\").references(() => subjectCombos.id).notNull(),\n  subjectId: varchar(\"subject_id\").references(() => subjects.id).notNull(),\n});\n\n// Student enrollments with subject-specific discount tracking\nexport const enrollments = pgTable(\"enrollments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  subjectId: varchar(\"subject_id\").references(() => subjects.id),\n  comboId: varchar(\"combo_id\").references(() => subjectCombos.id),\n  teacherId: varchar(\"teacher_id\").references(() => users.id),\n  discountType: varchar(\"discount_type\").default('none'), // 'none', 'percentage', 'fixed'\n  discountValue: decimal(\"discount_value\", { precision: 10, scale: 2 }).default('0'),\n  discountReason: varchar(\"discount_reason\"), // why discount was given\n  discountApprovedBy: varchar(\"discount_approved_by\").references(() => users.id), // who approved discount\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow(),\n  isActive: boolean(\"is_active\").default(true),\n});\n\n// Invoices\nexport const invoices = pgTable(\"invoices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceNumber: varchar(\"invoice_number\").notNull().unique(),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  type: invoiceTypeEnum(\"type\").default('monthly'),\n  billingPeriodStart: date(\"billing_period_start\").notNull(),\n  billingPeriodEnd: date(\"billing_period_end\").notNull(),\n  issueDate: date(\"issue_date\").notNull(),\n  dueDate: date(\"due_date\").notNull(),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  discount: decimal(\"discount\", { precision: 10, scale: 2 }).default('0'),\n  lateFee: decimal(\"late_fee\", { precision: 10, scale: 2 }).default('0'),\n  adjustments: decimal(\"adjustments\", { precision: 10, scale: 2 }).default('0'),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  amountPaid: decimal(\"amount_paid\", { precision: 10, scale: 2 }).default('0'),\n  balanceDue: decimal(\"balance_due\", { precision: 10, scale: 2 }).notNull(),\n  status: invoiceStatusEnum(\"status\").default('draft'),\n  isRecurring: boolean(\"is_recurring\").default(false),\n  parentInvoiceId: varchar(\"parent_invoice_id\"), // For adjustments/corrections\n  notes: text(\"notes\"),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Add-ons/Services table\nexport const addOns = pgTable(\"add_ons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  category: varchar(\"category\").notNull(), // materials, transport, activities, etc.\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Enhanced invoice line items with subject-specific discounts\nexport const invoiceItems = pgTable(\"invoice_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: varchar(\"invoice_id\").references(() => invoices.id).notNull(),\n  subjectId: varchar(\"subject_id\").references(() => subjects.id),\n  addOnId: varchar(\"add_on_id\").references(() => addOns.id),\n  type: varchar(\"type\").notNull(), // 'subject', 'addon', 'custom'\n  description: text(\"description\").notNull(),\n  quantity: integer(\"quantity\").default(1),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  discountType: varchar(\"discount_type\").default('none'), // 'none', 'percentage', 'fixed'\n  discountValue: decimal(\"discount_value\", { precision: 10, scale: 2 }).default('0'), // percentage or fixed amount\n  discountAmount: decimal(\"discount_amount\", { precision: 10, scale: 2 }).default('0'), // calculated discount\n  discountReason: varchar(\"discount_reason\"), // teacher name, reason for discount\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(), // after discount\n});\n\n// Payments\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  receiptNumber: varchar(\"receipt_number\").notNull().unique(),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentMethod: paymentMethodEnum(\"payment_method\").notNull(),\n  transactionNumber: varchar(\"transaction_number\"), // For bank transfers\n  receivedBy: varchar(\"received_by\").references(() => users.id).notNull(),\n  paymentDate: timestamp(\"payment_date\").defaultNow(),\n  status: paymentStatusEnum(\"status\").default('completed'),\n  notes: text(\"notes\"),\n  isRefunded: boolean(\"is_refunded\").default(false),\n  refundedAt: timestamp(\"refunded_at\"),\n  refundedBy: varchar(\"refunded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Payment allocations - many-to-many between payments and invoices\nexport const paymentAllocations = pgTable(\"payment_allocations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  paymentId: varchar(\"payment_id\").references(() => payments.id).notNull(),\n  invoiceId: varchar(\"invoice_id\").references(() => invoices.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Invoice adjustments for audit trail\nexport const invoiceAdjustments = pgTable(\"invoice_adjustments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: varchar(\"invoice_id\").references(() => invoices.id).notNull(),\n  type: adjustmentTypeEnum(\"type\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  reason: text(\"reason\").notNull(),\n  appliedBy: varchar(\"applied_by\").references(() => users.id).notNull(),\n  appliedAt: timestamp(\"applied_at\").defaultNow(),\n  notes: text(\"notes\"),\n});\n\n// Billing schedules for recurring invoices\nexport const billingSchedules = pgTable(\"billing_schedules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  enrollmentId: varchar(\"enrollment_id\").references(() => enrollments.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\"), // null for indefinite\n  frequency: varchar(\"frequency\").default('monthly'), // monthly, weekly, custom\n  dayOfMonth: integer(\"day_of_month\").default(1), // 1-31 for monthly billing\n  isActive: boolean(\"is_active\").default(true),\n  lastGeneratedDate: date(\"last_generated_date\"),\n  nextBillingDate: date(\"next_billing_date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Classes/Periods\nexport const classes = pgTable(\"classes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  subjectId: varchar(\"subject_id\").references(() => subjects.id).notNull(),\n  teacherId: varchar(\"teacher_id\").references(() => users.id).notNull(),\n  startTime: varchar(\"start_time\").notNull(), // HH:MM format\n  endTime: varchar(\"end_time\").notNull(),\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 0-6, 0 = Sunday\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Attendance records\nexport const attendance = pgTable(\"attendance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  classId: varchar(\"class_id\").references(() => classes.id).notNull(),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  attendanceDate: date(\"attendance_date\").notNull(),\n  status: attendanceStatusEnum(\"status\").notNull(),\n  markedBy: varchar(\"marked_by\").references(() => users.id).notNull(),\n  markedAt: timestamp(\"marked_at\").defaultNow(),\n  notes: text(\"notes\"),\n});\n\n// Grades/Assessments\nexport const assessments = pgTable(\"assessments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  subjectId: varchar(\"subject_id\").references(() => subjects.id).notNull(),\n  teacherId: varchar(\"teacher_id\").references(() => users.id).notNull(),\n  totalMarks: integer(\"total_marks\").notNull(),\n  assessmentDate: date(\"assessment_date\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const grades = pgTable(\"grades\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  assessmentId: varchar(\"assessment_id\").references(() => assessments.id).notNull(),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  marksObtained: integer(\"marks_obtained\").notNull(),\n  grade: varchar(\"grade\"), // A+, A, B+, etc.\n  comments: text(\"comments\"),\n  enteredBy: varchar(\"entered_by\").references(() => users.id).notNull(),\n  enteredAt: timestamp(\"entered_at\").defaultNow(),\n});\n\n// Teacher payout rules\nexport const payoutRules = pgTable(\"payout_rules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: varchar(\"teacher_id\").references(() => users.id).notNull(),\n  isFixed: boolean(\"is_fixed\").default(false),\n  fixedPercentage: decimal(\"fixed_percentage\", { precision: 5, scale: 2 }),\n  tier1Percentage: decimal(\"tier1_percentage\", { precision: 5, scale: 2 }),\n  tier1Threshold: decimal(\"tier1_threshold\", { precision: 10, scale: 2 }),\n  tier2Percentage: decimal(\"tier2_percentage\", { precision: 5, scale: 2 }),\n  isActive: boolean(\"is_active\").default(true),\n  effectiveFrom: date(\"effective_from\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Cash draw requests\nexport const cashDrawRequests = pgTable(\"cash_draw_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: varchar(\"teacher_id\").references(() => users.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  reason: text(\"reason\").notNull(),\n  status: varchar(\"status\").default('pending'), // pending, approved, denied\n  requestedAt: timestamp(\"requested_at\").defaultNow(),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  notes: text(\"notes\"),\n});\n\n// Daily close records\nexport const dailyClose = pgTable(\"daily_close\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  closeDate: date(\"close_date\").notNull().unique(),\n  totalCash: decimal(\"total_cash\", { precision: 10, scale: 2 }).notNull(),\n  totalBank: decimal(\"total_bank\", { precision: 10, scale: 2 }).notNull(),\n  expectedCash: decimal(\"expected_cash\", { precision: 10, scale: 2 }).notNull(),\n  expectedBank: decimal(\"expected_bank\", { precision: 10, scale: 2 }).notNull(),\n  expectedTotal: decimal(\"expected_total\", { precision: 10, scale: 2 }).notNull(),\n  actualTotal: decimal(\"actual_total\", { precision: 10, scale: 2 }).notNull(),\n  variance: decimal(\"variance\", { precision: 10, scale: 2 }).default('0'),\n  pdfPath: varchar(\"pdf_path\"), // Object storage path for generated PDF\n  isLocked: boolean(\"is_locked\").default(false),\n  closedBy: varchar(\"closed_by\").references(() => users.id).notNull(),\n  closedAt: timestamp(\"closed_at\").defaultNow(),\n  notes: text(\"notes\"),\n});\n\n// Expenses\nexport const expenses = pgTable(\"expenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  category: varchar(\"category\").notNull(),\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  expenseDate: date(\"expense_date\").notNull(),\n  paymentMethod: paymentMethodEnum(\"payment_method\").notNull(),\n  enteredBy: varchar(\"entered_by\").references(() => users.id).notNull(),\n  whoPaid: varchar(\"who_paid\").references(() => users.id), // Track who actually paid for the expense\n  receiptUrl: varchar(\"receipt_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Digital Diary - Announcements\nexport const announcements = pgTable(\"announcements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  type: announcementTypeEnum(\"type\").notNull(),\n  priority: priorityEnum(\"priority\").default('medium'),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  subjectId: varchar(\"subject_id\").references(() => subjects.id), // Optional - for subject-specific announcements\n  classId: varchar(\"class_id\").references(() => classes.id), // Optional - for class-specific announcements\n  dueDate: date(\"due_date\"), // Optional - for homework/assignments\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Announcement Recipients - Many-to-many relationship\nexport const announcementRecipients = pgTable(\"announcement_recipients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  announcementId: varchar(\"announcement_id\").references(() => announcements.id).notNull(),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  readAt: timestamp(\"read_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Class Schedules - Regular recurring schedules\nexport const classSchedules = pgTable(\"class_schedules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: varchar(\"teacher_id\").references(() => users.id).notNull(),\n  subjectId: varchar(\"subject_id\").references(() => subjects.id).notNull(),\n  dayOfWeek: dayOfWeekEnum(\"day_of_week\").notNull(),\n  startTime: varchar(\"start_time\").notNull(), // Format: \"HH:MM\"\n  endTime: varchar(\"end_time\").notNull(), // Format: \"HH:MM\"\n  location: varchar(\"location\"), // Room number or location\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Schedule Changes - One-time modifications to regular schedules\nexport const scheduleChanges = pgTable(\"schedule_changes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  scheduleId: varchar(\"schedule_id\").references(() => classSchedules.id),\n  teacherId: varchar(\"teacher_id\").references(() => users.id).notNull(),\n  subjectId: varchar(\"subject_id\").references(() => subjects.id).notNull(),\n  changeType: scheduleChangeTypeEnum(\"change_type\").notNull(),\n  affectedDate: date(\"affected_date\").notNull(), // Specific date for the change\n  originalStartTime: varchar(\"original_start_time\"), // For rescheduling\n  originalEndTime: varchar(\"original_end_time\"), // For rescheduling\n  newStartTime: varchar(\"new_start_time\"), // For rescheduling or extra classes\n  newEndTime: varchar(\"new_end_time\"), // For rescheduling or extra classes\n  newLocation: varchar(\"new_location\"), // For location changes\n  reason: text(\"reason\"), // Why the change was made\n  isNotificationSent: boolean(\"is_notification_sent\").default(false),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Student Notifications - Track alerts for schedule changes\nexport const studentNotifications = pgTable(\"student_notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  scheduleChangeId: varchar(\"schedule_change_id\").references(() => scheduleChanges.id).notNull(),\n  message: text(\"message\").notNull(), // Generated notification message\n  status: notificationStatusEnum(\"status\").default('pending'),\n  sentAt: timestamp(\"sent_at\"),\n  readAt: timestamp(\"read_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  studentsAsParent: many(students),\n  enrollmentsAsTeacher: many(enrollments),\n  classesAsTeacher: many(classes),\n  paymentsMade: many(payments),\n  attendanceMarked: many(attendance),\n  assessmentsCreated: many(assessments),\n  gradesEntered: many(grades),\n  payoutRules: many(payoutRules),\n  cashDrawRequests: many(cashDrawRequests),\n  dailyCloses: many(dailyClose),\n  expensesEntered: many(expenses),\n  announcementsCreated: many(announcements),\n}));\n\nexport const studentsRelations = relations(students, ({ one, many }) => ({\n  parent: one(users, {\n    fields: [students.parentId],\n    references: [users.id],\n  }),\n  enrollments: many(enrollments),\n  invoices: many(invoices),\n  payments: many(payments),\n  billingSchedules: many(billingSchedules),\n  attendance: many(attendance),\n  grades: many(grades),\n  announcementRecipients: many(announcementRecipients),\n}));\n\nexport const subjectsRelations = relations(subjects, ({ many }) => ({\n  enrollments: many(enrollments),\n  classes: many(classes),\n  assessments: many(assessments),\n  comboSubjects: many(comboSubjects),\n  announcements: many(announcements),\n}));\n\nexport const subjectCombosRelations = relations(subjectCombos, ({ many }) => ({\n  enrollments: many(enrollments),\n  comboSubjects: many(comboSubjects),\n}));\n\nexport const comboSubjectsRelations = relations(comboSubjects, ({ one }) => ({\n  combo: one(subjectCombos, {\n    fields: [comboSubjects.comboId],\n    references: [subjectCombos.id],\n  }),\n  subject: one(subjects, {\n    fields: [comboSubjects.subjectId],\n    references: [subjects.id],\n  }),\n}));\n\nexport const enrollmentsRelations = relations(enrollments, ({ one, many }) => ({\n  student: one(students, {\n    fields: [enrollments.studentId],\n    references: [students.id],\n  }),\n  subject: one(subjects, {\n    fields: [enrollments.subjectId],\n    references: [subjects.id],\n  }),\n  combo: one(subjectCombos, {\n    fields: [enrollments.comboId],\n    references: [subjectCombos.id],\n  }),\n  teacher: one(users, {\n    fields: [enrollments.teacherId],\n    references: [users.id],\n  }),\n  billingSchedules: many(billingSchedules),\n}));\n\nexport const invoicesRelations = relations(invoices, ({ one, many }) => ({\n  student: one(students, {\n    fields: [invoices.studentId],\n    references: [students.id],\n  }),\n  items: many(invoiceItems),\n  paymentAllocations: many(paymentAllocations),\n  adjustments: many(invoiceAdjustments),\n  parentInvoice: one(invoices, {\n    fields: [invoices.parentInvoiceId],\n    references: [invoices.id],\n  }),\n  childInvoices: many(invoices),\n  createdByUser: one(users, {\n    fields: [invoices.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const invoiceItemsRelations = relations(invoiceItems, ({ one }) => ({\n  invoice: one(invoices, {\n    fields: [invoiceItems.invoiceId],\n    references: [invoices.id],\n  }),\n}));\n\nexport const paymentsRelations = relations(payments, ({ one, many }) => ({\n  student: one(students, {\n    fields: [payments.studentId],\n    references: [students.id],\n  }),\n  allocations: many(paymentAllocations),\n  receivedByUser: one(users, {\n    fields: [payments.receivedBy],\n    references: [users.id],\n  }),\n  refundedByUser: one(users, {\n    fields: [payments.refundedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const paymentAllocationsRelations = relations(paymentAllocations, ({ one }) => ({\n  payment: one(payments, {\n    fields: [paymentAllocations.paymentId],\n    references: [payments.id],\n  }),\n  invoice: one(invoices, {\n    fields: [paymentAllocations.invoiceId],\n    references: [invoices.id],\n  }),\n}));\n\nexport const invoiceAdjustmentsRelations = relations(invoiceAdjustments, ({ one }) => ({\n  invoice: one(invoices, {\n    fields: [invoiceAdjustments.invoiceId],\n    references: [invoices.id],\n  }),\n  appliedByUser: one(users, {\n    fields: [invoiceAdjustments.appliedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const billingSchedulesRelations = relations(billingSchedules, ({ one }) => ({\n  student: one(students, {\n    fields: [billingSchedules.studentId],\n    references: [students.id],\n  }),\n  enrollment: one(enrollments, {\n    fields: [billingSchedules.enrollmentId],\n    references: [enrollments.id],\n  }),\n}));\n\nexport const classesRelations = relations(classes, ({ one, many }) => ({\n  subject: one(subjects, {\n    fields: [classes.subjectId],\n    references: [subjects.id],\n  }),\n  teacher: one(users, {\n    fields: [classes.teacherId],\n    references: [users.id],\n  }),\n  attendance: many(attendance),\n  announcements: many(announcements),\n}));\n\nexport const attendanceRelations = relations(attendance, ({ one }) => ({\n  class: one(classes, {\n    fields: [attendance.classId],\n    references: [classes.id],\n  }),\n  student: one(students, {\n    fields: [attendance.studentId],\n    references: [students.id],\n  }),\n  markedByUser: one(users, {\n    fields: [attendance.markedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const assessmentsRelations = relations(assessments, ({ one, many }) => ({\n  subject: one(subjects, {\n    fields: [assessments.subjectId],\n    references: [subjects.id],\n  }),\n  teacher: one(users, {\n    fields: [assessments.teacherId],\n    references: [users.id],\n  }),\n  grades: many(grades),\n}));\n\nexport const gradesRelations = relations(grades, ({ one }) => ({\n  assessment: one(assessments, {\n    fields: [grades.assessmentId],\n    references: [assessments.id],\n  }),\n  student: one(students, {\n    fields: [grades.studentId],\n    references: [students.id],\n  }),\n  enteredByUser: one(users, {\n    fields: [grades.enteredBy],\n    references: [users.id],\n  }),\n}));\n\nexport const payoutRulesRelations = relations(payoutRules, ({ one }) => ({\n  teacher: one(users, {\n    fields: [payoutRules.teacherId],\n    references: [users.id],\n  }),\n}));\n\nexport const cashDrawRequestsRelations = relations(cashDrawRequests, ({ one }) => ({\n  teacher: one(users, {\n    fields: [cashDrawRequests.teacherId],\n    references: [users.id],\n  }),\n  reviewedByUser: one(users, {\n    fields: [cashDrawRequests.reviewedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const dailyCloseRelations = relations(dailyClose, ({ one }) => ({\n  closedByUser: one(users, {\n    fields: [dailyClose.closedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const expensesRelations = relations(expenses, ({ one }) => ({\n  enteredByUser: one(users, {\n    fields: [expenses.enteredBy],\n    references: [users.id],\n  }),\n}));\n\nexport const announcementsRelations = relations(announcements, ({ one, many }) => ({\n  createdByUser: one(users, {\n    fields: [announcements.createdBy],\n    references: [users.id],\n  }),\n  subject: one(subjects, {\n    fields: [announcements.subjectId],\n    references: [subjects.id],\n  }),\n  class: one(classes, {\n    fields: [announcements.classId],\n    references: [classes.id],\n  }),\n  recipients: many(announcementRecipients),\n}));\n\nexport const announcementRecipientsRelations = relations(announcementRecipients, ({ one }) => ({\n  announcement: one(announcements, {\n    fields: [announcementRecipients.announcementId],\n    references: [announcements.id],\n  }),\n  student: one(students, {\n    fields: [announcementRecipients.studentId],\n    references: [students.id],\n  }),\n}));\n\nexport const classSchedulesRelations = relations(classSchedules, ({ one, many }) => ({\n  teacher: one(users, {\n    fields: [classSchedules.teacherId],\n    references: [users.id],\n  }),\n  subject: one(subjects, {\n    fields: [classSchedules.subjectId],\n    references: [subjects.id],\n  }),\n  scheduleChanges: many(scheduleChanges),\n}));\n\nexport const scheduleChangesRelations = relations(scheduleChanges, ({ one, many }) => ({\n  schedule: one(classSchedules, {\n    fields: [scheduleChanges.scheduleId],\n    references: [classSchedules.id],\n  }),\n  teacher: one(users, {\n    fields: [scheduleChanges.teacherId],\n    references: [users.id],\n  }),\n  subject: one(subjects, {\n    fields: [scheduleChanges.subjectId],\n    references: [subjects.id],\n  }),\n  createdByUser: one(users, {\n    fields: [scheduleChanges.createdBy],\n    references: [users.id],\n  }),\n  notifications: many(studentNotifications),\n}));\n\nexport const studentNotificationsRelations = relations(studentNotifications, ({ one }) => ({\n  student: one(students, {\n    fields: [studentNotifications.studentId],\n    references: [students.id],\n  }),\n  scheduleChange: one(scheduleChanges, {\n    fields: [studentNotifications.scheduleChangeId],\n    references: [scheduleChanges.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const upsertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudentSchema = createInsertSchema(students).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  classLevels: z.array(z.string()).min(1, \"At least one class level is required\"),\n});\n\nexport const insertSubjectSchema = createInsertSchema(subjects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n  receiptNumber: true, // Auto-generated\n});\n\nexport const insertAttendanceSchema = createInsertSchema(attendance).omit({\n  id: true,\n  markedAt: true,\n});\n\nexport const insertAssessmentSchema = createInsertSchema(assessments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGradeSchema = createInsertSchema(grades).omit({\n  id: true,\n  enteredAt: true,\n});\n\nexport const insertAnnouncementSchema = createInsertSchema(announcements).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAnnouncementRecipientSchema = createInsertSchema(announcementRecipients).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClassScheduleSchema = createInsertSchema(classSchedules).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertScheduleChangeSchema = createInsertSchema(scheduleChanges).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStudentNotificationSchema = createInsertSchema(studentNotifications).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Teacher and Staff schemas\nexport const insertTeacherSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  teacherSubjects: z.array(z.string()).optional(),\n  teacherClassLevels: z.array(z.string()).optional(),\n  payoutPercentage: z.number().min(0).max(100).optional(),\n});\n\nexport const insertStaffSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  position: z.string().min(1, \"Position is required\"),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = typeof users.$inferInsert;\nexport type Student = typeof students.$inferSelect;\nexport type InsertStudent = z.infer<typeof insertStudentSchema>;\nexport type Subject = typeof subjects.$inferSelect;\nexport type InsertSubject = z.infer<typeof insertSubjectSchema>;\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type Attendance = typeof attendance.$inferSelect;\nexport type InsertAttendance = z.infer<typeof insertAttendanceSchema>;\nexport type Assessment = typeof assessments.$inferSelect;\nexport type InsertAssessment = z.infer<typeof insertAssessmentSchema>;\nexport type Grade = typeof grades.$inferSelect;\nexport type InsertGrade = z.infer<typeof insertGradeSchema>;\nexport type Class = typeof classes.$inferSelect;\nexport type PayoutRule = typeof payoutRules.$inferSelect;\nexport type CashDrawRequest = typeof cashDrawRequests.$inferSelect;\nexport type DailyClose = typeof dailyClose.$inferSelect;\nexport type Expense = typeof expenses.$inferSelect;\nexport type Announcement = typeof announcements.$inferSelect;\nexport type InsertAnnouncement = z.infer<typeof insertAnnouncementSchema>;\nexport type AnnouncementRecipient = typeof announcementRecipients.$inferSelect;\nexport type InsertAnnouncementRecipient = z.infer<typeof insertAnnouncementRecipientSchema>;\nexport type ClassSchedule = typeof classSchedules.$inferSelect;\nexport type InsertClassSchedule = z.infer<typeof insertClassScheduleSchema>;\nexport type ScheduleChange = typeof scheduleChanges.$inferSelect;\nexport type InsertScheduleChange = z.infer<typeof insertScheduleChangeSchema>;\nexport type StudentNotification = typeof studentNotifications.$inferSelect;\nexport type InsertStudentNotification = z.infer<typeof insertStudentNotificationSchema>;\nexport type InsertTeacher = z.infer<typeof insertTeacherSchema>;\nexport type InsertStaff = z.infer<typeof insertStaffSchema>;\n","size_bytes":34986},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport LoginPage from \"@/pages/LoginPage\";\nimport RoleSelector from \"@/pages/RoleSelector\";\nimport Layout from \"@/components/Layout\";\nimport OfflineBanner from \"@/components/OfflineBanner\";\n\n// Page imports\nimport FinanceDashboard from \"@/pages/finance/Dashboard\";\nimport EnrollmentNew from \"@/pages/finance/EnrollmentNew\";\nimport StudentLedger from \"@/pages/finance/StudentLedger\";\nimport Invoices from \"@/pages/finance/Invoices\";\nimport Receipts from \"@/pages/finance/Receipts\";\nimport DailyClose from \"@/pages/finance/DailyClose\";\nimport CashDrawApprovals from \"@/pages/finance/CashDrawApprovals\";\nimport Reports from \"@/pages/management/Reports\";\nimport AttendanceManagement from \"@/pages/finance/AttendanceManagement\";\nimport PortalLinks from \"@/pages/finance/PortalLinks\";\n\nimport TeacherDashboard from \"@/pages/teacher/Dashboard\";\nimport Attendance from \"@/pages/teacher/Attendance\";\nimport Gradebook from \"@/pages/teacher/Gradebook\";\nimport Earnings from \"@/pages/teacher/Earnings\";\nimport DigitalDiary from \"@/pages/teacher/DigitalDiary\";\nimport ScheduleManager from \"@/pages/teacher/ScheduleManager\";\n\nimport StudentPortal from \"@/pages/StudentPortal\";\n\nimport ManagementDashboard from \"@/pages/management/Dashboard\";\nimport Expenses from \"@/pages/management/Expenses\";\nimport PayoutSummary from \"@/pages/management/PayoutSummary\";\nimport DailyCloseLog from \"@/pages/management/DailyCloseLog\";\nimport StaffManagement from \"@/pages/management/StaffManagement\";\nimport TeacherImpersonation from \"@/pages/management/TeacherImpersonation\";\nimport ReadOnlyTeacherDashboard from \"@/pages/management/ReadOnlyTeacherDashboard\";\nimport StandaloneFinanceDashboard from \"@/pages/management/StandaloneFinanceDashboard\";\n\nfunction AuthenticatedRouter() {\n  const { user } = useAuth();\n  // Get selected role from localStorage - simple and reliable\n  const selectedRole = typeof window !== 'undefined' ? localStorage.getItem('selectedRole') : null;\n\n  // For super admins, skip role selector and go directly to management dashboard\n  if (user?.isSuperAdmin && !selectedRole && window.location.pathname === '/') {\n    localStorage.setItem('selectedRole', 'management');\n    window.location.href = '/dashboard';\n    return null;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={RoleSelector} />\n      \n      {/* Public student portal routes - accessible without role selection */}\n      <Route path=\"/student/:studentId\">\n        {(params) => <StudentPortal studentId={params.studentId} />}\n      </Route>\n      \n      {/* Teacher Impersonation - Standalone Route (Full Page) */}\n      <Route path=\"/teacher-view-readonly\" component={ReadOnlyTeacherDashboard} />\n      \n      {/* Finance Dashboard - Standalone Route (Full Page) */}\n      <Route path=\"/finance-dashboard\" component={StandaloneFinanceDashboard} />\n      \n      {/* All dashboard routes wrapped in Layout */}\n      <Route path=\"/:rest*\">\n        {(params) => {\n          // If no role selected, redirect to home\n          if (!selectedRole) {\n            console.log('No selectedRole found, redirecting to home');\n            window.location.href = '/';\n            return null;\n          }\n          \n          console.log('Router: selectedRole is', selectedRole, 'current path:', window.location.pathname);\n          \n          // Special handling for parent role - no layout/sidebar needed\n          if (selectedRole === 'parent') {\n            return (\n              <Switch>\n                <Route path=\"/dashboard\">\n                  {() => <StudentPortal studentId=\"4067f9d8-8deb-44c5-acaf-9067a0ccca21\" />}\n                </Route>\n                <Route component={NotFound} />\n              </Switch>\n            );\n          }\n\n          return (\n            <Layout selectedRole={selectedRole}>\n              <Switch>\n                {/* Finance Routes */}\n                {selectedRole === 'finance' && (\n                  <>\n                    <Route path=\"/dashboard\" component={FinanceDashboard} />\n                    <Route path=\"/enrollment\" component={EnrollmentNew} />\n                    <Route path=\"/students\" component={StudentLedger} />\n                    <Route path=\"/invoices\" component={Invoices} />\n                    <Route path=\"/receipts\" component={Receipts} />\n                    <Route path=\"/daily-close\" component={DailyClose} />\n                    <Route path=\"/attendance-management\" component={AttendanceManagement} />\n                    <Route path=\"/portal-links\" component={PortalLinks} />\n                  </>\n                )}\n                \n                {/* Teacher Routes */}\n                {selectedRole === 'teacher' && (\n                  <>\n                    <Route path=\"/dashboard\" component={TeacherDashboard} />\n                    <Route path=\"/attendance\" component={Attendance} />\n                    <Route path=\"/gradebook\" component={Gradebook} />\n                    <Route path=\"/earnings\" component={Earnings} />\n                    <Route path=\"/digital-diary\" component={DigitalDiary} />\n                    <Route path=\"/schedule-manager\" component={ScheduleManager} />\n                  </>\n                )}\n                \n                {/* Management Routes */}\n                {selectedRole === 'management' && (\n                  <>\n                    <Route path=\"/dashboard\" component={ManagementDashboard} />\n                    <Route path=\"/expenses\" component={Expenses} />\n                    <Route path=\"/payouts\" component={PayoutSummary} />\n                    <Route path=\"/daily-close-log\" component={DailyCloseLog} />\n                    <Route path=\"/staff-management\" component={StaffManagement} />\n                    <Route path=\"/students\" component={StudentLedger} />\n                    <Route path=\"/reports\" component={Reports} />\n                    <Route path=\"/approvals\" component={CashDrawApprovals} />\n                    <Route path=\"/teacher-impersonation\" component={TeacherImpersonation} />\n                  </>\n                )}\n                \n                <Route component={NotFound} />\n              </Switch>\n            </Layout>\n          );\n        }}\n      </Route>\n    </Switch>\n  );\n}\n\nfunction AppRouter() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <LoginPage onLoginSuccess={() => {\n      // Invalidate queries to refetch user data\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n    }} />;\n  }\n\n  return <AuthenticatedRouter />;\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <OfflineBanner />\n        <Toaster />\n        <AppRouter />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":7540},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/InvoiceWizard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { CalendarIcon, CheckCircle, DollarSign, FileText, GraduationCap, Plus, User } from \"lucide-react\";\n\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface InvoiceWizardProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  editingInvoice?: any;\n}\n\ninterface WizardStep {\n  id: number;\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\ninterface InvoiceFormData {\n  studentId: string;\n  dueDate: string;\n  selectedSubjects: Array<{\n    id: string;\n    name: string;\n    price: number;\n    selected: boolean;\n    discountType: 'none' | 'percentage' | 'amount';\n    discountValue: number;\n    discountReason: string;\n    isCurrentlyEnrolled?: boolean;\n  }>;\n  selectedAddOns: Array<{\n    id: string;\n    name: string;\n    price: number;\n    selected: boolean;\n  }>;\n  notes: string;\n}\n\nexport default function InvoiceWizard({ open, onOpenChange, editingInvoice }: InvoiceWizardProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [formData, setFormData] = useState<InvoiceFormData>({\n    studentId: '',\n    dueDate: '',\n    selectedSubjects: [],\n    selectedAddOns: [],\n    notes: '',\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const steps: WizardStep[] = [\n    { id: 1, title: 'Info', description: 'Student & Basic Info', completed: false },\n    { id: 2, title: 'Subjects', description: 'Core Subjects', completed: false },\n    { id: 3, title: 'Add-ons', description: 'Additional Services', completed: false },\n    { id: 4, title: 'Review', description: 'Review & Create', completed: false },\n  ];\n\n  // Fetch data\n  const { data: students = [] } = useQuery<any[]>({\n    queryKey: ['/api/students'],\n  });\n\n  const { data: subjects = [] } = useQuery<any[]>({\n    queryKey: ['/api/subjects'],\n  });\n\n  const { data: addOns = [] } = useQuery<any[]>({\n    queryKey: ['/api/add-ons'],\n  });\n\n  // Fetch student's current enrollments when student is selected\n  const { data: studentEnrollments = [] } = useQuery<any[]>({\n    queryKey: ['/api/enrollments/student', formData.studentId],\n    enabled: !!formData.studentId,\n  });\n\n  // Get selected student details\n  const selectedStudent = students.find((s: any) => s.id === formData.studentId);\n\n  // Load editing data\n  useEffect(() => {\n    if (editingInvoice && open) {\n      setFormData({\n        studentId: editingInvoice.studentId || '',\n        dueDate: editingInvoice.dueDate || '',\n        selectedSubjects: [],\n        selectedAddOns: [],\n        notes: editingInvoice.notes || '',\n      });\n    }\n  }, [editingInvoice, open]);\n\n  // Reset when dialog closes\n  useEffect(() => {\n    if (!open) {\n      setCurrentStep(1);\n      setFormData({\n        studentId: '',\n        dueDate: '',\n        selectedSubjects: [],\n        selectedAddOns: [],\n        notes: '',\n      });\n    }\n  }, [open]);\n\n  const createInvoiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/invoices', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create invoice');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Invoice created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateInvoiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(`/api/invoices/${editingInvoice?.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to update invoice');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Invoice updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Calculate totals with subject-specific discounts\n  const calculateTotals = () => {\n    let subjectTotal = 0;\n    let totalDiscountAmount = 0;\n    \n    // Calculate subject totals with individual discounts\n    const subjectDetails = formData.selectedSubjects\n      .filter(s => s.selected)\n      .map(subject => {\n        const basePrice = subject.price;\n        let discountAmount = 0;\n        \n        if (subject.discountType === 'percentage') {\n          discountAmount = (basePrice * subject.discountValue) / 100;\n        } else if (subject.discountType === 'amount') {\n          discountAmount = subject.discountValue;\n        }\n        \n        const finalPrice = Math.max(0, basePrice - discountAmount);\n        subjectTotal += finalPrice;\n        totalDiscountAmount += discountAmount;\n        \n        return {\n          ...subject,\n          basePrice,\n          discountAmount,\n          finalPrice\n        };\n      });\n    \n    const addOnTotal = formData.selectedAddOns\n      .filter(a => a.selected)\n      .reduce((sum, a) => sum + a.price, 0);\n    \n    const subtotal = formData.selectedSubjects\n      .filter(s => s.selected)\n      .reduce((sum, s) => sum + s.price, 0) + addOnTotal;\n    \n    const total = subjectTotal + addOnTotal;\n    \n    return { \n      subtotal, \n      discountAmount: totalDiscountAmount, \n      total, \n      subjectTotal, \n      addOnTotal,\n      subjectDetails \n    };\n  };\n\n  const { subtotal, discountAmount, total, subjectDetails } = calculateTotals();\n\n  // Step validation\n  const isStepValid = (step: number) => {\n    switch (step) {\n      case 1:\n        return formData.studentId && formData.dueDate;\n      case 2:\n        return formData.selectedSubjects.some(s => s.selected);\n      case 3:\n        return true; // Add-ons are optional\n      case 4:\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  const handleNext = () => {\n    if (currentStep < 4 && isStepValid(currentStep)) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubjectToggle = (subjectId: string, checked: boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      selectedSubjects: prev.selectedSubjects.map(s =>\n        s.id === subjectId ? { ...s, selected: checked } : s\n      )\n    }));\n  };\n\n  const handleAddOnToggle = (addOnId: string, checked: boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      selectedAddOns: prev.selectedAddOns.map(a =>\n        a.id === addOnId ? { ...a, selected: checked } : a\n      )\n    }));\n  };\n\n  const handleSubmit = () => {\n    // Create items array from selected subjects and add-ons\n    const items = [];\n    \n    // Add selected subjects\n    formData.selectedSubjects\n      .filter(s => s.selected)\n      .forEach(subject => {\n        const discountAmount = subject.discountType === 'percentage' \n          ? (subject.price * subject.discountValue) / 100\n          : subject.discountType === 'amount' \n            ? subject.discountValue \n            : 0;\n        const finalPrice = Math.max(0, subject.price - discountAmount);\n        \n        items.push({\n          type: 'subject',\n          itemId: subject.id,\n          name: subject.name,\n          description: `Subject: ${subject.name}${subject.discountReason ? ` (${subject.discountReason})` : ''}`,\n          quantity: 1,\n          unitPrice: subject.price.toFixed(2),\n          discountType: subject.discountType,\n          discountValue: subject.discountValue,\n          discountAmount: discountAmount.toFixed(2),\n          totalPrice: finalPrice.toFixed(2),\n        });\n      });\n    \n    // Add selected add-ons\n    formData.selectedAddOns\n      .filter(a => a.selected)\n      .forEach(addOn => {\n        items.push({\n          type: 'addon',\n          itemId: addOn.id,\n          name: addOn.name,\n          description: addOn.description || `Add-on: ${addOn.name}`,\n          quantity: 1,\n          unitPrice: addOn.price.toFixed(2),\n          totalPrice: addOn.price.toFixed(2),\n        });\n      });\n\n    const invoiceData = {\n      studentId: formData.studentId,\n      dueDate: formData.dueDate,\n      items: items,\n      subtotal: subtotal.toFixed(2),\n      discountAmount: discountAmount.toFixed(2),\n      total: total.toFixed(2),\n      notes: formData.notes,\n    };\n\n    console.log('Submitting invoice data:', invoiceData);\n\n    if (editingInvoice) {\n      updateInvoiceMutation.mutate(invoiceData);\n    } else {\n      createInvoiceMutation.mutate(invoiceData);\n    }\n  };\n\n  // Initialize subjects based on student's enrollments when student is selected\n  useEffect(() => {\n    if (formData.studentId && subjects.length > 0) {\n      const enrolledSubjectIds = studentEnrollments.map((enrollment: any) => enrollment.subjectId);\n      \n      setFormData(prev => ({\n        ...prev,\n        selectedSubjects: subjects.map((subject: any) => {\n          const isEnrolled = enrolledSubjectIds.includes(subject.id);\n          const enrollment = studentEnrollments.find((e: any) => e.subjectId === subject.id);\n          \n          return {\n            id: subject.id,\n            name: subject.name,\n            price: parseFloat(subject.baseFee),\n            selected: isEnrolled, // Pre-select enrolled subjects\n            discountType: (enrollment?.discountType || 'none') as const,\n            discountValue: enrollment?.discountValue || 0,\n            discountReason: enrollment?.discountReason || '',\n            isCurrentlyEnrolled: isEnrolled, // Track enrollment status\n          };\n        }),\n      }));\n    }\n  }, [formData.studentId, subjects, studentEnrollments]);\n\n  useEffect(() => {\n    if (open && addOns.length > 0 && formData.selectedAddOns.length === 0) {\n      setFormData(prev => ({\n        ...prev,\n        selectedAddOns: addOns.map((addon: any) => ({\n          id: addon.id,\n          name: addon.name,\n          price: parseFloat(addon.price),\n          selected: false,\n        })),\n      }));\n    }\n  }, [open, addOns]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold\">\n            {editingInvoice ? 'Edit Invoice' : 'Create Invoice'}\n          </DialogTitle>\n          <p className=\"text-gray-600\">Generate a new invoice for student billing</p>\n        </DialogHeader>\n\n        {/* Steps Header */}\n        <div className=\"flex items-center justify-between mb-8 px-4\">\n          {steps.map((step, index) => (\n            <div key={step.id} className=\"flex items-center\">\n              <div className=\"flex flex-col items-center\">\n                <div className={`\n                  w-12 h-12 rounded-full flex items-center justify-center font-semibold text-sm\n                  ${currentStep === step.id \n                    ? 'bg-blue-600 text-white' \n                    : currentStep > step.id \n                      ? 'bg-green-500 text-white' \n                      : 'bg-gray-200 text-gray-600'\n                  }\n                `}>\n                  {currentStep > step.id ? (\n                    <CheckCircle className=\"h-6 w-6\" />\n                  ) : (\n                    step.id\n                  )}\n                </div>\n                <div className=\"mt-2 text-center\">\n                  <p className={`font-medium text-sm ${\n                    currentStep === step.id ? 'text-blue-600' : 'text-gray-600'\n                  }`}>\n                    {step.title}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">{step.description}</p>\n                </div>\n              </div>\n              {index < steps.length - 1 && (\n                <div className={`w-16 h-1 mx-4 ${\n                  currentStep > step.id ? 'bg-green-500' : 'bg-gray-200'\n                }`} />\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Step Content */}\n        <div className=\"min-h-[400px]\">\n          {/* Step 1: Student & Basic Info */}\n          {currentStep === 1 && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-gradient-to-r from-blue-50 to-blue-100 p-6 rounded-lg\">\n                <h3 className=\"text-xl font-semibold text-blue-900 mb-4 flex items-center gap-2\">\n                  <User className=\"h-5 w-5\" />\n                  Step 1: Info\n                </h3>\n                <p className=\"text-blue-700 mb-6\">Select the student and set the invoice due date</p>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"student\" className=\"text-blue-900 font-medium\">Select Student</Label>\n                    <Select \n                      value={formData.studentId} \n                      onValueChange={(value) => setFormData(prev => ({ ...prev, studentId: value }))}\n                    >\n                      <SelectTrigger className=\"mt-2\" data-testid=\"select-student\">\n                        <SelectValue placeholder=\"Select a student\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {Array.isArray(students) && students.map((student: any) => (\n                          <SelectItem key={student.id} value={student.id}>\n                            {student.firstName} {student.lastName} (Roll #{student.rollNumber})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"dueDate\" className=\"text-blue-900 font-medium\">Due Date</Label>\n                    <Input\n                      id=\"dueDate\"\n                      type=\"date\"\n                      value={formData.dueDate}\n                      onChange={(e) => setFormData(prev => ({ ...prev, dueDate: e.target.value }))}\n                      className=\"mt-2\"\n                      data-testid=\"input-due-date\"\n                    />\n                  </div>\n                </div>\n\n                {/* Student Info Card */}\n                {selectedStudent && (\n                  <Card className=\"mt-6 bg-white/80\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start gap-4\">\n                        <div className=\"h-12 w-12 rounded-full bg-blue-100 flex items-center justify-center\">\n                          <User className=\"h-6 w-6 text-blue-600\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-semibold text-blue-900 mb-1\">\n                            {selectedStudent.firstName} {selectedStudent.lastName}\n                          </h4>\n                          <div className=\"space-y-1 text-sm text-blue-700\">\n                            <p>Grade: {selectedStudent.classLevel}</p>\n                            <p>Roll Number: {selectedStudent.rollNumber}</p>\n                            <div className=\"flex items-center gap-2 mt-2\">\n                              <Badge className=\"bg-green-100 text-green-800\">Active Student</Badge>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Step 2: Subjects */}\n          {currentStep === 2 && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-gradient-to-r from-purple-50 to-purple-100 p-6 rounded-lg\">\n                <h3 className=\"text-xl font-semibold text-purple-900 mb-4 flex items-center gap-2\">\n                  <GraduationCap className=\"h-5 w-5\" />\n                  Step 2: Subjects\n                </h3>\n                <p className=\"text-purple-700 mb-6\">\n                  {selectedStudent \n                    ? `Select subjects for ${selectedStudent.firstName} ${selectedStudent.lastName}:`\n                    : 'Select core subjects and tuition items:'}\n                </p>\n\n                {/* Currently Enrolled Subjects */}\n                {formData.selectedSubjects.filter(s => s.isCurrentlyEnrolled).length > 0 && (\n                  <div className=\"mb-8\">\n                    <div className=\"flex items-center gap-2 mb-4\">\n                      <Badge className=\"bg-green-100 text-green-800\">Currently Enrolled</Badge>\n                      <h4 className=\"text-lg font-semibold text-purple-900\">\n                        Subjects {selectedStudent?.firstName} is enrolled in\n                      </h4>\n                    </div>\n                    <div className=\"space-y-4\">\n                      {formData.selectedSubjects\n                        .filter(s => s.isCurrentlyEnrolled)\n                        .map((subject, index) => (\n                          <Card key={subject.id} className={`cursor-pointer transition-all duration-200 ${\n                            subject.selected \n                              ? 'bg-green-100 border-green-300 shadow-md ring-2 ring-green-500' \n                              : 'bg-green-50 hover:bg-green-100 border-green-200'\n                          }`}>\n                            <CardContent className=\"p-4\">\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center gap-4\">\n                                  <Checkbox\n                                    checked={subject.selected}\n                                    onCheckedChange={(checked) => handleSubjectToggle(subject.id, checked as boolean)}\n                                    className=\"h-5 w-5\"\n                                    data-testid={`checkbox-enrolled-subject-${index}`}\n                                  />\n                                  <div>\n                                    <p className=\"font-medium text-green-900\">{subject.name}</p>\n                                    <p className=\"text-sm text-green-600\">Currently Enrolled</p>\n                                    {subject.discountType !== 'none' && (\n                                      <p className=\"text-xs text-green-700\">\n                                        Existing discount: {subject.discountType === 'percentage' \n                                          ? `${subject.discountValue}%` \n                                          : `Rs.${subject.discountValue}`}\n                                      </p>\n                                    )}\n                                  </div>\n                                </div>\n                                <div className=\"text-right\">\n                                  <p className=\"text-2xl font-bold text-green-900\">Rs.{subject.price.toLocaleString()}</p>\n                                  {subject.discountType !== 'none' && (\n                                    <p className=\"text-sm text-green-600\">\n                                      After discount: Rs.{(\n                                        subject.discountType === 'percentage' \n                                          ? subject.price - (subject.price * subject.discountValue / 100)\n                                          : subject.price - subject.discountValue\n                                      ).toLocaleString()}\n                                    </p>\n                                  )}\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Available Additional Subjects */}\n                {formData.selectedSubjects.filter(s => !s.isCurrentlyEnrolled).length > 0 && (\n                  <div>\n                    <div className=\"flex items-center gap-2 mb-4\">\n                      <Badge className=\"bg-purple-100 text-purple-800\">Available to Add</Badge>\n                      <h4 className=\"text-lg font-semibold text-purple-900\">Additional subjects available</h4>\n                    </div>\n                    <div className=\"space-y-4\">\n                      {formData.selectedSubjects\n                        .filter(s => !s.isCurrentlyEnrolled)\n                        .map((subject, index) => (\n                          <Card key={subject.id} className={`cursor-pointer transition-all duration-200 ${\n                            subject.selected \n                              ? 'bg-purple-100 border-purple-300 shadow-md ring-2 ring-purple-500' \n                              : 'bg-white/80 hover:bg-purple-50 border-purple-100'\n                          }`}>\n                            <CardContent className=\"p-4\">\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center gap-4\">\n                                  <Checkbox\n                                    checked={subject.selected}\n                                    onCheckedChange={(checked) => handleSubjectToggle(subject.id, checked as boolean)}\n                                    className=\"h-5 w-5\"\n                                    data-testid={`checkbox-additional-subject-${index}`}\n                                  />\n                                  <div>\n                                    <p className=\"font-medium text-purple-900\">{subject.name}</p>\n                                    <p className=\"text-sm text-purple-600\">Additional Subject</p>\n                                  </div>\n                                </div>\n                                <div className=\"text-right\">\n                                  <p className=\"text-2xl font-bold text-purple-900\">Rs.{subject.price.toLocaleString()}</p>\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* No subjects available fallback */}\n                {formData.selectedSubjects.length === 0 && (\n                  <Card className=\"bg-white/80\">\n                    <CardContent className=\"p-8 text-center\">\n                      <Plus className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                      <p className=\"text-gray-500 font-medium\">No subjects available</p>\n                      <p className=\"text-sm text-gray-400\">Subjects will appear when a student is selected</p>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Step 3: Add-ons */}\n          {currentStep === 3 && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-gradient-to-r from-green-50 to-green-100 p-6 rounded-lg\">\n                <h3 className=\"text-xl font-semibold text-green-900 mb-4 flex items-center gap-2\">\n                  <Plus className=\"h-5 w-5\" />\n                  Step 3: Add-ons\n                </h3>\n                <p className=\"text-green-700 mb-6\">Select additional services and materials:</p>\n\n                <div className=\"space-y-4\">\n                  {formData.selectedAddOns.length > 0 ? (\n                    formData.selectedAddOns.map((addon) => (\n                      <Card key={addon.id} className=\"bg-white/80 hover:bg-white transition-colors\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-4\">\n                              <Checkbox\n                                checked={addon.selected}\n                                onCheckedChange={(checked) => handleAddOnToggle(addon.id, checked as boolean)}\n                                className=\"h-5 w-5\"\n                                data-testid={`checkbox-addon-${addon.id}`}\n                              />\n                              <div>\n                                <p className=\"font-medium text-green-900\">{addon.name}</p>\n                                <p className=\"text-sm text-green-600\">Additional Service</p>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <p className=\"text-2xl font-bold text-green-900\">Rs.{addon.price.toLocaleString()}</p>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))\n                  ) : (\n                    <Card className=\"bg-white/80\">\n                      <CardContent className=\"p-8 text-center\">\n                        <Plus className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                        <p className=\"text-gray-500 font-medium\">No add-ons available</p>\n                        <p className=\"text-sm text-gray-400\">Add-ons will appear here when configured</p>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Step 4: Review */}\n          {currentStep === 4 && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-gradient-to-r from-gray-50 to-gray-100 p-6 rounded-lg\">\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-4 flex items-center gap-2\">\n                  <FileText className=\"h-5 w-5\" />\n                  Step 4: Review\n                </h3>\n                <p className=\"text-gray-700 mb-6\">Review & Create Invoice</p>\n\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Invoice Summary */}\n                  <Card className=\"bg-white\">\n                    <CardHeader>\n                      <CardTitle>Invoice Summary</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <p className=\"font-medium text-gray-900\">Student: {selectedStudent?.firstName} {selectedStudent?.lastName}</p>\n                        <p className=\"text-sm text-gray-600\">Due Date: {formData.dueDate}</p>\n                      </div>\n\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 mb-2\">Selected Items:</h4>\n                        <div className=\"space-y-2\">\n                          {subjectDetails.map(subject => (\n                            <div key={subject.id} className=\"text-sm\">\n                              <div className=\"flex justify-between\">\n                                <span>{subject.name}</span>\n                                <span>Rs.{subject.basePrice.toLocaleString()}</span>\n                              </div>\n                              {subject.discountAmount > 0 && (\n                                <div className=\"flex justify-between text-xs text-green-600 ml-4\">\n                                  <span>\n                                    {subject.discountType === 'percentage' \n                                      ? `Discount (${subject.discountValue}%)`\n                                      : `Discount`}\n                                    {subject.discountReason && ` - ${subject.discountReason}`}\n                                  </span>\n                                  <span>-Rs.{subject.discountAmount.toLocaleString()}</span>\n                                </div>\n                              )}\n                              {subject.discountAmount > 0 && (\n                                <div className=\"flex justify-between text-xs font-medium ml-4\">\n                                  <span>Final Price:</span>\n                                  <span>Rs.{subject.finalPrice.toLocaleString()}</span>\n                                </div>\n                              )}\n                            </div>\n                          ))}\n                          {formData.selectedAddOns\n                            .filter(a => a.selected)\n                            .map(addon => (\n                              <div key={addon.id} className=\"flex justify-between text-sm\">\n                                <span>{addon.name}</span>\n                                <span>Rs.{addon.price.toLocaleString()}</span>\n                              </div>\n                            ))}\n                        </div>\n                      </div>\n\n                      <div className=\"border-t pt-4\">\n                        <div className=\"flex justify-between\">\n                          <span>Subtotal:</span>\n                          <span>Rs.{subtotal.toLocaleString()}</span>\n                        </div>\n                        {discountAmount > 0 && (\n                          <div className=\"flex justify-between text-red-600\">\n                            <span>Discount:</span>\n                            <span>-Rs.{discountAmount.toLocaleString()}</span>\n                          </div>\n                        )}\n                        <div className=\"flex justify-between font-bold text-lg border-t mt-2 pt-2\">\n                          <span>Total Amount:</span>\n                          <span>Rs.{total.toLocaleString()}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Subject-Specific Discounts & Notes */}\n                  <Card className=\"bg-white\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <DollarSign className=\"h-5 w-5\" />\n                        Subject Discounts & Notes\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      {/* Subject Discount Controls */}\n                      <div>\n                        <Label className=\"text-base font-medium\">Apply Subject-Specific Discounts</Label>\n                        <p className=\"text-sm text-gray-600 mb-4\">Teachers can give discounts only on their specific subjects.</p>\n                        \n                        <div className=\"space-y-4\">\n                          {formData.selectedSubjects\n                            .filter(s => s.selected)\n                            .map(subject => {\n                              const discountAmount = subject.discountType === 'percentage' \n                                ? (subject.price * subject.discountValue) / 100\n                                : subject.discountType === 'amount' \n                                  ? subject.discountValue \n                                  : 0;\n                              const finalPrice = Math.max(0, subject.price - discountAmount);\n                              \n                              return (\n                                <div key={subject.id} className=\"p-4 border rounded-lg bg-gray-50\">\n                                  <div className=\"flex items-center justify-between mb-3\">\n                                    <div>\n                                      <h4 className=\"font-medium text-gray-800\">{subject.name}</h4>\n                                      <p className=\"text-sm text-gray-600\">Base Fee: Rs.{subject.price.toLocaleString()}/month</p>\n                                    </div>\n                                    <div className=\"text-right\">\n                                      {discountAmount > 0 && (\n                                        <div className=\"text-sm text-green-600 font-medium\">\n                                          Discount: {subject.discountType === 'percentage' \n                                            ? `${subject.discountValue}%` \n                                            : `Rs.${discountAmount.toLocaleString()}`}\n                                        </div>\n                                      )}\n                                      <div className=\"text-lg font-semibold\">\n                                        Final: Rs.{finalPrice.toLocaleString()}\n                                      </div>\n                                    </div>\n                                  </div>\n                                  \n                                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                                    <div>\n                                      <Label htmlFor={`discount-type-${subject.id}`}>Discount Type</Label>\n                                      <Select\n                                        value={subject.discountType}\n                                        onValueChange={(value: 'none' | 'percentage' | 'amount') => {\n                                          setFormData(prev => ({\n                                            ...prev,\n                                            selectedSubjects: prev.selectedSubjects.map(s =>\n                                              s.id === subject.id ? { ...s, discountType: value, discountValue: 0 } : s\n                                            )\n                                          }));\n                                        }}\n                                      >\n                                        <SelectTrigger className=\"mt-1\">\n                                          <SelectValue />\n                                        </SelectTrigger>\n                                        <SelectContent>\n                                          <SelectItem value=\"none\">No Discount</SelectItem>\n                                          <SelectItem value=\"percentage\">Percentage (%)</SelectItem>\n                                          <SelectItem value=\"amount\">Fixed Amount (Rs.)</SelectItem>\n                                        </SelectContent>\n                                      </Select>\n                                    </div>\n                                    \n                                    {subject.discountType !== 'none' && (\n                                      <>\n                                        <div>\n                                          <Label htmlFor={`discount-value-${subject.id}`}>\n                                            {subject.discountType === 'percentage' ? 'Percentage (%)' : 'Amount (Rs.)'}\n                                          </Label>\n                                          <Input\n                                            id={`discount-value-${subject.id}`}\n                                            type=\"number\"\n                                            min=\"0\"\n                                            max={subject.discountType === 'percentage' ? \"100\" : subject.price.toString()}\n                                            placeholder={subject.discountType === 'percentage' ? \"0-100\" : \"0\"}\n                                            value={subject.discountValue || ''}\n                                            onChange={(e) => {\n                                              const value = parseFloat(e.target.value) || 0;\n                                              setFormData(prev => ({\n                                                ...prev,\n                                                selectedSubjects: prev.selectedSubjects.map(s =>\n                                                  s.id === subject.id ? { ...s, discountValue: value } : s\n                                                )\n                                              }));\n                                            }}\n                                            className=\"mt-1\"\n                                          />\n                                        </div>\n                                        \n                                        <div>\n                                          <Label htmlFor={`discount-reason-${subject.id}`}>Reason</Label>\n                                          <Input\n                                            id={`discount-reason-${subject.id}`}\n                                            type=\"text\"\n                                            placeholder=\"e.g. Teacher discount, Sibling discount\"\n                                            value={subject.discountReason || ''}\n                                            onChange={(e) => {\n                                              setFormData(prev => ({\n                                                ...prev,\n                                                selectedSubjects: prev.selectedSubjects.map(s =>\n                                                  s.id === subject.id ? { ...s, discountReason: e.target.value } : s\n                                                )\n                                              }));\n                                            }}\n                                            className=\"mt-1\"\n                                          />\n                                        </div>\n                                      </>\n                                    )}\n                                  </div>\n                                </div>\n                              );\n                            })}\n                        </div>\n                      </div>\n\n                      {/* Notes Section */}\n                      <div>\n                        <Label>Notes (Optional)</Label>\n                        <Textarea\n                          value={formData.notes}\n                          onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                          placeholder=\"Invoice description or notes\"\n                          className=\"mt-2\"\n                          rows={4}\n                        />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Navigation */}\n        <div className=\"flex justify-between pt-6 border-t\">\n          <Button \n            variant=\"outline\" \n            onClick={handlePrevious}\n            disabled={currentStep === 1}\n            data-testid=\"button-previous\"\n          >\n            Previous\n          </Button>\n\n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            \n            {currentStep < 4 ? (\n              <Button \n                onClick={handleNext}\n                disabled={!isStepValid(currentStep)}\n                data-testid=\"button-next\"\n              >\n                Next\n              </Button>\n            ) : (\n              <Button \n                onClick={handleSubmit}\n                disabled={createInvoiceMutation.isPending || updateInvoiceMutation.isPending}\n                data-testid=\"button-create-invoice\"\n              >\n                {(createInvoiceMutation.isPending || updateInvoiceMutation.isPending) \n                  ? \"Processing...\" \n                  : editingInvoice \n                    ? \"Update Invoice\" \n                    : \"Create Invoice\"\n                }\n              </Button>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":40820},"client/src/components/Layout.tsx":{"content":"import Sidebar from \"./Sidebar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport { User, LogOut, ArrowLeft } from \"lucide-react\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n  selectedRole?: string | null;\n}\n\nexport default function Layout({ children, selectedRole }: LayoutProps) {\n  const { user, logout, isLoggingOut } = useAuth();\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  const handleBackToManagement = () => {\n    localStorage.setItem('selectedRole', 'management');\n    window.location.href = '/dashboard';\n  };\n\n  // Show back button for super admins in Finance Dashboard or Teacher Impersonation\n  const showBackToManagement = user?.isSuperAdmin && (selectedRole === 'finance' || selectedRole === 'teacher-impersonation');\n\n  // Get user initials for profile circle\n  const getUserInitials = () => {\n    if (!user?.firstName || !user?.lastName) return 'DU';\n    return `${user.firstName.charAt(0)}${user.lastName.charAt(0)}`.toUpperCase();\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar selectedRole={selectedRole} />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-white border-b px-6 py-4 min-h-[88px] flex items-center\">\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center space-x-4\">\n              <div>\n                <h1 className=\"text-2xl font-semibold text-gray-800\">\n                  {getRoleTitle(selectedRole)}\n                </h1>\n                <nav className=\"text-sm text-gray-600\">\n                  Home {'>'} {selectedRole} {'>'} Dashboard\n                </nav>\n              </div>\n              \n              {/* Back to Management Dashboard Button */}\n              {showBackToManagement && (\n                <Button\n                  onClick={handleBackToManagement}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"ml-4 bg-[#253C8D] text-white border-[#253C8D] hover:bg-[#1e3071] hover:border-[#1e3071]\"\n                  data-testid=\"button-back-to-management\"\n                >\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                  {selectedRole === 'teacher-impersonation' ? 'Back to Management' : 'Back to Management'}\n                </Button>\n              )}\n            </div>\n            \n            {/* User Profile Dropdown */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <div className=\"flex items-center space-x-4 cursor-pointer hover:bg-gray-50 rounded-lg p-2 transition-colors\">\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-medium text-gray-800\">\n                      {user?.firstName} {user?.lastName}\n                    </p>\n                    <p className=\"text-xs text-gray-600 capitalize\">{selectedRole}</p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center\">\n                    <span className=\"text-sm font-medium text-gray-600\">{getUserInitials()}</span>\n                  </div>\n                </div>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-48\">\n                <DropdownMenuItem className=\"cursor-pointer\">\n                  <User className=\"mr-2 h-4 w-4\" />\n                  <span>Profile</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  className=\"cursor-pointer text-red-600 focus:text-red-600\"\n                  onClick={handleLogout}\n                  disabled={isLoggingOut}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>{isLoggingOut ? 'Signing Out...' : 'Sign Out'}</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction getRoleTitle(role?: string | null): string {\n  switch (role) {\n    case 'finance':\n      return 'Finance Dashboard';\n    case 'teacher':\n      return 'Teacher Dashboard';\n    case 'teacher-impersonation':\n      return 'Teacher Dashboard (Read-Only)';\n    case 'parent':\n      return 'Parent Portal';\n    case 'management':\n      return 'Management Dashboard';\n    default:\n      return 'Dashboard';\n  }\n}\n","size_bytes":4707},"client/src/components/OfflineBanner.tsx":{"content":"import { useState, useEffect } from 'react';\n\nexport default function OfflineBanner() {\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n\n  useEffect(() => {\n    const handleOnline = () => setIsOffline(false);\n    const handleOffline = () => setIsOffline(true);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  if (!isOffline) return null;\n\n  return (\n    <div className=\"bg-gradient-to-r from-red-600 to-red-400 text-white px-4 py-2 text-center text-sm z-50\">\n      <i className=\"fas fa-wifi-slash mr-2\"></i>\n      You're offline. Changes will sync when connection is restored.\n    </div>\n  );\n}\n","size_bytes":831},"client/src/components/RoleSelection.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface DashboardOption {\n  role: string;\n  title: string;\n  description: string;\n  icon: string;\n  bgColor: string;\n  textColor: string;\n}\n\nconst dashboardOptions: DashboardOption[] = [\n  {\n    role: 'teacher',\n    title: 'Teacher Dashboard',\n    description: 'Manage classes, attendance, grades, and digital diary',\n    icon: 'fas fa-chalkboard-teacher',\n    bgColor: 'bg-blue-50',\n    textColor: 'text-blue-600'\n  },\n  {\n    role: 'finance',\n    title: 'Finance Dashboard',\n    description: 'Handle enrollment, invoices, payments, and financial reports',\n    icon: 'fas fa-calculator',\n    bgColor: 'bg-green-50',\n    textColor: 'text-green-600'\n  },\n  {\n    role: 'management',\n    title: 'Management Dashboard',\n    description: 'View reports, manage expenses, and oversee operations',\n    icon: 'fas fa-chart-line',\n    bgColor: 'bg-purple-50',\n    textColor: 'text-purple-600'\n  },\n  {\n    role: 'parent',\n    title: 'Parent Portal',\n    description: 'View student progress, fees, and announcements',\n    icon: 'fas fa-users',\n    bgColor: 'bg-orange-50',\n    textColor: 'text-orange-600'\n  }\n];\n\nexport default function RoleSelection() {\n  const [, setLocation] = useLocation();\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [selectedRole, setSelectedRole] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Clear any existing role selection when component mounts\n    localStorage.removeItem('selectedRole');\n  }, []);\n\n  const handleRoleSelect = (role: string) => {\n    try {\n      localStorage.setItem('selectedRole', role);\n      setSelectedRole(role);\n      \n      // Navigate to the selected dashboard\n      setLocation('/dashboard');\n      \n      toast({\n        title: \"Dashboard Selected\",\n        description: `Switched to ${dashboardOptions.find(d => d.role === role)?.title}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to select dashboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getAccessibleDashboards = () => {\n    if (!user) return [];\n    \n    // Return all dashboards for super admins, filtered by their access level\n    if (user.isSuperAdmin) {\n      if (user.isTeacher) {\n        // Super admin teachers can access all dashboards\n        return dashboardOptions;\n      } else {\n        // Super admin management (non-teachers) can't access teacher dashboard\n        return dashboardOptions.filter(d => d.role !== 'teacher');\n      }\n    } else {\n      // Regular users only get their assigned role dashboard\n      return dashboardOptions.filter(d => d.role === user.role);\n    }\n  };\n\n  const getUserRoleDescription = () => {\n    if (!user) return '';\n    \n    if (user.isSuperAdmin) {\n      if (user.isTeacher) {\n        return 'Super Admin (Teacher) - Full Access';\n      } else {\n        return 'Super Admin (Management) - Finance, Management & Parent Access';\n      }\n    } else {\n      const roleNames = {\n        teacher: 'Teacher',\n        finance: 'Finance Staff',\n        parent: 'Parent',\n        management: 'Management Staff'\n      };\n      return `${roleNames[user.role as keyof typeof roleNames]} - Limited Access`;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading your access permissions...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const accessibleDashboards = getAccessibleDashboards();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"max-w-6xl mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n            Welcome to Primax School Management\n          </h1>\n          {user && (\n            <div className=\"mb-6\">\n              <p className=\"text-xl text-gray-700 mb-2\">\n                Hello, {user.firstName} {user.lastName}\n              </p>\n              <Badge variant=\"outline\" className=\"text-sm\">\n                {getUserRoleDescription()}\n              </Badge>\n            </div>\n          )}\n          <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n            {user?.isSuperAdmin \n              ? 'Select which dashboard you would like to access. As a Super Admin, you have access to multiple areas of the system.'\n              : 'Access your designated dashboard below.'\n            }\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {accessibleDashboards.map((dashboard) => (\n            <Card \n              key={dashboard.role}\n              className={`hover:shadow-lg transition-all duration-200 cursor-pointer border-2 hover:border-blue-300 ${dashboard.bgColor}`}\n              onClick={() => handleRoleSelect(dashboard.role)}\n              data-testid={`card-dashboard-${dashboard.role}`}\n            >\n              <CardHeader className=\"text-center pb-2\">\n                <div className={`w-16 h-16 mx-auto mb-4 rounded-full ${dashboard.bgColor} flex items-center justify-center`}>\n                  <i className={`${dashboard.icon} text-2xl ${dashboard.textColor}`}></i>\n                </div>\n                <CardTitle className={`text-lg ${dashboard.textColor}`}>\n                  {dashboard.title}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <CardDescription className=\"text-sm text-gray-600 mb-4\">\n                  {dashboard.description}\n                </CardDescription>\n                <Button \n                  className=\"w-full\"\n                  variant=\"outline\"\n                  data-testid={`button-select-${dashboard.role}`}\n                >\n                  Access Dashboard\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {user?.isSuperAdmin && (\n          <div className=\"mt-12 p-6 bg-blue-50 rounded-lg border border-blue-200\">\n            <div className=\"flex items-center space-x-3 mb-3\">\n              <i className=\"fas fa-info-circle text-blue-600\"></i>\n              <h3 className=\"text-lg font-semibold text-blue-900\">Super Admin Features</h3>\n            </div>\n            <ul className=\"text-blue-800 space-y-1\">\n              {user.isTeacher ? (\n                <>\n                  <li>• Access all dashboards: Teacher, Finance, Management & Parent</li>\n                  <li>• Complete teacher data access for your assigned subjects</li>\n                  <li>• Full financial and administrative oversight</li>\n                </>\n              ) : (\n                <>\n                  <li>• Access Finance, Management & Parent dashboards</li>\n                  <li>• Full financial and administrative oversight</li>\n                  <li>• Cannot access Teacher dashboard (not assigned as teacher)</li>\n                </>\n              )}\n            </ul>\n          </div>\n        )}\n\n        {!user?.isSuperAdmin && (\n          <div className=\"mt-8 text-center\">\n            <p className=\"text-sm text-gray-500\">\n              Need access to additional areas? Contact your system administrator.\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":7808},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport primaxLogo from \"@assets/primax_logo_1756370699409.png\";\n\ninterface SidebarProps {\n  selectedRole?: string | null;\n}\n\nexport default function Sidebar({ selectedRole }: SidebarProps) {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  const handleBackToRoleSelection = () => {\n    localStorage.removeItem('selectedRole');\n    window.location.href = '/';\n  };\n\n  const getNavItems = () => {\n    switch (selectedRole) {\n      case 'finance':\n        return [\n          { path: '/dashboard', icon: 'fas fa-tachometer-alt', label: 'Dashboard' },\n          { path: '/enrollment', icon: 'fas fa-user-plus', label: 'Enrollment' },\n          { path: '/invoices', icon: 'fas fa-file-invoice', label: 'Invoices' },\n          { path: '/receipts', icon: 'fas fa-receipt', label: 'Receipts' },\n          { path: '/students', icon: 'fas fa-users', label: 'Student Ledger' },\n          { path: '/attendance-management', icon: 'fas fa-calendar-check', label: 'Attendance' },\n          { path: '/daily-close', icon: 'fas fa-lock', label: 'Daily Close' },\n          { path: '/portal-links', icon: 'fas fa-link', label: 'Portal Links' },\n        ];\n      case 'teacher':\n        return [\n          { path: '/dashboard', icon: 'fas fa-home', label: 'Today' },\n          { path: '/attendance', icon: 'fas fa-calendar-check', label: 'Attendance' },\n          { path: '/gradebook', icon: 'fas fa-book', label: 'Gradebook' },\n          { path: '/schedule-manager', icon: 'fas fa-calendar-alt', label: 'Schedule Manager' },\n          { path: '/digital-diary', icon: 'fas fa-bullhorn', label: 'Digital Diary' },\n          { path: '/earnings', icon: 'fas fa-dollar-sign', label: 'Earnings' },\n        ];\n      case 'parent':\n        return [\n          { path: '/dashboard', icon: 'fas fa-home', label: 'Student Portal' },\n        ];\n      case 'management':\n        const managementItems = [\n          { path: '/dashboard', icon: 'fas fa-chart-pie', label: 'Overview' },\n          { path: '/expenses', icon: 'fas fa-receipt', label: 'Expenses' },\n          { path: '/payouts', icon: 'fas fa-money-bill', label: 'Payout Summary' },\n          { path: '/staff-management', icon: 'fas fa-users', label: 'Staff Management' },\n          { path: '/students', icon: 'fas fa-user-graduate', label: 'Student Ledger' },\n          { path: '/daily-close-log', icon: 'fas fa-calendar-check', label: 'Daily Close Log' },\n          { path: '/reports', icon: 'fas fa-chart-line', label: 'Reports' },\n          { path: '/approvals', icon: 'fas fa-check-circle', label: 'Cash Draw Approvals' },\n        ];\n        \n        \n        \n        return managementItems;\n      default:\n        return [];\n    }\n  };\n\n  const navItems = getNavItems();\n\n  return (\n    <div className=\"w-64 bg-white shadow-lg flex flex-col\">\n      <div className=\"px-6 py-4 border-b min-h-[88px] flex items-center\">\n        <div className=\"flex items-center space-x-3\">\n          <img \n            src={primaxLogo} \n            alt=\"Primax Logo\" \n            className=\"h-14 w-auto\"\n          />\n        </div>\n      </div>\n      \n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navItems.map((item: any) => (\n          item.onClick ? (\n            <button\n              key={item.label}\n              onClick={item.onClick}\n              className={cn(\n                \"w-full flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md transition-colors min-h-[44px]\",\n                location === item.path && \"bg-blue-50 text-blue-700 border-r-2 border-blue-700\"\n              )}\n              data-testid={`nav-${item.label.toLowerCase().replace(' ', '-')}`}\n            >\n              <i className={`${item.icon} w-5 mr-3`}></i>\n              {item.label}\n            </button>\n          ) : (\n            <Link \n              key={item.path} \n              href={item.path}\n              className={cn(\n                \"flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md transition-colors min-h-[44px]\",\n                location === item.path && \"bg-blue-50 text-blue-700 border-r-2 border-blue-700\"\n              )}\n              data-testid={`nav-${item.label.toLowerCase().replace(' ', '-')}`}\n            >\n              <i className={`${item.icon} w-5 mr-3`}></i>\n              {item.label}\n            </Link>\n          )\n        ))}\n      </nav>\n      \n      <div className=\"p-4 border-t\">\n        <button \n          onClick={handleBackToRoleSelection}\n          className=\"w-full flex items-center px-3 py-2 text-blue-600 hover:bg-blue-50 rounded-md transition-colors min-h-[44px]\"\n          data-testid=\"button-back-to-roles\"\n        >\n          <i className=\"fas fa-arrow-left w-5 mr-3\"></i>\n          Change Role\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4892},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/currency.ts":{"content":"/**\n * Utility functions for formatting Pakistani Rupee currency\n */\n\nexport function formatPKR(amount: number | string): string {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return `Rs. ${numAmount.toLocaleString('en-PK', { \n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2 \n  })}`;\n}\n\nexport function formatPKRWithoutDecimals(amount: number | string): string {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return `Rs. ${Math.floor(numAmount).toLocaleString('en-PK')}`;\n}\n\nexport const PKR_SYMBOL = 'Rs.';\nexport const CURRENCY_CODE = 'PKR';","size_bytes":623},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = '/api/login';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-600 to-blue-800\">\n      <div className=\"min-h-screen flex items-center justify-center px-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-3xl font-bold text-gray-800\">Primax</CardTitle>\n            <CardDescription className=\"text-lg\">School Management System</CardDescription>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            <div className=\"text-center text-gray-600\">\n              <p>A unified workspace for efficient school management</p>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                <i className=\"fas fa-users text-blue-600 text-xl mb-2\"></i>\n                <p className=\"font-medium\">Student Management</p>\n              </div>\n              <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                <i className=\"fas fa-calendar-check text-green-600 text-xl mb-2\"></i>\n                <p className=\"font-medium\">Attendance Tracking</p>\n              </div>\n              <div className=\"text-center p-3 bg-orange-50 rounded-lg\">\n                <i className=\"fas fa-file-invoice text-orange-600 text-xl mb-2\"></i>\n                <p className=\"font-medium\">Billing & Invoices</p>\n              </div>\n              <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\n                <i className=\"fas fa-chart-line text-purple-600 text-xl mb-2\"></i>\n                <p className=\"font-medium\">Analytics & Reports</p>\n              </div>\n            </div>\n            \n            <Button \n              onClick={handleLogin}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-3\"\n              size=\"lg\"\n              data-testid=\"button-sign-in\"\n            >\n              Sign In to Continue\n            </Button>\n            \n            <div className=\"text-center text-xs text-gray-500\">\n              <p>Role-based access for Finance, Teachers, Parents & Management</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2519},"client/src/pages/RoleSelector.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DashboardOption {\n  role: string;\n  title: string;\n  description: string;\n  icon: string;\n  bgColor: string;\n  textColor: string;\n}\n\nconst dashboardOptions: DashboardOption[] = [\n  {\n    role: 'teacher',\n    title: 'Teacher Dashboard',\n    description: 'Manage classes, attendance, grades, and digital diary',\n    icon: 'fas fa-chalkboard-teacher',\n    bgColor: 'bg-blue-50',\n    textColor: 'text-blue-600'\n  },\n  {\n    role: 'finance',\n    title: 'Finance Dashboard',\n    description: 'Handle enrollment, invoices, payments, and financial reports',\n    icon: 'fas fa-calculator',\n    bgColor: 'bg-green-50',\n    textColor: 'text-green-600'\n  },\n  {\n    role: 'management',\n    title: 'Management Dashboard',\n    description: 'View reports, manage expenses, and oversee operations',\n    icon: 'fas fa-chart-line',\n    bgColor: 'bg-purple-50',\n    textColor: 'text-purple-600'\n  },\n  {\n    role: 'parent',\n    title: 'Parent Portal',\n    description: 'View student progress, fees, and announcements',\n    icon: 'fas fa-users',\n    bgColor: 'bg-orange-50',\n    textColor: 'text-orange-600'\n  }\n];\n\n\nexport default function RoleSelector() {\n  const [, setLocation] = useLocation();\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!user || isLoading) return;\n\n    // Clear any existing role selection for super admins\n    localStorage.removeItem('selectedRole');\n    \n    // Note: Non-super admin users are now redirected directly from LoginPage\n    // This page is only for super admins to choose their dashboard\n  }, [user, isLoading]);\n\n  const handleDashboardSelect = (dashboardRole: string, event?: React.MouseEvent) => {\n    // Prevent event bubbling if this was called from a button click\n    if (event) {\n      event.stopPropagation();\n    }\n    \n    try {\n      console.log('=== DASHBOARD SELECTION START ===');\n      console.log('Dashboard clicked:', dashboardRole);\n      console.log('Current user role:', user?.role);\n      console.log('Current user isSuperAdmin:', user?.isSuperAdmin);\n      \n      // Clear any existing role first to avoid conflicts\n      localStorage.removeItem('selectedRole');\n      \n      // Set the new role\n      localStorage.setItem('selectedRole', dashboardRole);\n      console.log('localStorage set to:', dashboardRole);\n      \n      \n      // Show success message\n      toast({\n        title: \"Dashboard Selected\",\n        description: `Opening ${dashboardOptions.find(d => d.role === dashboardRole)?.title}`,\n      });\n      \n      // Direct navigation - no timeout needed\n      console.log('Navigating to /dashboard with role:', dashboardRole);\n      window.location.href = '/dashboard';\n      \n    } catch (error) {\n      console.error('Dashboard selection error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to select dashboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n\n  const getAccessibleDashboards = () => {\n    if (!user) return [];\n    \n    // Use the accessibleDashboards array from the backend if available\n    if (user.accessibleDashboards && user.accessibleDashboards.length > 0) {\n      return dashboardOptions.filter(d => user.accessibleDashboards.includes(d.role));\n    }\n    \n    // Fallback logic for backward compatibility\n    if (user.isSuperAdmin) {\n      if (user.isTeacher) {\n        // Super admin teachers can access all dashboards\n        return dashboardOptions;\n      } else {\n        // Super admin management (non-teachers) can't access teacher dashboard\n        return dashboardOptions.filter(d => d.role !== 'teacher');\n      }\n    } else {\n      // Regular users only get their assigned role dashboard\n      return dashboardOptions.filter(d => d.role === user.role);\n    }\n  };\n\n  const getUserRoleDescription = () => {\n    if (!user) return '';\n    \n    if (user.isSuperAdmin) {\n      if (user.isTeacher) {\n        return 'Super Admin (Teacher) - Full Access';\n      } else {\n        return 'Super Admin (Management) - Finance, Management & Parent Access';\n      }\n    } else {\n      const roleNames = {\n        teacher: 'Teacher',\n        finance: 'Finance Staff',\n        parent: 'Parent',\n        management: 'Management Staff'\n      };\n      return `${roleNames[user.role as keyof typeof roleNames]} - Limited Access`;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading your access permissions...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const accessibleDashboards = getAccessibleDashboards();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12\">\n      <div className=\"max-w-6xl mx-auto px-4\">\n\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n            Welcome to Primax School Management\n          </h1>\n          {user && (\n            <div className=\"mb-6\">\n              <p className=\"text-xl text-gray-700 mb-2\">\n                Hello, {user.firstName} {user.lastName}\n              </p>\n              <Badge variant=\"outline\" className=\"text-sm\">\n                {getUserRoleDescription()}\n              </Badge>\n            </div>\n          )}\n          <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n            Select which dashboard you would like to access. As a Super Admin, you have access to multiple areas of the system.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {accessibleDashboards.map((dashboard) => (\n            <Card \n              key={dashboard.role}\n              className={`hover:shadow-lg transition-all duration-200 cursor-pointer border-2 hover:border-blue-300 ${dashboard.bgColor}`}\n              onClick={() => handleDashboardSelect(dashboard.role)}\n              data-testid={`card-dashboard-${dashboard.role}`}\n            >\n              <CardHeader className=\"text-center pb-2\">\n                <div className={`w-16 h-16 mx-auto mb-4 rounded-full bg-white flex items-center justify-center shadow-sm`}>\n                  <i className={`${dashboard.icon} text-2xl ${dashboard.textColor}`}></i>\n                </div>\n                <CardTitle className={`text-lg ${dashboard.textColor}`}>\n                  {dashboard.title}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <CardDescription className=\"text-sm text-gray-600 mb-4\">\n                  {dashboard.description}\n                </CardDescription>\n                <Button \n                  className=\"w-full\"\n                  variant=\"outline\"\n                  onClick={(e) => handleDashboardSelect(dashboard.role, e)}\n                  data-testid={`button-select-${dashboard.role}`}\n                >\n                  Access Dashboard\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {user?.isSuperAdmin && (\n          <div className=\"mt-12 p-6 bg-blue-50 rounded-lg border border-blue-200\">\n            <div className=\"flex items-center space-x-3 mb-3\">\n              <i className=\"fas fa-info-circle text-blue-600\"></i>\n              <h3 className=\"text-lg font-semibold text-blue-900\">Super Admin Features</h3>\n            </div>\n            <ul className=\"text-blue-800 space-y-1\">\n              {user.isTeacher ? (\n                <>\n                  <li>• Access all dashboards: Teacher, Finance, Management & Parent</li>\n                  <li>• Complete teacher data access for your assigned subjects</li>\n                  <li>• Full financial and administrative oversight</li>\n                </>\n              ) : (\n                <>\n                  <li>• Access Finance, Management & Parent dashboards</li>\n                  <li>• Full financial and administrative oversight</li>\n                  <li>• Cannot access Teacher dashboard (not assigned as teacher)</li>\n                </>\n              )}\n            </ul>\n          </div>\n        )}\n\n        {!user?.isSuperAdmin && (\n          <div className=\"mt-8 text-center\">\n            <p className=\"text-sm text-gray-500\">\n              Need access to additional areas? Contact your system administrator.\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9037},"client/src/pages/StudentPortal.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  User, \n  Calendar, \n  BookOpen, \n  CreditCard, \n  Clock,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  Users,\n  GraduationCap,\n  Phone,\n  Mail,\n  MapPin,\n  TrendingUp,\n  DollarSign,\n  Megaphone,\n  BookOpen as BookIcon\n} from \"lucide-react\";\n\ninterface Student {\n  id: string;\n  rollNumber: string;\n  firstName: string;\n  lastName: string;\n  dateOfBirth: string;\n  gender: string;\n  classLevels: string[];\n  parentId: string | null;\n  profileImageUrl: string | null;\n  isActive: boolean;\n}\n\ninterface Grade {\n  id: string;\n  score: number;\n  maxScore: number;\n  assessmentName: string;\n  subjectName: string;\n  gradedAt: string;\n  feedback?: string;\n}\n\ninterface AttendanceRecord {\n  id: string;\n  attendanceDate: string;\n  status: 'present' | 'absent' | 'late';\n  subjectName: string;\n  classTime: string;\n}\n\ninterface EnrolledSubject {\n  subjectId: string;\n  subjectName: string;\n  subjectCode: string;\n  teacherId: string;\n  teacherFirstName: string;\n  teacherLastName: string;\n  teacherEmail: string;\n  baseFee: string;\n  isActive: boolean;\n}\n\ninterface StudentPortalProps {\n  studentId?: string;\n}\n\ninterface ScheduleNotification {\n  id: string;\n  message: string;\n  status: 'pending' | 'read';\n  createdAt: string;\n  affectedDate: string;\n  changeType: 'cancellation' | 'reschedule' | 'extra_class';\n  subjectName: string;\n}\n\ninterface ScheduleItem {\n  id: string;\n  type: 'regular' | 'cancellation' | 'reschedule' | 'extra_class';\n  subjectId: string;\n  subjectName: string;\n  subjectCode: string;\n  dayOfWeek?: number;\n  startTime: string;\n  endTime: string;\n  location?: string;\n  teacherName: string;\n  affectedDate?: string;\n  reason?: string;\n}\n\nexport default function StudentPortal(props: StudentPortalProps = {}) {\n  const { studentId: urlStudentId } = useParams<{ studentId: string }>();\n  const studentId = props.studentId || urlStudentId;\n  const [selectedSubjectId, setSelectedSubjectId] = useState<string>('all');\n\n  // Fetch student announcements\n  const { data: announcements = [] } = useQuery({\n    queryKey: [\"/api/students\", studentId, \"announcements\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/students/${studentId}/announcements`);\n      return response.json();\n    },\n    enabled: !!studentId,\n  });\n\n  // Fetch student schedule\n  const { data: schedule } = useQuery({\n    queryKey: [\"/api/student\", studentId, \"schedule\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/student/${studentId}/schedule`);\n      return response.ok ? response.json() : { regularSchedules: [], scheduleChanges: [] };\n    },\n    enabled: !!studentId,\n  });\n\n  // Fetch schedule notifications\n  const { data: notifications = [] } = useQuery<ScheduleNotification[]>({\n    queryKey: [\"/api/student\", studentId, \"notifications\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/student/${studentId}/notifications`);\n      return response.ok ? response.json() : [];\n    },\n    enabled: !!studentId,\n  });\n\n  // Fetch student basic information\n  const { data: student, isLoading: studentLoading } = useQuery<Student>({\n    queryKey: [`/api/students/${studentId}`],\n    enabled: !!studentId,\n  });\n\n  // Fetch enrolled subjects with teacher info\n  const { data: enrolledSubjects, isLoading: subjectsLoading } = useQuery<EnrolledSubject[]>({\n    queryKey: [`/api/students/${studentId}/enrolled-subjects`],\n    enabled: !!studentId,\n    queryFn: async () => {\n      const response = await fetch(`/api/students/${studentId}/enrolled-subjects`);\n      return response.ok ? response.json() : [];\n    }\n  });\n\n  // Fetch student grades (either all or for specific subject)\n  const { data: grades, isLoading: gradesLoading } = useQuery<Grade[]>({\n    queryKey: [`/api/students/${studentId}/grades`, selectedSubjectId],\n    enabled: !!studentId,\n    queryFn: async () => {\n      const url = selectedSubjectId === 'all' \n        ? `/api/students/${studentId}/grades`\n        : `/api/students/${studentId}/grades/${selectedSubjectId}`;\n      const response = await fetch(url);\n      return response.ok ? response.json() : [];\n    }\n  });\n\n  // Fetch student attendance (either all or for specific subject)\n  const { data: attendance, isLoading: attendanceLoading } = useQuery<AttendanceRecord[]>({\n    queryKey: [`/api/students/${studentId}/attendance`, selectedSubjectId],\n    enabled: !!studentId,\n    queryFn: async () => {\n      const url = selectedSubjectId === 'all' \n        ? `/api/students/${studentId}/attendance`\n        : `/api/students/${studentId}/attendance/${selectedSubjectId}`;\n      const response = await fetch(url);\n      return response.ok ? response.json() : [];\n    }\n  });\n\n  // Calculate attendance statistics\n  const attendanceArray = Array.isArray(attendance) ? attendance : [];\n  const attendanceStats = {\n    total: attendanceArray.length,\n    present: attendanceArray.filter((a: any) => a.status === 'present').length,\n    late: attendanceArray.filter((a: any) => a.status === 'late').length,\n    absent: attendanceArray.filter((a: any) => a.status === 'absent').length,\n  };\n\n  const attendancePercentage = attendanceStats.total > 0 \n    ? Math.round(((attendanceStats.present + attendanceStats.late) / attendanceStats.total) * 100)\n    : 0;\n\n  // Get current selected subject info\n  const currentSubject = selectedSubjectId === 'all' \n    ? null \n    : enrolledSubjects?.find(s => s.subjectId === selectedSubjectId);\n\n  // Mock subjects with progress for design consistency\n  const subjectProgress = [\n    { name: 'Physics', assessment: 'Final Term Exam', score: 84, maxScore: 100, trend: 'up' },\n    { name: 'Mathematics', assessment: 'Monthly Test', score: 78, maxScore: 100, trend: 'up' },\n    { name: 'Chemistry', assessment: 'Quiz - Organic', score: 44, maxScore: 50, trend: 'stable' },\n    { name: 'English', assessment: 'Essay Writing', score: 36, maxScore: 40, trend: 'up' },\n    { name: 'Biology', assessment: 'Lab Test', score: 35, maxScore: 40, trend: 'down' }\n  ];\n\n  if (studentLoading || subjectsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading student information...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!student) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <User className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Student Not Found</h2>\n          <p className=\"text-gray-600\">The requested student information could not be found.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <div className=\"max-w-6xl mx-auto p-6\">\n        {/* Header Section - Purple Gradient */}\n        <div className=\"bg-gradient-to-r from-blue-600 via-purple-600 to-purple-700 rounded-2xl text-white p-6 mb-6\">\n          <div className=\"flex items-center space-x-6\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"h-20 w-20 rounded-full bg-white/20 flex items-center justify-center overflow-hidden\">\n                {student.profileImageUrl ? (\n                  <img \n                    src={student.profileImageUrl} \n                    alt={`${student.firstName} ${student.lastName}`}\n                    className=\"h-20 w-20 rounded-full object-cover\"\n                  />\n                ) : (\n                  <User className=\"h-10 w-10 text-white\" />\n                )}\n              </div>\n            </div>\n            <div className=\"flex-1\">\n              <h1 className=\"text-3xl font-bold mb-2\">\n                {student.firstName} {student.lastName}\n              </h1>\n              <div className=\"flex items-center space-x-6 text-white/90\">\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"h-4 w-4\" />\n                  <span>ID: {student.rollNumber}</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <GraduationCap className=\"h-4 w-4\" />\n                  <span>Class: {student.classLevels && student.classLevels.length > 0 ? student.classLevels.map(level => level.toUpperCase()).join(', ') : 'No Class'}</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>Academic Year: 2023-24</span>\n                </div>\n              </div>\n              <div className=\"flex gap-4 mt-3\">\n                <Badge className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\">HONORS STUDENT</Badge>\n                <Badge className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\">EXCELLENT ATTENDANCE</Badge>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Subject Selector and Teacher Info */}\n        <div className=\"mb-6 space-y-4\">\n          {/* Subject Selector */}\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <BookOpen className=\"h-5 w-5 text-purple-600\" />\n                <div>\n                  <h3 className=\"font-semibold text-gray-900\">Subject View</h3>\n                  <p className=\"text-sm text-gray-500\">Select a subject to view specific grades and attendance</p>\n                </div>\n              </div>\n              <div className=\"min-w-[250px]\">\n                <Select value={selectedSubjectId} onValueChange={setSelectedSubjectId}>\n                  <SelectTrigger className=\"w-full\">\n                    <SelectValue placeholder=\"Select subject...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">📊 All Subjects Overview</SelectItem>\n                    {enrolledSubjects?.map((subject) => (\n                      <SelectItem key={subject.subjectId} value={subject.subjectId}>\n                        📚 {subject.subjectName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </Card>\n\n          {/* Teacher Contact Info - Only show when specific subject is selected */}\n          {currentSubject && (\n            <Card className=\"p-4 bg-gradient-to-r from-blue-50 to-purple-50 border-l-4 border-purple-500\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"h-12 w-12 rounded-full bg-purple-100 flex items-center justify-center\">\n                    <User className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold text-gray-900 mb-1\">\n                    {currentSubject.subjectName} Teacher\n                  </h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2 text-gray-700\">\n                      <User className=\"h-4 w-4\" />\n                      <span>{currentSubject.teacherFirstName} {currentSubject.teacherLastName}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2 text-gray-700\">\n                      <Mail className=\"h-4 w-4\" />\n                      <a \n                        href={`mailto:${currentSubject.teacherEmail}`}\n                        className=\"text-purple-600 hover:text-purple-800 underline\"\n                      >\n                        {currentSubject.teacherEmail}\n                      </a>\n                    </div>\n                    <div className=\"flex items-center space-x-2 text-gray-700\">\n                      <DollarSign className=\"h-4 w-4\" />\n                      <span>Subject Fee: Rs. {currentSubject.baseFee}/month</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          )}\n        </div>\n\n        {/* Stats Cards Row */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n          <Card className=\"bg-gradient-to-br from-emerald-50 to-emerald-100 border-emerald-200 hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs font-semibold text-emerald-600 mb-1\">OVERALL GRADE</p>\n                  <p className=\"text-2xl font-bold text-emerald-900\">A-</p>\n                  <p className=\"text-xs text-emerald-700\">Class Average</p>\n                </div>\n                <div className=\"bg-emerald-100 p-2 rounded-full\">\n                  <GraduationCap className=\"h-6 w-6 text-emerald-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-cyan-50 to-cyan-100 border-cyan-200 hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs font-semibold text-cyan-600 mb-1\">ATTENDANCE</p>\n                  <p className=\"text-2xl font-bold text-cyan-900\">{attendancePercentage}%</p>\n                  <p className=\"text-xs text-cyan-700\">{attendanceStats.present} of {attendanceStats.total} Days</p>\n                </div>\n                <div className=\"bg-cyan-100 p-2 rounded-full\">\n                  <CheckCircle className=\"h-6 w-6 text-cyan-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200 hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs font-semibold text-orange-600 mb-1\">FEES DUE</p>\n                  <p className=\"text-2xl font-bold text-orange-900\">Rs.8,000</p>\n                  <p className=\"text-xs text-orange-700\">Due August 30th, 2025</p>\n                </div>\n                <div className=\"bg-orange-100 p-2 rounded-full\">\n                  <CreditCard className=\"h-6 w-6 text-orange-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-pink-50 to-pink-100 border-pink-200 hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs font-semibold text-pink-600 mb-1\">CLASS RANK</p>\n                  <p className=\"text-2xl font-bold text-pink-900\">7th</p>\n                  <p className=\"text-xs text-pink-700\">of 45 Students</p>\n                </div>\n                <div className=\"bg-pink-100 p-2 rounded-full\">\n                  <TrendingUp className=\"h-6 w-6 text-pink-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Two Column Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Left Column */}\n          <div className=\"space-y-6\">\n            {/* Academic Performance */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center gap-2\">\n                  <BookOpen className=\"h-5 w-5 text-blue-600\" />\n                  <CardTitle>Academic Performance</CardTitle>\n                </div>\n                <p className=\"text-sm text-gray-600\">Recent assessments and subject-wise performance</p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {subjectProgress.map((subject, index) => {\n                  const percentage = Math.round((subject.score / subject.maxScore) * 100);\n                  \n                  return (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-2 h-2 rounded-full bg-blue-500\"></div>\n                          <div>\n                            <p className=\"font-medium text-gray-900\">{subject.name}</p>\n                            <p className=\"text-sm text-gray-600\">{subject.assessment}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right flex items-center gap-2\">\n                          <div>\n                            <p className=\"font-bold text-gray-900\">{subject.score}/{subject.maxScore}</p>\n                            <p className=\"text-sm text-gray-600\">{percentage}%</p>\n                          </div>\n                          {subject.trend === 'up' && <TrendingUp className=\"h-4 w-4 text-green-500\" />}\n                          {subject.trend === 'down' && <TrendingUp className=\"h-4 w-4 text-red-500 rotate-180\" />}\n                        </div>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"h-2 rounded-full bg-gradient-to-r from-blue-500 to-purple-600\"\n                          style={{ width: `${percentage}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </CardContent>\n            </Card>\n\n            {/* Attendance Overview */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-5 w-5 text-green-600\" />\n                  <CardTitle>Attendance Overview</CardTitle>\n                </div>\n                <p className=\"text-sm text-gray-600\">Monthly attendance summary and detailed log</p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-3 gap-4 mb-6\">\n                  <div className=\"text-center p-4 bg-green-50 rounded-xl\">\n                    <CheckCircle className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-green-900\">{attendanceStats.present || 23}</p>\n                    <p className=\"text-sm text-green-700\">PRESENT</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-yellow-50 rounded-xl\">\n                    <Clock className=\"h-8 w-8 text-yellow-600 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-yellow-900\">{attendanceStats.late || 1}</p>\n                    <p className=\"text-sm text-yellow-700\">LATE</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-red-50 rounded-xl\">\n                    <XCircle className=\"h-8 w-8 text-red-600 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-red-900\">{attendanceStats.absent || 1}</p>\n                    <p className=\"text-sm text-red-700\">ABSENT</p>\n                  </div>\n                </div>\n\n                <h4 className=\"font-medium text-gray-700 mb-3\">Recent Attendance Log</h4>\n                <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                  {[\n                    { date: 'Oct 5, 2025', subject: 'Physics', status: 'Present' },\n                    { date: 'Oct 4, 2025', subject: 'Physics', status: 'Late' },\n                    { date: 'Oct 3, 2025', subject: 'Physics', status: 'Present' },\n                    { date: 'Oct 2, 2025', subject: 'Physics', status: 'Absent' },\n                    { date: 'Oct 1, 2025', subject: 'Physics', status: 'Present' }\n                  ].map((record, index) => (\n                    <div key={index} className=\"flex items-center justify-between py-2 px-3 bg-gray-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-900\">{record.date}</p>\n                        <p className=\"text-sm text-gray-600\">{record.subject}</p>\n                      </div>\n                      <Badge \n                        className={\n                          record.status === 'Present' ? 'bg-green-100 text-green-800 border-green-200' :\n                          record.status === 'Late' ? 'bg-yellow-100 text-yellow-800 border-yellow-200' :\n                          'bg-red-100 text-red-800 border-red-200'\n                        }\n                      >\n                        {record.status}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column */}\n          <div className=\"space-y-6\">\n            {/* Fee Status */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center gap-2\">\n                  <CreditCard className=\"h-5 w-5 text-orange-600\" />\n                  <CardTitle>Fee Status</CardTitle>\n                </div>\n                <p className=\"text-sm text-gray-600\">Payment overview and outstanding balance</p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"p-4 bg-gradient-to-r from-orange-50 to-orange-100 border border-orange-200 rounded-xl\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <AlertCircle className=\"h-5 w-5 text-orange-600\" />\n                    <p className=\"font-semibold text-orange-800\">Outstanding Balance</p>\n                  </div>\n                  <p className=\"text-3xl font-bold text-orange-900\">Rs.8,000</p>\n                  <p className=\"text-sm text-orange-700\">Due: August 30th, 2025</p>\n                  <p className=\"text-xs text-orange-600 mt-1\">Invoice: INV001</p>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium text-gray-700 mb-3\">Payment History</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between py-2 px-3 bg-gray-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-900\">INV001</p>\n                        <p className=\"text-sm text-gray-600\">Oct 05, 2025</p>\n                      </div>\n                      <p className=\"font-bold text-green-600\">Rs.12,000</p>\n                    </div>\n                    <div className=\"flex items-center justify-between py-2 px-3 bg-gray-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-900\">INV001</p>\n                        <p className=\"text-sm text-gray-600\">Sep 05, 2025</p>\n                      </div>\n                      <p className=\"font-bold text-green-600\">Rs.16,000</p>\n                    </div>\n                  </div>\n                </div>\n\n                <button className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors\">\n                  Pay Outstanding Balance\n                </button>\n              </CardContent>\n            </Card>\n\n            {/* Digital Diary - Announcements */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center gap-2\">\n                  <Megaphone className=\"h-5 w-5 text-purple-600\" />\n                  <CardTitle>Digital Diary</CardTitle>\n                </div>\n                <p className=\"text-sm text-gray-600\">Messages and announcements from your teachers</p>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {Array.isArray(announcements) && announcements.length > 0 ? (\n                  announcements.slice(0, 4).map((announcement: any) => {\n                    const getAnnouncementStyle = (type: string, priority: string) => {\n                      const styles = {\n                        homework: \"bg-orange-50 border-l-4 border-orange-500\",\n                        notice: \"bg-blue-50 border-l-4 border-blue-500\", \n                        reminder: \"bg-yellow-50 border-l-4 border-yellow-500\",\n                        announcement: \"bg-purple-50 border-l-4 border-purple-500\"\n                      };\n                      return styles[type as keyof typeof styles] || styles.announcement;\n                    };\n\n                    const getAnnouncementTextColor = (type: string) => {\n                      const colors = {\n                        homework: \"text-orange-900\",\n                        notice: \"text-blue-900\",\n                        reminder: \"text-yellow-900\", \n                        announcement: \"text-purple-900\"\n                      };\n                      return colors[type as keyof typeof colors] || colors.announcement;\n                    };\n\n                    const getAnnouncementIcon = (type: string) => {\n                      switch (type) {\n                        case \"homework\": return <BookIcon className=\"h-4 w-4\" />;\n                        case \"notice\": return <AlertCircle className=\"h-4 w-4\" />;\n                        case \"reminder\": return <Clock className=\"h-4 w-4\" />;\n                        default: return <Megaphone className=\"h-4 w-4\" />;\n                      }\n                    };\n\n                    const getPriorityBadge = (priority: string) => {\n                      const variants = {\n                        high: \"destructive\",\n                        medium: \"secondary\", \n                        low: \"outline\"\n                      };\n                      return variants[priority as keyof typeof variants] || \"secondary\";\n                    };\n\n                    return (\n                      <div \n                        key={announcement.id} \n                        className={`p-3 rounded ${getAnnouncementStyle(announcement.type, announcement.priority)}`}\n                        data-testid={`announcement-${announcement.id}`}\n                      >\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <div className=\"flex items-center gap-2\">\n                            {getAnnouncementIcon(announcement.type)}\n                            <div>\n                              <p className={`font-medium ${getAnnouncementTextColor(announcement.type)}`}>\n                                {announcement.title}\n                              </p>\n                              <p className=\"text-xs text-gray-600 capitalize\">\n                                {announcement.type} • {announcement.teacherFirstName} {announcement.teacherLastName}\n                                {announcement.subjectName && ` • ${announcement.subjectName}`}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Badge variant={getPriorityBadge(announcement.priority) as any} className=\"text-xs\">\n                              {announcement.priority}\n                            </Badge>\n                            {!announcement.isRead && (\n                              <div className=\"w-2 h-2 bg-red-500 rounded-full\" title=\"Unread\"></div>\n                            )}\n                          </div>\n                        </div>\n                        <p className=\"text-sm text-gray-700 mb-2\">{announcement.content}</p>\n                        <div className=\"flex justify-between items-center text-xs text-gray-500\">\n                          <span>{new Date(announcement.createdAt).toLocaleDateString()}</span>\n                          {announcement.dueDate && (\n                            <span className=\"flex items-center gap-1\">\n                              <Calendar className=\"h-3 w-3\" />\n                              Due: {new Date(announcement.dueDate).toLocaleDateString()}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Megaphone className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                    <p className=\"text-gray-500 font-medium\">No announcements yet</p>\n                    <p className=\"text-sm text-gray-400\">Your teachers' messages will appear here</p>\n                  </div>\n                )}\n                \n                {Array.isArray(announcements) && announcements.length > 4 && (\n                  <div className=\"text-center pt-2\">\n                    <button className=\"text-sm text-purple-600 hover:text-purple-800 font-medium\">\n                      View All Announcements ({announcements.length})\n                    </button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Schedule & Notifications */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-5 w-5 text-blue-600\" />\n                  <CardTitle>Class Schedule</CardTitle>\n                </div>\n                <p className=\"text-sm text-gray-600\">Your weekly class schedule and schedule updates</p>\n              </CardHeader>\n              <CardContent>\n                {/* Schedule Notifications */}\n                {notifications.length > 0 && (\n                  <div className=\"mb-6\">\n                    <h4 className=\"font-medium text-gray-700 mb-3 flex items-center gap-2\">\n                      <AlertCircle className=\"h-4 w-4 text-orange-500\" />\n                      Schedule Updates ({notifications.filter(n => n.status === 'pending').length} new)\n                    </h4>\n                    <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                      {notifications.slice(0, 5).map((notification) => {\n                        const getNotificationIcon = (type: string) => {\n                          switch (type) {\n                            case \"cancellation\": return <XCircle className=\"h-4 w-4 text-red-500\" />;\n                            case \"reschedule\": return <Clock className=\"h-4 w-4 text-orange-500\" />;\n                            case \"extra_class\": return <Calendar className=\"h-4 w-4 text-green-500\" />;\n                            default: return <AlertCircle className=\"h-4 w-4 text-blue-500\" />;\n                          }\n                        };\n\n                        const getBgColor = (type: string, status: string) => {\n                          const opacity = status === 'read' ? '50' : '100';\n                          switch (type) {\n                            case \"cancellation\": return `bg-red-${opacity} border-red-200`;\n                            case \"reschedule\": return `bg-orange-${opacity} border-orange-200`;\n                            case \"extra_class\": return `bg-green-${opacity} border-green-200`;\n                            default: return `bg-blue-${opacity} border-blue-200`;\n                          }\n                        };\n\n                        return (\n                          <div \n                            key={notification.id}\n                            className={`p-3 rounded-lg border ${getBgColor(notification.changeType, notification.status)} ${notification.status === 'pending' ? 'border-l-4' : ''}`}\n                            data-testid={`notification-${notification.id}`}\n                          >\n                            <div className=\"flex items-start gap-3\">\n                              {getNotificationIcon(notification.changeType)}\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center gap-2 mb-1\">\n                                  <p className=\"font-medium text-gray-900 text-sm\">\n                                    {notification.subjectName}\n                                  </p>\n                                  {notification.status === 'pending' && (\n                                    <div className=\"w-2 h-2 bg-blue-500 rounded-full\" title=\"New notification\"></div>\n                                  )}\n                                </div>\n                                <p className=\"text-sm text-gray-700\">{notification.message}</p>\n                                <p className=\"text-xs text-gray-500 mt-1\">\n                                  {new Date(notification.createdAt).toLocaleDateString()} • \n                                  Affected: {new Date(notification.affectedDate).toLocaleDateString()}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n\n                {/* Weekly Schedule */}\n                <div>\n                  <h4 className=\"font-medium text-gray-700 mb-3\">Weekly Class Schedule</h4>\n                  {schedule?.regularSchedules?.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {(() => {\n                        const dayNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n                        const scheduleByDay: any = {};\n                        \n                        schedule.regularSchedules.forEach((item: any) => {\n                          const day = dayNames[item.dayOfWeek];\n                          if (!scheduleByDay[day]) {\n                            scheduleByDay[day] = [];\n                          }\n                          scheduleByDay[day].push(item);\n                        });\n\n                        // Sort each day's classes by start time\n                        Object.keys(scheduleByDay).forEach(day => {\n                          scheduleByDay[day].sort((a: any, b: any) => a.startTime.localeCompare(b.startTime));\n                        });\n\n                        return dayNames.map(day => (\n                          <div key={day} className=\"border rounded-lg p-3\">\n                            <h5 className=\"font-medium text-gray-800 mb-2\">{day}</h5>\n                            {scheduleByDay[day]?.length > 0 ? (\n                              <div className=\"space-y-2\">\n                                {scheduleByDay[day].map((classItem: any, index: number) => (\n                                  <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                                    <div className=\"flex items-center gap-3\">\n                                      <div className=\"text-sm font-medium text-blue-600\">\n                                        {classItem.startTime} - {classItem.endTime}\n                                      </div>\n                                      <div>\n                                        <p className=\"font-medium text-gray-900\">{classItem.subjectName}</p>\n                                        <p className=\"text-xs text-gray-600\">\n                                          {classItem.teacherName}\n                                          {classItem.location && ` • ${classItem.location}`}\n                                        </p>\n                                      </div>\n                                    </div>\n                                    <Badge variant=\"outline\" className=\"text-xs\">\n                                      {classItem.subjectCode}\n                                    </Badge>\n                                  </div>\n                                ))}\n                              </div>\n                            ) : (\n                              <p className=\"text-sm text-gray-500\">No classes scheduled</p>\n                            )}\n                          </div>\n                        ));\n                      })()}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Calendar className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                      <p className=\"text-gray-500 font-medium\">No schedule available</p>\n                      <p className=\"text-sm text-gray-400\">Your class schedule will appear here once created by teachers</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Contact Information */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center gap-2\">\n                  <Phone className=\"h-5 w-5 text-green-600\" />\n                  <CardTitle>Contact Information</CardTitle>\n                </div>\n                <p className=\"text-sm text-gray-600\">Get in touch with school staff</p>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"p-3 bg-gray-50 rounded-lg\">\n                  <p className=\"font-medium text-gray-900 mb-2\">Class Teacher</p>\n                  <div className=\"space-y-1 text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <User className=\"h-4 w-4 text-gray-500\" />\n                      <span>Ms. Sarah Johnson</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Mail className=\"h-4 w-4 text-gray-500\" />\n                      <span>sarah.johnson@primax.edu</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Phone className=\"h-4 w-4 text-gray-500\" />\n                      <span>+92 XXX-XXX-XXXX</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-4 w-4 text-gray-500\" />\n                      <span>Office: Room 204, Main Building</span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <button className=\"flex items-center justify-center gap-2 bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-3 rounded-lg transition-colors text-sm\">\n                    <Mail className=\"h-4 w-4\" />\n                    Send Message to Teacher\n                  </button>\n                  <button className=\"flex items-center justify-center gap-2 bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-3 rounded-lg transition-colors text-sm\">\n                    <Calendar className=\"h-4 w-4\" />\n                    Schedule Meeting\n                  </button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":39573},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export interface DashboardStats {\n  totalStudents: number;\n  monthlyRevenue: number;\n  pendingFees: number;\n  avgAttendance: number;\n}\n\nexport interface TeacherEarnings {\n  baseAmount: number;\n  extraClasses: number;\n  total: number;\n}\n\nexport interface StudentWithDetails {\n  id: string;\n  firstName: string;\n  lastName: string;\n  rollNumber: string;\n  classLevel: string;\n  outstandingFees: number;\n  attendance: number;\n  avgGrade: string;\n  profileImageUrl?: string;\n}\n\nexport interface ClassSchedule {\n  id: string;\n  name: string;\n  subject: string;\n  startTime: string;\n  endTime: string;\n  status?: 'completed' | 'in-progress' | 'upcoming';\n  attendanceCount?: {\n    present: number;\n    total: number;\n  };\n}\n\nexport interface AttendanceRecord {\n  id: string;\n  studentId: string;\n  status: 'present' | 'absent' | 'late';\n  date: string;\n  classId: string;\n}\n\nexport interface Transaction {\n  id: string;\n  studentName: string;\n  description: string;\n  amount: number;\n  time: string;\n  type: 'payment' | 'fee' | 'enrollment';\n}\n\nexport interface CashDrawRequest {\n  id: string;\n  teacherName: string;\n  amount: number;\n  reason: string;\n  status: 'pending' | 'approved' | 'denied';\n  requestedAt: string;\n}\n","size_bytes":1217},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n        success:\n          \"success group border-green-200 bg-green-50 text-green-800\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4933},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/finance/AttendanceManagement.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Check, X, Clock, QrCode, Users, Calendar, School, ChevronRight } from \"lucide-react\";\nimport QrScanner from \"qr-scanner\";\n\ninterface Student {\n  id: string;\n  firstName: string;\n  lastName: string;\n  rollNumber: string;\n  profileImageUrl?: string;\n}\n\ninterface Class {\n  id: string;\n  name: string;\n  subject: string;\n  startTime: string;\n  endTime: string;\n  dayOfWeek: number;\n  teacherName: string;\n  teacherId: string;\n}\n\ninterface AttendanceRecord {\n  studentId: string;\n  status: 'present' | 'absent' | 'late';\n}\n\nexport default function AttendanceManagement() {\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [selectedClass, setSelectedClass] = useState(\"\");\n  const [attendanceRecords, setAttendanceRecords] = useState<AttendanceRecord[]>([]);\n  const [attendanceMethod, setAttendanceMethod] = useState<'tap' | 'qr'>('tap');\n  const [isScanning, setIsScanning] = useState(false);\n  const [qrScanner, setQrScanner] = useState<QrScanner | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  // Fetch all classes for the selected date\n  const { data: allClasses, isLoading: classesLoading } = useQuery<Class[]>({\n    queryKey: ['/api/classes/all', selectedDate],\n    queryFn: async () => {\n      // This would need to be implemented on the backend\n      const response = await fetch(`/api/classes/all?date=${selectedDate}`);\n      return response.ok ? response.json() : [];\n    }\n  });\n\n  const { data: students, isLoading: studentsLoading } = useQuery<Student[]>({\n    queryKey: ['/api/classes', selectedClass, 'students'],\n    enabled: !!selectedClass,\n  });\n\n  // Get existing attendance for the selected class and date\n  const { data: existingAttendance } = useQuery({\n    queryKey: ['/api/attendance', selectedClass, selectedDate],\n    enabled: !!selectedClass,\n    queryFn: async () => {\n      const response = await fetch(`/api/attendance?classId=${selectedClass}&date=${selectedDate}`);\n      return response.ok ? response.json() : [];\n    }\n  });\n\n  // Update attendance records when existing attendance is loaded\n  useEffect(() => {\n    if (existingAttendance) {\n      const records = existingAttendance.map((att: any) => ({\n        studentId: att.studentId,\n        status: att.status\n      }));\n      setAttendanceRecords(records);\n    }\n  }, [existingAttendance]);\n\n  // Check if attendance has been taken for a class\n  const getClassAttendanceStatus = (classId: string) => {\n    if (classId === selectedClass && existingAttendance && existingAttendance.length > 0) {\n      return 'taken';\n    }\n    return 'not-taken';\n  };\n\n  const submitAttendanceMutation = useMutation({\n    mutationFn: async () => {\n      const promises = attendanceRecords.map(record => \n        apiRequest('POST', '/api/attendance', {\n          classId: selectedClass,\n          studentId: record.studentId,\n          attendanceDate: selectedDate,\n          status: record.status,\n        })\n      );\n      return Promise.all(promises);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Attendance updated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/attendance'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update attendance. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // QR Scanner setup\n  useEffect(() => {\n    if (attendanceMethod === 'qr' && videoRef.current && !qrScanner && isScanning) {\n      const scanner = new QrScanner(\n        videoRef.current,\n        (result: QrScanner.ScanResult) => handleQrScan(result.data),\n        {\n          preferredCamera: 'environment',\n          highlightScanRegion: true,\n          highlightCodeOutline: true,\n        }\n      );\n      setQrScanner(scanner);\n      scanner.start();\n    }\n\n    return () => {\n      if (qrScanner) {\n        qrScanner.stop();\n        qrScanner.destroy();\n        setQrScanner(null);\n      }\n    };\n  }, [attendanceMethod, isScanning]);\n\n  const handleQrScan = (qrData: string) => {\n    try {\n      const studentId = qrData.includes(':') ? qrData.split(':')[0] : qrData;\n      const student = students?.find(s => s.id === studentId || s.rollNumber === qrData);\n      \n      if (student) {\n        markAttendance(student.id, 'present');\n        toast({\n          title: \"Student Scanned\",\n          description: `${student.firstName} ${student.lastName} marked as present`,\n        });\n      } else {\n        toast({\n          title: \"Student Not Found\",\n          description: \"This QR code doesn't match any student in the current class\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Invalid QR Code\",\n        description: \"Unable to read student information from this QR code\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const toggleScanning = () => {\n    if (isScanning && qrScanner) {\n      qrScanner.stop();\n      setIsScanning(false);\n    } else {\n      setIsScanning(true);\n    }\n  };\n\n  const markAttendance = (studentId: string, status: 'present' | 'absent' | 'late') => {\n    setAttendanceRecords(prev => {\n      const existing = prev.find(r => r.studentId === studentId);\n      if (existing) {\n        return prev.map(r => r.studentId === studentId ? { ...r, status } : r);\n      }\n      return [...prev, { studentId, status }];\n    });\n  };\n\n  const undoMark = (studentId: string) => {\n    setAttendanceRecords(prev => prev.filter(r => r.studentId !== studentId));\n  };\n\n  const getStudentStatus = (studentId: string): 'present' | 'absent' | 'late' | undefined => {\n    return attendanceRecords.find(r => r.studentId === studentId)?.status;\n  };\n\n  const handleSubmit = () => {\n    if (!selectedClass) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a class first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    submitAttendanceMutation.mutate();\n  };\n\n  const presentCount = attendanceRecords.filter(r => r.status === 'present').length;\n  const absentCount = attendanceRecords.filter(r => r.status === 'absent').length;\n  const lateCount = attendanceRecords.filter(r => r.status === 'late').length;\n  const totalStudents = students?.length || 0;\n  const unmarkedCount = totalStudents - attendanceRecords.length;\n\n  // Group classes by teacher\n  const classesByTeacher = allClasses?.reduce((acc, cls) => {\n    if (!acc[cls.teacherId]) {\n      acc[cls.teacherId] = {\n        teacherName: cls.teacherName,\n        classes: []\n      };\n    }\n    acc[cls.teacherId].classes.push(cls);\n    return acc;\n  }, {} as Record<string, { teacherName: string; classes: Class[] }>) || {};\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <School className=\"h-5 w-5\" />\n                Attendance\n                <span className=\"text-sm font-normal text-gray-500\">(Front Desk)</span>\n              </CardTitle>\n              <p className=\"text-gray-600 mt-1 flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4\" />\n                Manage attendance for all classes and teachers\n              </p>\n            </div>\n            {selectedClass && (\n              <div className=\"grid grid-cols-4 gap-4 text-center\">\n                <div>\n                  <div className=\"flex items-center justify-center gap-1\">\n                    <Check className=\"h-4 w-4 text-green-600\" />\n                    <span className=\"text-sm text-gray-600\">Present</span>\n                  </div>\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    {presentCount}\n                  </p>\n                </div>\n                <div>\n                  <div className=\"flex items-center justify-center gap-1\">\n                    <X className=\"h-4 w-4 text-red-600\" />\n                    <span className=\"text-sm text-gray-600\">Absent</span>\n                  </div>\n                  <p className=\"text-2xl font-bold text-red-600\">\n                    {absentCount}\n                  </p>\n                </div>\n                <div>\n                  <div className=\"flex items-center justify-center gap-1\">\n                    <Clock className=\"h-4 w-4 text-yellow-600\" />\n                    <span className=\"text-sm text-gray-600\">Late</span>\n                  </div>\n                  <p className=\"text-2xl font-bold text-yellow-600\">\n                    {lateCount}\n                  </p>\n                </div>\n                <div>\n                  <div className=\"flex items-center justify-center gap-1\">\n                    <Users className=\"h-4 w-4 text-gray-600\" />\n                    <span className=\"text-sm text-gray-600\">Unmarked</span>\n                  </div>\n                  <p className=\"text-2xl font-bold text-gray-600\">\n                    {unmarkedCount}\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {/* Date Selection */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Select Date</label>\n              <input\n                type=\"date\"\n                value={selectedDate}\n                onChange={(e) => setSelectedDate(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                data-testid=\"input-date\"\n              />\n            </div>\n          </div>\n\n          {/* Classes by Teacher */}\n          {classesLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {[1, 2, 3, 4, 5, 6].map((i) => (\n                <div key={i} className=\"animate-pulse bg-gray-200 h-24 rounded-lg\"></div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {Object.entries(classesByTeacher).map(([teacherId, { teacherName, classes }]) => (\n                <div key={teacherId}>\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-3 flex items-center gap-2\">\n                    <Users className=\"h-5 w-5\" />\n                    {teacherName}\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {classes.map((classItem) => (\n                      <Card \n                        key={classItem.id}\n                        className={`cursor-pointer transition-all ${\n                          selectedClass === classItem.id \n                            ? 'bg-blue-50 border-blue-500 shadow-md' \n                            : 'hover:bg-gray-50 border-gray-200'\n                        }`}\n                        onClick={() => {\n                          setSelectedClass(classItem.id);\n                          setAttendanceRecords([]);\n                        }}\n                        data-testid={`card-class-${classItem.id}`}\n                      >\n                        <CardContent className=\"pt-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <div className=\"flex items-center gap-2\">\n                                <h4 className=\"font-medium text-gray-900\">{classItem.subject}</h4>\n                                {/* Show attendance status */}\n                                {existingAttendance && existingAttendance.length > 0 && selectedClass === classItem.id && (\n                                  <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                                    ✓ Taken\n                                  </Badge>\n                                )}\n                              </div>\n                              <p className=\"text-sm text-gray-600\">\n                                {classItem.startTime} - {classItem.endTime}\n                              </p>\n                              <p className=\"text-xs text-gray-500\">\n                                {classItem.name}\n                              </p>\n                            </div>\n                            <ChevronRight \n                              className={`h-5 w-5 ${\n                                selectedClass === classItem.id ? 'text-blue-500' : 'text-gray-400'\n                              }`} \n                            />\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              ))}\n              \n              {Object.keys(classesByTeacher).length === 0 && (\n                <div className=\"text-center py-12\">\n                  <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Classes Found</h3>\n                  <p className=\"text-gray-600\">\n                    No classes are scheduled for {new Date(selectedDate).toLocaleDateString()}\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Attendance Interface */}\n          {selectedClass && (\n            <Tabs value={attendanceMethod} onValueChange={(value) => setAttendanceMethod(value as 'tap' | 'qr')} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"tap\" className=\"flex items-center gap-2\">\n                  <Users className=\"h-4 w-4\" />\n                  Tap Interface\n                </TabsTrigger>\n                <TabsTrigger value=\"qr\" className=\"flex items-center gap-2\">\n                  <QrCode className=\"h-4 w-4\" />\n                  QR Scanner\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"tap\" className=\"mt-6\">\n                {studentsLoading ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {[1, 2, 3, 4, 5, 6].map((i) => (\n                      <div key={i} className=\"animate-pulse bg-gray-200 h-20 rounded-lg\"></div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {students?.map((student) => {\n                      const status = getStudentStatus(student.id);\n                      const isMarked = !!status;\n                      \n                      return (\n                        <Card \n                          key={student.id} \n                          className={`${\n                            status === 'present' ? 'bg-green-50 border-green-200' :\n                            status === 'absent' ? 'bg-red-50 border-red-200' :\n                            status === 'late' ? 'bg-yellow-50 border-yellow-200' :\n                            'border-gray-200'\n                          }`}\n                        >\n                          <CardContent className=\"pt-4\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center\">\n                                <div className=\"w-10 h-10 bg-gray-300 rounded-full mr-3 flex items-center justify-center text-xs font-bold text-gray-700\">\n                                  {student.rollNumber}\n                                </div>\n                                <div>\n                                  <p className=\"text-sm font-medium text-gray-900\">\n                                    {student.firstName} {student.lastName}\n                                  </p>\n                                  <p className=\"text-xs text-gray-500\">\n                                    Roll: {student.rollNumber}\n                                  </p>\n                                </div>\n                              </div>\n                              \n                              {isMarked ? (\n                                <div className=\"flex items-center space-x-1\">\n                                  <Badge \n                                    className={\n                                      status === 'present' ? 'bg-green-100 text-green-800' :\n                                      status === 'absent' ? 'bg-red-100 text-red-800' :\n                                      'bg-yellow-100 text-yellow-800'\n                                    }\n                                  >\n                                    {status}\n                                  </Badge>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    onClick={() => undoMark(student.id)}\n                                    className=\"w-6 h-6 p-0\"\n                                  >\n                                    <X className=\"h-3 w-3\" />\n                                  </Button>\n                                </div>\n                              ) : (\n                                <div className=\"flex space-x-1\">\n                                  <Button\n                                    size=\"sm\"\n                                    className=\"w-8 h-8 p-0 bg-green-600 hover:bg-green-700\"\n                                    onClick={() => markAttendance(student.id, 'present')}\n                                    title=\"Mark as Present\"\n                                  >\n                                    <Check className=\"h-3 w-3\" />\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    className=\"w-8 h-8 p-0 bg-red-600 hover:bg-red-700\"\n                                    onClick={() => markAttendance(student.id, 'absent')}\n                                    title=\"Mark as Absent\"\n                                  >\n                                    <X className=\"h-3 w-3\" />\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    className=\"w-8 h-8 p-0 bg-yellow-600 hover:bg-yellow-700\"\n                                    onClick={() => markAttendance(student.id, 'late')}\n                                    title=\"Mark as Late\"\n                                  >\n                                    <Clock className=\"h-3 w-3\" />\n                                  </Button>\n                                </div>\n                              )}\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"qr\" className=\"mt-6\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"text-center mb-4\">\n                      <QrCode className=\"h-12 w-12 text-gray-400 mx-auto mb-2\" />\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">QR Code Scanner</h3>\n                      <p className=\"text-gray-600 mb-4\">\n                        Scan student QR codes to automatically mark attendance as present\n                      </p>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-center\">\n                        <Button \n                          onClick={toggleScanning}\n                          className={isScanning ? \"bg-red-600 hover:bg-red-700\" : \"bg-green-600 hover:bg-green-700\"}\n                        >\n                          {isScanning ? (\n                            <>\n                              <X className=\"h-4 w-4 mr-2\" />\n                              Stop Scanner\n                            </>\n                          ) : (\n                            <>\n                              <QrCode className=\"h-4 w-4 mr-2\" />\n                              Start Scanner\n                            </>\n                          )}\n                        </Button>\n                      </div>\n                      \n                      {isScanning && (\n                        <div className=\"relative\">\n                          <video \n                            ref={videoRef}\n                            className=\"w-full max-w-md mx-auto rounded-lg border-2 border-dashed border-gray-300\"\n                            style={{ aspectRatio: '1/1' }}\n                          />\n                          <div className=\"text-center mt-2\">\n                            <p className=\"text-sm text-gray-600\">\n                              Hold student QR codes within the camera view\n                            </p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Submit Button */}\n              <div className=\"flex justify-end pt-6\">\n                <Button\n                  onClick={handleSubmit}\n                  disabled={submitAttendanceMutation.isPending || attendanceRecords.length === 0}\n                  className=\"min-w-[200px]\"\n                >\n                  {submitAttendanceMutation.isPending ? 'Updating...' : 'Update Attendance'}\n                </Button>\n              </div>\n            </Tabs>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":22631},"client/src/pages/finance/CashDrawApprovals.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { CashDrawRequest } from \"@shared/schema\";\n\nexport default function CashDrawApprovals() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedRequest, setSelectedRequest] = useState<CashDrawRequest | null>(null);\n  const [reviewNotes, setReviewNotes] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: requests, isLoading } = useQuery<CashDrawRequest[]>({\n    queryKey: ['/api/cash-draw-requests'],\n  });\n\n  const updateRequestMutation = useMutation({\n    mutationFn: async ({ id, status, notes }: { id: string; status: string; notes: string }) => {\n      return await apiRequest('PATCH', `/api/cash-draw-requests/${id}`, {\n        status,\n        notes,\n      });\n    },\n    onSuccess: (_, variables) => {\n      toast({\n        title: \"Success\", \n        description: `Request ${variables.status} successfully!`,\n        variant: \"success\" as any,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/cash-draw-requests'] });\n      setSelectedRequest(null);\n      setReviewNotes(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update request. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredRequests = requests?.filter(request => {\n    const matchesSearch = searchQuery === \"\" || \n      request.teacherName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      request.reason.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || request.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  const handleApprove = (request: CashDrawRequest) => {\n    updateRequestMutation.mutate({\n      id: request.id,\n      status: 'approved',\n      notes: reviewNotes,\n    });\n  };\n\n  const handleDeny = (request: CashDrawRequest) => {\n    updateRequestMutation.mutate({\n      id: request.id,\n      status: 'denied',\n      notes: reviewNotes,\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'bg-green-100 text-green-800';\n      case 'denied':\n        return 'bg-red-100 text-red-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'fas fa-check-circle text-green-600';\n      case 'denied':\n        return 'fas fa-times-circle text-red-600';\n      case 'pending':\n        return 'fas fa-clock text-yellow-600';\n      default:\n        return 'fas fa-question-circle text-gray-600';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const pendingCount = requests?.filter(r => r.status === 'pending').length || 0;\n  const totalAmount = filteredRequests.reduce((sum, r) => sum + Number(r.amount), 0);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-yellow-100 rounded-lg\">\n                <i className=\"fas fa-clock text-yellow-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Pending Requests</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-pending-requests\">\n                  {pendingCount}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <i className=\"fas fa-money-bill-wave text-blue-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Amount</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-total-amount\">\n                  Rs. {totalAmount.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <i className=\"fas fa-list text-green-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Requests</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-total-requests\">\n                  {requests?.length || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Cash Draw Requests</CardTitle>\n            <div className=\"flex space-x-3\">\n              <div className=\"relative\">\n                <Input\n                  placeholder=\"Search requests...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-requests\"\n                />\n                <i className=\"fas fa-search absolute left-3 top-3 text-gray-400\"></i>\n              </div>\n              <select\n                value={statusFilter}\n                onChange={(e) => setStatusFilter(e.target.value)}\n                className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                data-testid=\"select-status-filter\"\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"pending\">Pending</option>\n                <option value=\"approved\">Approved</option>\n                <option value=\"denied\">Denied</option>\n              </select>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Teacher</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Amount</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Reason</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Requested</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Status</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {filteredRequests.length > 0 ? filteredRequests.map((request) => (\n                  <tr key={request.id} className=\"hover:bg-gray-50\" data-testid={`row-request-${request.id}`}>\n                    <td className=\"px-4 py-3\">\n                      <div className=\"flex items-center\">\n                        <i className=\"fas fa-user-tie text-gray-400 mr-3\"></i>\n                        <div>\n                          <p className=\"font-medium text-gray-900\" data-testid={`text-teacher-${request.id}`}>\n                            {request.teacherName || 'Teacher Name'}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">ID: {request.teacherId}</p>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <span className=\"font-semibold text-gray-900\" data-testid={`text-amount-${request.id}`}>\n                        Rs. {Number(request.amount).toLocaleString()}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <p className=\"text-gray-700 max-w-xs truncate\" data-testid={`text-reason-${request.id}`}>\n                        {request.reason}\n                      </p>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <div className=\"text-sm\" data-testid={`text-requested-${request.id}`}>\n                        <p>{new Date(request.requestedAt).toLocaleDateString()}</p>\n                        <p className=\"text-gray-500\">{new Date(request.requestedAt).toLocaleTimeString()}</p>\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <Badge className={getStatusColor(request.status)} data-testid={`badge-status-${request.id}`}>\n                        <i className={`${getStatusIcon(request.status)} mr-1`}></i>\n                        {request.status.toUpperCase()}\n                      </Badge>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      {request.status === 'pending' ? (\n                        <div className=\"flex space-x-2\">\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button \n                                size=\"sm\" \n                                className=\"bg-green-600 hover:bg-green-700\"\n                                onClick={() => setSelectedRequest(request)}\n                                data-testid={`button-approve-${request.id}`}\n                              >\n                                <i className=\"fas fa-check mr-1\"></i>\n                                Approve\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent>\n                              <DialogHeader>\n                                <DialogTitle>Approve Cash Draw Request</DialogTitle>\n                              </DialogHeader>\n                              <div className=\"space-y-4\">\n                                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                                  <p><strong>Teacher:</strong> {request.teacherName}</p>\n                                  <p><strong>Amount:</strong> Rs. {Number(request.amount).toLocaleString()}</p>\n                                  <p><strong>Reason:</strong> {request.reason}</p>\n                                </div>\n                                <div>\n                                  <Label htmlFor=\"approveNotes\">Approval Notes (Optional)</Label>\n                                  <Textarea\n                                    id=\"approveNotes\"\n                                    placeholder=\"Add any notes for this approval...\"\n                                    value={reviewNotes}\n                                    onChange={(e) => setReviewNotes(e.target.value)}\n                                    data-testid=\"textarea-approve-notes\"\n                                  />\n                                </div>\n                                <div className=\"flex justify-end space-x-2\">\n                                  <Button variant=\"outline\" onClick={() => setSelectedRequest(null)}>\n                                    Cancel\n                                  </Button>\n                                  <Button \n                                    onClick={() => handleApprove(request)}\n                                    disabled={updateRequestMutation.isPending}\n                                    data-testid=\"button-confirm-approve\"\n                                  >\n                                    {updateRequestMutation.isPending ? 'Processing...' : 'Approve Request'}\n                                  </Button>\n                                </div>\n                              </div>\n                            </DialogContent>\n                          </Dialog>\n\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button \n                                size=\"sm\" \n                                variant=\"destructive\"\n                                onClick={() => setSelectedRequest(request)}\n                                data-testid={`button-deny-${request.id}`}\n                              >\n                                <i className=\"fas fa-times mr-1\"></i>\n                                Deny\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent>\n                              <DialogHeader>\n                                <DialogTitle>Deny Cash Draw Request</DialogTitle>\n                              </DialogHeader>\n                              <div className=\"space-y-4\">\n                                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                                  <p><strong>Teacher:</strong> {request.teacherName}</p>\n                                  <p><strong>Amount:</strong> Rs. {Number(request.amount).toLocaleString()}</p>\n                                  <p><strong>Reason:</strong> {request.reason}</p>\n                                </div>\n                                <div>\n                                  <Label htmlFor=\"denyNotes\">Reason for Denial *</Label>\n                                  <Textarea\n                                    id=\"denyNotes\"\n                                    placeholder=\"Provide a reason for denying this request...\"\n                                    value={reviewNotes}\n                                    onChange={(e) => setReviewNotes(e.target.value)}\n                                    required\n                                    data-testid=\"textarea-deny-notes\"\n                                  />\n                                </div>\n                                <div className=\"flex justify-end space-x-2\">\n                                  <Button variant=\"outline\" onClick={() => setSelectedRequest(null)}>\n                                    Cancel\n                                  </Button>\n                                  <Button \n                                    variant=\"destructive\"\n                                    onClick={() => handleDeny(request)}\n                                    disabled={!reviewNotes.trim() || updateRequestMutation.isPending}\n                                    data-testid=\"button-confirm-deny\"\n                                  >\n                                    {updateRequestMutation.isPending ? 'Processing...' : 'Deny Request'}\n                                  </Button>\n                                </div>\n                              </div>\n                            </DialogContent>\n                          </Dialog>\n                        </div>\n                      ) : (\n                        <div className=\"text-sm text-gray-500\">\n                          {request.reviewedAt && (\n                            <>\n                              <p>Reviewed: {new Date(request.reviewedAt).toLocaleDateString()}</p>\n                              {request.notes && <p className=\"text-xs\">Notes: {request.notes}</p>}\n                            </>\n                          )}\n                        </div>\n                      )}\n                    </td>\n                  </tr>\n                )) : (\n                  <tr>\n                    <td colSpan={6} className=\"px-4 py-8 text-center text-gray-500\">\n                      <i className=\"fas fa-inbox text-4xl mb-4\"></i>\n                      <p>No cash draw requests found</p>\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":16938},"client/src/pages/finance/DailyClose.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { DailyClose } from \"@shared/schema\";\n\nexport default function DailyClose() {\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [calendarDate, setCalendarDate] = useState<Date>(new Date());\n  const [totalCash, setTotalCash] = useState(\"\");\n  const [totalBank, setTotalBank] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Function to handle date selection\n  const handleDateSelect = (date: Date | undefined) => {\n    if (date) {\n      const dateString = date.toISOString().split('T')[0];\n      setSelectedDate(dateString);\n      setCalendarDate(date);\n      // Clear form when changing dates\n      setTotalCash(\"\");\n      setTotalBank(\"\");\n      setNotes(\"\");\n    }\n  };\n\n  // Navigate to previous day\n  const goToPreviousDay = () => {\n    const currentDate = new Date(selectedDate);\n    currentDate.setDate(currentDate.getDate() - 1);\n    const newDateString = currentDate.toISOString().split('T')[0];\n    setSelectedDate(newDateString);\n    setCalendarDate(currentDate);\n    // Clear form when changing dates\n    setTotalCash(\"\");\n    setTotalBank(\"\");\n    setNotes(\"\");\n  };\n\n  // Navigate to next day (only if not going into future)\n  const goToNextDay = () => {\n    const currentDate = new Date(selectedDate);\n    currentDate.setDate(currentDate.getDate() + 1);\n    const today = new Date().toISOString().split('T')[0];\n    const newDateString = currentDate.toISOString().split('T')[0];\n    \n    // Only allow navigation if not going into future\n    if (newDateString <= today) {\n      setSelectedDate(newDateString);\n      setCalendarDate(currentDate);\n      // Clear form when changing dates\n      setTotalCash(\"\");\n      setTotalBank(\"\");\n      setNotes(\"\");\n    }\n  };\n\n  const { data: dailyCloseRecord, isLoading } = useQuery<DailyClose | null>({\n    queryKey: ['/api/daily-close', selectedDate],\n  });\n\n  const { data: payments } = useQuery({\n    queryKey: ['/api/payments'],\n  });\n\n  const createDailyCloseMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest('POST', '/api/daily-close', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Daily close completed successfully!\",\n        variant: \"success\" as any,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/daily-close'] });\n      setTotalCash(\"\");\n      setTotalBank(\"\");\n      setNotes(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to complete daily close. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const lockDayMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest('POST', '/api/daily-close/lock', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Daily close locked and finalized successfully!\",\n        variant: \"success\" as any,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/daily-close'] });\n      setTotalCash(\"\");\n      setTotalBank(\"\");\n      setNotes(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to lock daily close. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = () => {\n    const cash = parseFloat(totalCash) || 0;\n    const bank = parseFloat(totalBank) || 0;\n    const variance = cash + bank - (expectedTotal || 0);\n\n    createDailyCloseMutation.mutate({\n      closeDate: selectedDate,\n      totalCash: cash,\n      totalBank: bank,\n      expectedCash,\n      expectedBank,\n      expectedTotal,\n      actualTotal: cash + bank,\n      variance,\n      notes,\n    });\n  };\n\n  const handleLockDay = () => {\n    const cash = parseFloat(totalCash) || 0;\n    const bank = parseFloat(totalBank) || 0;\n    const variance = cash + bank - (expectedTotal || 0);\n\n    const dailyCloseData = {\n      closeDate: selectedDate,\n      totalCash: cash,\n      totalBank: bank,\n      expectedCash,\n      expectedBank,\n      expectedTotal,\n      actualTotal: cash + bank,\n      variance,\n      notes,\n    };\n\n    lockDayMutation.mutate({\n      closeDate: selectedDate,\n      dailyCloseData,\n    });\n  };\n\n  // Calculate expected totals from payments\n  const todaysPayments = payments?.filter((payment: any) => \n    new Date(payment.paymentDate).toDateString() === new Date(selectedDate).toDateString()\n  ) || [];\n\n  const expectedCash = todaysPayments\n    .filter((p: any) => p.paymentMethod === 'cash')\n    .reduce((sum: number, p: any) => sum + Number(p.amount), 0);\n\n  const expectedBank = todaysPayments\n    .filter((p: any) => ['bank_transfer', 'card'].includes(p.paymentMethod))\n    .reduce((sum: number, p: any) => sum + Number(p.amount), 0);\n\n  const expectedTotal = expectedCash + expectedBank;\n  const actualTotal = (parseFloat(totalCash) || 0) + (parseFloat(totalBank) || 0);\n  const variance = actualTotal - expectedTotal;\n  \n  // Check if selected date is in the future\n  const today = new Date().toISOString().split('T')[0];\n  const isFutureDate = selectedDate > today;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Date Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Daily Close</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-4\">\n              <Label htmlFor=\"closeDate\">Select Date:</Label>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={goToPreviousDay}\n                  className=\"px-3 py-1\"\n                  data-testid=\"button-previous-day\"\n                >\n                  <i className=\"fas fa-chevron-left\"></i>\n                </Button>\n                <Input\n                  id=\"closeDate\"\n                  type=\"date\"\n                  value={selectedDate}\n                  max={today}\n                  onChange={(e) => {\n                    setSelectedDate(e.target.value);\n                    // Clear form when changing dates\n                    setTotalCash(\"\");\n                    setTotalBank(\"\");\n                    setNotes(\"\");\n                  }}\n                  className=\"w-48\"\n                  data-testid=\"input-close-date\"\n                />\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={goToNextDay}\n                  disabled={selectedDate >= today}\n                  className=\"px-3 py-1\"\n                  data-testid=\"button-next-day\"\n                >\n                  <i className=\"fas fa-chevron-right\"></i>\n                </Button>\n              </div>\n              {dailyCloseRecord?.isLocked ? (\n                <Badge className=\"bg-blue-100 text-blue-800\" data-testid=\"badge-locked\">\n                  <i className=\"fas fa-lock mr-2\"></i>\n                  Locked & Finalized\n                </Badge>\n              ) : (\n                <Badge variant=\"outline\" data-testid=\"badge-unlocked\">\n                  <i className=\"fas fa-edit mr-2\"></i>\n                  Can Edit\n                </Badge>\n              )}\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              <i className=\"fas fa-info-circle mr-2\"></i>\n              You can only complete daily close operations for past and current dates. Future dates cannot be modified. Once locked, dates cannot be modified.\n            </div>\n            {isFutureDate && (\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-3 text-sm text-red-700\">\n                <i className=\"fas fa-exclamation-triangle mr-2\"></i>\n                <strong>Future Date Selected:</strong> Daily close operations can only be performed for past and current dates. Please select a date that is today or earlier.\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Today's Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <i className=\"fas fa-money-bill-wave text-green-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Expected Cash</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-expected-cash\">\n                  Rs. {expectedCash.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <i className=\"fas fa-university text-blue-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Expected Bank</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-expected-bank\">\n                  Rs. {expectedBank.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\n                <i className=\"fas fa-calculator text-purple-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Expected Total</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-expected-total\">\n                  Rs. {expectedTotal.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Close Form or Locked View */}\n      {dailyCloseRecord?.isLocked ? (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <i className=\"fas fa-lock mr-2 text-blue-600\"></i>\n              Daily Close Record - Locked & Finalized\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4\">\n              <p className=\"text-blue-800 text-sm font-medium\">\n                <i className=\"fas fa-info-circle mr-2\"></i>\n                This date has been locked and finalized. No further changes can be made.\n              </p>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label>Actual Cash</Label>\n                <div className=\"text-2xl font-semibold\" data-testid=\"text-actual-cash\">\n                  Rs. {Number(dailyCloseRecord.totalCash).toLocaleString()}\n                </div>\n              </div>\n              <div>\n                <Label>Actual Bank</Label>\n                <div className=\"text-2xl font-semibold\" data-testid=\"text-actual-bank\">\n                  Rs. {Number(dailyCloseRecord.totalBank).toLocaleString()}\n                </div>\n              </div>\n              <div>\n                <Label>Variance</Label>\n                <div className={`text-2xl font-semibold ${\n                  Number(dailyCloseRecord.variance) === 0 ? 'text-green-600' : \n                  Number(dailyCloseRecord.variance) > 0 ? 'text-blue-600' : 'text-red-600'\n                }`} data-testid=\"text-variance\">\n                  {Number(dailyCloseRecord.variance) > 0 ? '+' : ''}Rs. {Number(dailyCloseRecord.variance).toLocaleString()}\n                </div>\n              </div>\n              <div>\n                <Label>Closed At</Label>\n                <div className=\"text-lg\" data-testid=\"text-closed-at\">\n                  {new Date(dailyCloseRecord.closedAt || '').toLocaleString('en-PK')}\n                </div>\n              </div>\n            </div>\n            {dailyCloseRecord.notes && (\n              <div>\n                <Label>Notes</Label>\n                <p className=\"text-gray-700 bg-gray-50 p-3 rounded border\" data-testid=\"text-notes\">{dailyCloseRecord.notes}</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardHeader>\n            <CardTitle>Record Daily Close for {selectedDate}</CardTitle>\n            <p className=\"text-sm text-gray-600\">\n              {new Date(selectedDate).toDateString() === new Date().toDateString() \n                ? \"Recording daily close for today\" \n                : \"Recording daily close for a past date - you can complete missed daily closes\"}\n            </p>\n            {isFutureDate && (\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 text-center\">\n                <i className=\"fas fa-calendar-times text-red-500 text-2xl mb-2\"></i>\n                <h3 className=\"font-medium text-red-800 mb-1\">Future Date Not Allowed</h3>\n                <p className=\"text-sm text-red-600\">Daily close operations can only be performed for dates up to today. Please select a current or past date.</p>\n              </div>\n            )}\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {!isFutureDate ? (\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"totalCash\">Actual Cash Total *</Label>\n                    <Input\n                      id=\"totalCash\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"0.00\"\n                      value={totalCash}\n                      onChange={(e) => setTotalCash(e.target.value)}\n                      data-testid=\"input-total-cash\"\n                    />\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      Expected: Rs. {expectedCash.toLocaleString()}\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"totalBank\">Actual Bank Total *</Label>\n                    <Input\n                      id=\"totalBank\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"0.00\"\n                      value={totalBank}\n                      onChange={(e) => setTotalBank(e.target.value)}\n                      data-testid=\"input-total-bank\"\n                    />\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      Expected: Rs. {expectedBank.toLocaleString()}\n                    </p>\n                  </div>\n                </div>\n\n                {(totalCash || totalBank) && (\n                  <div className=\"bg-gray-50 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-gray-800 mb-2\">Summary</h4>\n                    <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-gray-600\">Actual Total:</span>\n                        <div className=\"font-semibold\" data-testid=\"text-summary-actual\">\n                          Rs. {actualTotal.toLocaleString()}\n                        </div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Expected:</span>\n                        <div className=\"font-semibold\" data-testid=\"text-summary-expected\">\n                          Rs. {expectedTotal.toLocaleString()}\n                        </div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Variance:</span>\n                        <div className={`font-semibold ${\n                          variance === 0 ? 'text-green-600' : \n                          variance > 0 ? 'text-blue-600' : 'text-red-600'\n                        }`} data-testid=\"text-summary-variance\">\n                          {variance > 0 ? '+' : ''}Rs. {variance.toLocaleString()}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                <div>\n                  <Label htmlFor=\"notes\">Notes (Optional)</Label>\n                  <Textarea\n                    id=\"notes\"\n                    placeholder=\"Add any notes about discrepancies or special circumstances...\"\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                    rows={3}\n                    data-testid=\"textarea-notes\"\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-3\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleSubmit}\n                    disabled={(!totalCash && !totalBank) || createDailyCloseMutation.isPending}\n                    data-testid=\"button-save-draft\"\n                  >\n                    {createDailyCloseMutation.isPending ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                        Saving...\n                      </>\n                    ) : (\n                      \"Save as Draft\"\n                    )}\n                  </Button>\n                  <Button\n                    onClick={handleLockDay}\n                    disabled={!totalCash || !totalBank || lockDayMutation.isPending}\n                    data-testid=\"button-lock-day\"\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                  >\n                    {lockDayMutation.isPending ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                        Locking Day...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-lock mr-2\"></i>\n                        Lock Day & Finalize\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            ) : null}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Today's Transactions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Today's Transactions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Time</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Receipt #</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Student</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Amount</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Method</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {todaysPayments.length > 0 ? todaysPayments.map((payment: any) => (\n                  <tr key={payment.id} data-testid={`row-payment-${payment.id}`}>\n                    <td className=\"px-4 py-3\" data-testid={`text-time-${payment.id}`}>\n                      {new Date(payment.paymentDate).toLocaleTimeString()}\n                    </td>\n                    <td className=\"px-4 py-3\" data-testid={`text-receipt-${payment.id}`}>\n                      {payment.receiptNumber}\n                    </td>\n                    <td className=\"px-4 py-3\" data-testid={`text-student-${payment.id}`}>\n                      <div>\n                        <div className=\"font-medium\">\n                          {payment.studentFirstName} {payment.studentLastName}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {payment.studentRollNumber}\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <span className=\"font-semibold\" data-testid={`text-amount-${payment.id}`}>\n                        Rs. {Number(payment.amount).toLocaleString()}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <Badge data-testid={`badge-method-${payment.id}`}>\n                        {payment.paymentMethod.toUpperCase()}\n                      </Badge>\n                    </td>\n                  </tr>\n                )) : (\n                  <tr>\n                    <td colSpan={5} className=\"px-4 py-8 text-center text-gray-500\">\n                      No transactions for this date\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":22296},"client/src/pages/finance/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport type { DashboardStats, Transaction, CashDrawRequest } from \"@/types\";\n\nfunction formatRelativeTime(date: string | Date): string {\n  const now = new Date();\n  const targetDate = new Date(date);\n  const diffInMs = now.getTime() - targetDate.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n\n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes} minutes ago`;\n  if (diffInHours < 24) return `${diffInHours} hours ago`;\n  if (diffInDays < 7) return `${diffInDays} days ago`;\n  \n  return targetDate.toLocaleDateString();\n}\n\nexport default function FinanceDashboard() {\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard/stats'],\n  });\n\n  const { data: recentPayments } = useQuery<Transaction[]>({\n    queryKey: ['/api/payments'],\n  });\n\n  const { data: cashDrawRequests } = useQuery<CashDrawRequest[]>({\n    queryKey: ['/api/cash-draw-requests'],\n  });\n\n  const pendingRequests = cashDrawRequests?.filter(req => req.status === 'pending') || [];\n\n  if (statsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[1, 2, 3, 4].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"pt-6\">\n                <div className=\"h-16 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <i className=\"fas fa-users text-blue-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Students</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-total-students\">\n                  {stats?.totalStudents || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <i className=\"fas fa-dollar-sign text-green-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Monthly Revenue</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-monthly-revenue\">\n                  Rs. {stats?.monthlyRevenue?.toLocaleString() || '0'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-orange-100 rounded-lg\">\n                <i className=\"fas fa-exclamation-triangle text-orange-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Pending Fees</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-pending-fees\">\n                  Rs. {stats?.pendingFees?.toLocaleString() || '0'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <i className=\"fas fa-percentage text-green-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Avg Attendance</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-avg-attendance\">\n                  {stats?.avgAttendance || 0}%\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <Link href=\"/enrollment\" className=\"w-full\">\n              <Button variant=\"outline\" className=\"w-full h-20 flex flex-col items-center justify-center space-y-2\" data-testid=\"button-new-enrollment\">\n                <i className=\"fas fa-user-plus text-2xl text-blue-600\"></i>\n                <span className=\"text-sm font-medium\">New Enrollment</span>\n              </Button>\n            </Link>\n            \n            <Link href=\"/invoices\" className=\"w-full\">\n              <Button variant=\"outline\" className=\"w-full h-20 flex flex-col items-center justify-center space-y-2\" data-testid=\"button-create-invoice\">\n                <i className=\"fas fa-file-invoice text-2xl text-blue-600\"></i>\n                <span className=\"text-sm font-medium\">Create Invoice</span>\n              </Button>\n            </Link>\n            \n            <Button variant=\"outline\" className=\"w-full h-20 flex flex-col items-center justify-center space-y-2\" data-testid=\"button-record-payment\">\n              <i className=\"fas fa-credit-card text-2xl text-blue-600\"></i>\n              <span className=\"text-sm font-medium\">Record Payment</span>\n            </Button>\n            \n            <Link href=\"/daily-close\" className=\"w-full\">\n              <Button variant=\"outline\" className=\"w-full h-20 flex flex-col items-center justify-center space-y-2\" data-testid=\"button-daily-close\">\n                <i className=\"fas fa-lock text-2xl text-blue-600\"></i>\n                <span className=\"text-sm font-medium\">Daily Close</span>\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Activity & Pending Approvals */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Transactions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Transactions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {recentPayments?.slice(0, 5).map((payment, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">Payment Received</p>\n                      <p className=\"text-xs text-gray-600\">Receipt #{payment.id?.slice(-6)}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-semibold text-green-600\">Rs. {payment.amount}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {new Date(payment.paymentDate).toLocaleTimeString()}\n                    </p>\n                  </div>\n                </div>\n              )) || (\n                <div className=\"text-center text-gray-500 py-8\">\n                  <i className=\"fas fa-receipt text-4xl mb-4\"></i>\n                  <p>No recent transactions</p>\n                </div>\n              )}\n            </div>\n            <Button variant=\"ghost\" className=\"w-full mt-4\" data-testid=\"button-view-all-transactions\">\n              View All Transactions\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Pending Approvals */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Pending Cash Draw Approvals</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {pendingRequests.length > 0 ? pendingRequests.map((request) => (\n                <div key={request.id} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900\">{request.teacherName}</p>\n                    <p className=\"text-xs text-gray-600\">{request.reason}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {formatRelativeTime(request.requestedAt)}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-semibold text-gray-900\">Rs. {request.amount}</p>\n                    <div className=\"flex space-x-2 mt-1\">\n                      <Button size=\"sm\" className=\"px-2 py-1 text-xs\" data-testid=\"button-approve-request\">\n                        Approve\n                      </Button>\n                      <Button size=\"sm\" variant=\"destructive\" className=\"px-2 py-1 text-xs\" data-testid=\"button-deny-request\">\n                        Deny\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              )) : (\n                <div className=\"text-center text-gray-500 py-8\">\n                  <i className=\"fas fa-check-circle text-4xl mb-4\"></i>\n                  <p>No pending approvals</p>\n                </div>\n              )}\n            </div>\n            <Link href=\"/approvals\">\n              <Button variant=\"ghost\" className=\"w-full mt-4\" data-testid=\"button-view-all-approvals\">\n                View All Pending Approvals\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10242},"client/src/pages/finance/Enrollment.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertStudentSchema, type Subject } from \"@shared/schema\";\nimport { formatPKR } from \"@/lib/currency\";\n\ninterface EnrollmentFormData {\n  firstName: string;\n  lastName: string;\n  dateOfBirth: string;\n  gender: 'male' | 'female';\n  classLevels: string[];\n  rollNumber: string;\n  studentPhone: string;\n  studentEmail: string;\n  homeAddress: string;\n  parentName: string;\n  parentPhone: string;\n  parentEmail: string;\n  additionalParentName: string;\n  additionalParentPhone: string;\n  additionalParentEmail: string;\n  selectedSubjects: string[];\n  addOns: string[];\n  discounts: string[];\n  discountPercentage: string;\n  customDiscountAmount: string;\n  additionalFees: Array<{ type: string; amount: number; description?: string }>;\n  subjectDiscounts: Record<string, {\n    discountType: 'none' | 'percentage' | 'fixed';\n    discountValue: number;\n    discountReason: string;\n  }>;\n}\n\ninterface RollNumberResponse {\n  classLevel: string;\n  nextRollNumber: string;\n  format: string;\n  example: string;\n}\n\nexport default function Enrollment() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [formData, setFormData] = useState<Partial<EnrollmentFormData>>({\n    classLevels: [],\n    selectedSubjects: [],\n    addOns: [],\n    discounts: [],\n    discountPercentage: \"0\",\n    customDiscountAmount: \"0\",\n    additionalFees: [],\n    subjectDiscounts: {},\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: subjects } = useQuery<Subject[]>({\n    queryKey: ['/api/subjects'],\n    enabled: currentStep >= 2,\n  });\n\n  // Auto-generate roll number when class level is selected\n  const { data: nextRollNumberData, refetch: refetchRollNumber } = useQuery<RollNumberResponse>({\n    queryKey: ['/api/roll-numbers/next', formData.classLevels?.[0]],\n    enabled: !!(formData.classLevels && formData.classLevels.length > 0),\n  });\n\n  // Update roll number when class level changes or roll number data is fetched\n  useEffect(() => {\n    if (nextRollNumberData?.nextRollNumber && formData.classLevels && formData.classLevels.length > 0) {\n      updateFormData('rollNumber', nextRollNumberData.nextRollNumber);\n    }\n  }, [nextRollNumberData, formData.classLevels]);\n\n  const createEnrollmentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest('POST', '/api/enrollments', data);\n    },\n    onSuccess: (response: any) => {\n      console.log(\"Enrollment successful:\", response);\n      toast({\n        title: \"Success!\",\n        description: `Student enrolled successfully! ${response.invoice ? `Invoice ${response.invoice.invoiceNumber} created for Rs.${response.summary.total}` : ''}`,\n        variant: \"success\" as any,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/students'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      // Reset form\n      setFormData({ selectedSubjects: [], discounts: [] });\n      setCurrentStep(1);\n    },\n    onError: (error: any) => {\n      console.error(\"Enrollment error:\", error);\n      toast({\n        title: \"Error\",\n        description: `Failed to enroll student: ${error.message || 'Please try again.'}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const validateStep = (step: number): boolean => {\n    switch (step) {\n      case 1:\n        // Validate required fields for Step 1\n        const requiredFields = ['firstName', 'lastName', 'dateOfBirth', 'gender', 'studentPhone', 'studentEmail', 'parentName', 'parentPhone'];\n        const missingFields = requiredFields.filter(field => !formData[field as keyof EnrollmentFormData]);\n        \n        // Validate classLevels separately since it's an array\n        if (!formData.classLevels || formData.classLevels.length === 0) {\n          missingFields.push('classLevels');\n        }\n        \n        if (missingFields.length > 0) {\n          toast({\n            title: \"Required Information Missing\",\n            description: \"Please fill out all required information before moving to the next step\",\n            variant: \"destructive\",\n          });\n          return false;\n        }\n        \n        // Validate date format\n        if (formData.dateOfBirth && isNaN(new Date(formData.dateOfBirth).getTime())) {\n          toast({\n            title: \"Invalid Date\",\n            description: \"Please enter a valid date of birth\",\n            variant: \"destructive\",\n          });\n          return false;\n        }\n        \n        // Validate Pakistani phone number format for student phone\n        if (formData.studentPhone) {\n          const phoneRegex = /^(\\+92|0092|92|0)?(3[0-9]{2}|4[0-9]{2}|5[0-9]{2}|6[0-9]{2}|7[0-9]{2}|8[0-9]{2}|9[0-9]{2})[0-9]{7}$/;\n          const cleanPhone = formData.studentPhone.replace(/[\\s\\-]/g, '');\n          if (!phoneRegex.test(cleanPhone)) {\n            toast({\n              title: \"Invalid Student Phone Number\",\n              description: \"Please enter a valid Pakistani phone number (e.g., +92 300 1234567)\",\n              variant: \"destructive\",\n            });\n            return false;\n          }\n        }\n        \n        // Validate Pakistani phone number format for parent phone\n        if (formData.parentPhone) {\n          const phoneRegex = /^(\\+92|0092|92|0)?(3[0-9]{2}|4[0-9]{2}|5[0-9]{2}|6[0-9]{2}|7[0-9]{2}|8[0-9]{2}|9[0-9]{2})[0-9]{7}$/;\n          const cleanPhone = formData.parentPhone.replace(/[\\s\\-]/g, '');\n          if (!phoneRegex.test(cleanPhone)) {\n            toast({\n              title: \"Invalid Parent Phone Number\",\n              description: \"Please enter a valid Pakistani phone number (e.g., +92 300 1234567)\",\n              variant: \"destructive\",\n            });\n            return false;\n          }\n        }\n        \n        // Validate student email format\n        if (formData.studentEmail) {\n          const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          if (!emailRegex.test(formData.studentEmail)) {\n            toast({\n              title: \"Invalid Student Email\",\n              description: \"Please enter a valid email address (e.g., student@example.com)\",\n              variant: \"destructive\",\n            });\n            return false;\n          }\n        }\n        \n        // Validate parent email format\n        if (formData.parentEmail) {\n          const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          if (!emailRegex.test(formData.parentEmail)) {\n            toast({\n              title: \"Invalid Parent Email\",\n              description: \"Please enter a valid email address (e.g., parent@example.com)\",\n              variant: \"destructive\",\n            });\n            return false;\n          }\n        }\n        \n        return true;\n      \n      case 2:\n        // Validate at least one subject is selected\n        if (!formData.selectedSubjects || formData.selectedSubjects.length === 0) {\n          toast({\n            title: \"No Subjects Selected\",\n            description: \"Please select at least one subject to continue\",\n            variant: \"destructive\",\n          });\n          return false;\n        }\n        return true;\n      \n      case 3:\n        // Step 3 (add-ons) is optional, so always valid\n        return true;\n\n      case 4:\n        // Step 4 (discounts) is optional, so always valid\n        return true;\n      \n      default:\n        return true;\n    }\n  };\n\n  const handleNext = () => {\n    if (validateStep(currentStep)) {\n      if (currentStep < 5) {\n        setCurrentStep(currentStep + 1);\n      }\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = () => {\n    try {\n      const studentData = insertStudentSchema.parse({\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        dateOfBirth: formData.dateOfBirth,\n        gender: formData.gender,\n        classLevels: formData.classLevels,\n        rollNumber: formData.rollNumber,\n        studentPhone: formData.studentPhone,\n        studentEmail: formData.studentEmail,\n        homeAddress: formData.homeAddress,\n        parentName: formData.parentName,\n        parentPhone: formData.parentPhone,\n        parentEmail: formData.parentEmail,\n        additionalParentName: formData.additionalParentName,\n        additionalParentPhone: formData.additionalParentPhone,\n        additionalParentEmail: formData.additionalParentEmail,\n      });\n      \n      // Prepare complete enrollment data\n      // Process add-ons into additionalFees format\n      const additionalFees = (formData.addOns || []).map(addon => {\n        switch(addon) {\n          case 'registration':\n            return { type: 'registration', amount: 5000, description: 'Registration Fees' };\n          case 'resource-pack':\n            return { type: 'resource-pack', amount: 4000, description: 'Resource Pack' };\n          case 'online-access':\n            return { type: 'online-access', amount: 6900, description: 'Online Access' };\n          default:\n            return { type: addon, amount: 0, description: addon };\n        }\n      });\n\n      // Transform selectedSubjects to include discount information\n      const selectedSubjectsWithDiscounts = (formData.selectedSubjects || []).map(subjectId => {\n        const subjectDiscounts = formData.subjectDiscounts || {};\n        const subjectDiscount = subjectDiscounts[subjectId] || { discountType: 'none', discountValue: 0, discountReason: '' };\n        \n        return {\n          subjectId,\n          discountType: subjectDiscount.discountType,\n          discountValue: subjectDiscount.discountValue,\n          discountReason: subjectDiscount.discountReason\n        };\n      });\n\n      const enrollmentData = {\n        studentData,\n        selectedSubjects: selectedSubjectsWithDiscounts,\n        additionalFees\n      };\n      \n      console.log(\"Submitting enrollment data:\", enrollmentData);\n      createEnrollmentMutation.mutate(enrollmentData);\n    } catch (error) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields correctly.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const updateFormData = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const progressPercent = (currentStep / 5) * 100;\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>New Student Enrollment</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-gray-600\">Step</span>\n              <span className=\"text-sm font-semibold text-blue-600\">{currentStep}</span>\n              <span className=\"text-sm text-gray-600\">of 5</span>\n            </div>\n          </div>\n          <Progress value={progressPercent} className=\"w-full\" />\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {/* Step 1: Student Information */}\n          {currentStep === 1 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-800\">Student Information</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\" className=\"text-gray-700 font-medium\">Full Name *</Label>\n                  <Input\n                    id=\"firstName\"\n                    placeholder=\"First Name\"\n                    value={formData.firstName || ''}\n                    onChange={(e) => updateFormData('firstName', e.target.value)}\n                    className={!formData.firstName ? \"border-gray-300 focus:border-blue-500\" : \"border-green-300 focus:border-green-500\"}\n                    data-testid=\"input-first-name\"\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"lastName\" className=\"text-gray-700 font-medium\">Last Name *</Label>\n                  <Input\n                    id=\"lastName\"\n                    placeholder=\"Last Name\"\n                    value={formData.lastName || ''}\n                    onChange={(e) => updateFormData('lastName', e.target.value)}\n                    className={!formData.lastName ? \"border-gray-300 focus:border-blue-500\" : \"border-green-300 focus:border-green-500\"}\n                    data-testid=\"input-last-name\"\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"dateOfBirth\">Date of Birth *</Label>\n                  <Input\n                    id=\"dateOfBirth\"\n                    type=\"date\"\n                    value={formData.dateOfBirth || ''}\n                    onChange={(e) => updateFormData('dateOfBirth', e.target.value)}\n                    data-testid=\"input-date-of-birth\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"gender\">Gender *</Label>\n                  <Select onValueChange={(value) => updateFormData('gender', value)}>\n                    <SelectTrigger data-testid=\"select-gender\">\n                      <SelectValue placeholder=\"Select gender\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"male\">Male</SelectItem>\n                      <SelectItem value=\"female\">Female</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"classLevels\">Class Level(s) *</Label>\n                  <div className=\"space-y-2\">\n                    {['o-level', 'igcse', 'as-level', 'a2-level'].map((level) => (\n                      <div key={level} className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id={`class-${level}`}\n                          checked={formData.classLevels?.includes(level) || false}\n                          onChange={(e) => {\n                            const currentLevels = formData.classLevels || [];\n                            if (e.target.checked) {\n                              updateFormData('classLevels', [...currentLevels, level]);\n                            } else {\n                              updateFormData('classLevels', currentLevels.filter(l => l !== level));\n                            }\n                          }}\n                          className=\"rounded border-gray-300\"\n                          data-testid={`checkbox-class-${level}`}\n                        />\n                        <label htmlFor={`class-${level}`} className=\"text-sm font-medium\">\n                          {level === 'o-level' ? 'O-Level' :\n                           level === 'igcse' ? 'IGCSE' :\n                           level === 'as-level' ? 'AS-Level' :\n                           level === 'a2-level' ? 'A2-Level' : level}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"rollNumber\">Roll Number (Auto-Generated)</Label>\n                  <div className=\"p-3 bg-gray-50 border rounded-lg\">\n                    <div className=\"flex items-center justify-between\">\n                      {formData.classLevels && formData.classLevels.length > 0 ? (\n                        formData.rollNumber ? (\n                          <div>\n                            <div className=\"text-lg font-semibold text-blue-600\" data-testid=\"text-auto-roll-number\">\n                              {formData.rollNumber}\n                            </div>\n                            <div className=\"text-sm text-gray-600\">\n                              Automatically assigned for {formData.classLevels[0]?.toUpperCase()}\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"animate-spin h-4 w-4 border-2 border-blue-500 border-t-transparent rounded-full\"></div>\n                            <span className=\"text-gray-600\">Generating roll number...</span>\n                          </div>\n                        )\n                      ) : (\n                        <div className=\"text-gray-500\">\n                          Please select at least one class level first\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Student Contact Information */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"studentPhone\">Student Phone Number *</Label>\n                  <Input\n                    id=\"studentPhone\"\n                    placeholder=\"+92 300 1234567\"\n                    value={formData.studentPhone || ''}\n                    onChange={(e) => updateFormData('studentPhone', e.target.value)}\n                    className={!formData.studentPhone ? \"border-gray-300 focus:border-blue-500\" : \"border-green-300 focus:border-green-500\"}\n                    data-testid=\"input-student-phone\"\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"studentEmail\">Student Email Address *</Label>\n                  <Input\n                    id=\"studentEmail\"\n                    type=\"email\"\n                    placeholder=\"student@example.com\"\n                    value={formData.studentEmail || ''}\n                    onChange={(e) => updateFormData('studentEmail', e.target.value)}\n                    className={!formData.studentEmail ? \"border-gray-300 focus:border-blue-500\" : \"border-green-300 focus:border-green-500\"}\n                    data-testid=\"input-student-email\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"md:col-span-2\">\n                  <Label htmlFor=\"homeAddress\">Home Address</Label>\n                  <Textarea\n                    id=\"homeAddress\"\n                    placeholder=\"Enter complete home address\"\n                    value={formData.homeAddress || ''}\n                    onChange={(e) => updateFormData('homeAddress', e.target.value)}\n                    data-testid=\"input-home-address\"\n                    rows={3}\n                  />\n                </div>\n              </div>\n              \n              {/* Parent/Guardian Information */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"parentName\">Parent/Guardian Name *</Label>\n                  <Input\n                    id=\"parentName\"\n                    placeholder=\"Enter parent's name\"\n                    value={formData.parentName || ''}\n                    onChange={(e) => updateFormData('parentName', e.target.value)}\n                    data-testid=\"input-parent-name\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"parentPhone\">Contact Number *</Label>\n                  <Input\n                    id=\"parentPhone\"\n                    placeholder=\"+92 300 1234567\"\n                    value={formData.parentPhone || ''}\n                    onChange={(e) => updateFormData('parentPhone', e.target.value)}\n                    data-testid=\"input-parent-phone\"\n                  />\n                </div>\n                \n                <div className=\"md:col-span-2\">\n                  <Label htmlFor=\"parentEmail\">Email Address</Label>\n                  <Input\n                    id=\"parentEmail\"\n                    type=\"email\"\n                    placeholder=\"parent@example.com\"\n                    value={formData.parentEmail || ''}\n                    onChange={(e) => updateFormData('parentEmail', e.target.value)}\n                    data-testid=\"input-parent-email\"\n                  />\n                </div>\n              </div>\n              \n              {/* Additional Parent/Guardian Information */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"additionalParentName\">Additional Parent/Guardian Name</Label>\n                  <Input\n                    id=\"additionalParentName\"\n                    placeholder=\"Enter additional parent/guardian name\"\n                    value={formData.additionalParentName || ''}\n                    onChange={(e) => updateFormData('additionalParentName', e.target.value)}\n                    data-testid=\"input-additional-parent-name\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"additionalParentPhone\">Additional Parent/Guardian Contact Number</Label>\n                  <Input\n                    id=\"additionalParentPhone\"\n                    placeholder=\"+92 300 1234567\"\n                    value={formData.additionalParentPhone || ''}\n                    onChange={(e) => updateFormData('additionalParentPhone', e.target.value)}\n                    data-testid=\"input-additional-parent-phone\"\n                  />\n                </div>\n                \n                <div className=\"md:col-span-2\">\n                  <Label htmlFor=\"additionalParentEmail\">Additional Parent/Guardian Email Address</Label>\n                  <Input\n                    id=\"additionalParentEmail\"\n                    type=\"email\"\n                    placeholder=\"additional.parent@example.com\"\n                    value={formData.additionalParentEmail || ''}\n                    onChange={(e) => updateFormData('additionalParentEmail', e.target.value)}\n                    data-testid=\"input-additional-parent-email\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {/* Step 2: Subject Selection */}\n          {currentStep === 2 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-800\">Select Subjects</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {subjects?.filter(s => \n                  formData.classLevels && formData.classLevels.some(level => \n                    s.classLevels && s.classLevels.includes(level)\n                  )\n                ).map((subject) => (\n                  <div key={subject.id} className=\"flex items-center space-x-2 p-3 border rounded-lg\">\n                    <input\n                      type=\"checkbox\"\n                      id={subject.id}\n                      checked={formData.selectedSubjects?.includes(subject.id) || false}\n                      onChange={(e) => {\n                        const current = formData.selectedSubjects || [];\n                        if (e.target.checked) {\n                          updateFormData('selectedSubjects', [...current, subject.id]);\n                        } else {\n                          updateFormData('selectedSubjects', current.filter(id => id !== subject.id));\n                        }\n                      }}\n                      className=\"w-4 h-4 text-blue-600\"\n                      data-testid={`checkbox-subject-${subject.code}`}\n                    />\n                    <label htmlFor={subject.id} className=\"flex-1\">\n                      <div className=\"font-medium\">{subject.name}</div>\n                      <div className=\"text-sm text-gray-600\">{formatPKR(subject.baseFee)}/month</div>\n                    </label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n          \n          {/* Step 3: Add-Ons */}\n          {currentStep === 3 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-800\">Apply Add-Ons</h3>\n              <p className=\"text-sm text-gray-600\">These are one-time fees that will be added to the student's first invoice:</p>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-2 p-3 border rounded-lg\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"registration-fee\"\n                    checked={formData.addOns?.includes('registration') || false}\n                    onChange={(e) => {\n                      const current = formData.addOns || [];\n                      if (e.target.checked) {\n                        updateFormData('addOns', [...current, 'registration']);\n                      } else {\n                        updateFormData('addOns', current.filter(addon => addon !== 'registration'));\n                      }\n                    }}\n                    className=\"w-4 h-4 text-blue-600\"\n                    data-testid=\"checkbox-registration-fee\"\n                  />\n                  <label htmlFor=\"registration-fee\" className=\"flex-1\">\n                    <div className=\"font-medium\">Registration Fees</div>\n                    <div className=\"text-sm text-gray-600\">Rs.5,000 - One-time enrollment fee</div>\n                  </label>\n                  <div className=\"text-lg font-semibold text-gray-800\">Rs.5,000</div>\n                </div>\n                \n                <div className=\"flex items-center space-x-2 p-3 border rounded-lg\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"resource-pack\"\n                    checked={formData.addOns?.includes('resource-pack') || false}\n                    onChange={(e) => {\n                      const current = formData.addOns || [];\n                      if (e.target.checked) {\n                        updateFormData('addOns', [...current, 'resource-pack']);\n                      } else {\n                        updateFormData('addOns', current.filter(addon => addon !== 'resource-pack'));\n                      }\n                    }}\n                    className=\"w-4 h-4 text-blue-600\"\n                    data-testid=\"checkbox-resource-pack\"\n                  />\n                  <label htmlFor=\"resource-pack\" className=\"flex-1\">\n                    <div className=\"font-medium\">Resource Pack</div>\n                    <div className=\"text-sm text-gray-600\">Rs.4,000 - Study materials and textbooks</div>\n                  </label>\n                  <div className=\"text-lg font-semibold text-gray-800\">Rs.4,000</div>\n                </div>\n\n                <div className=\"flex items-center space-x-2 p-3 border rounded-lg\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"online-access\"\n                    checked={formData.addOns?.includes('online-access') || false}\n                    onChange={(e) => {\n                      const current = formData.addOns || [];\n                      if (e.target.checked) {\n                        updateFormData('addOns', [...current, 'online-access']);\n                      } else {\n                        updateFormData('addOns', current.filter(addon => addon !== 'online-access'));\n                      }\n                    }}\n                    className=\"w-4 h-4 text-blue-600\"\n                    data-testid=\"checkbox-online-access\"\n                  />\n                  <label htmlFor=\"online-access\" className=\"flex-1\">\n                    <div className=\"font-medium\">Online Access</div>\n                    <div className=\"text-sm text-gray-600\">Rs.6,900 - Digital learning platform access</div>\n                  </label>\n                  <div className=\"text-lg font-semibold text-gray-800\">Rs.6,900</div>\n                </div>\n\n                {formData.addOns && formData.addOns.length > 0 && (\n                  <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                    <div className=\"text-sm font-medium text-blue-800\">\n                      Total Add-On Fees: {formatPKR(\n                        formData.addOns.reduce((total, addon) => {\n                          switch(addon) {\n                            case 'registration': return total + 5000;\n                            case 'resource-pack': return total + 4000;\n                            case 'online-access': return total + 6900;\n                            default: return total;\n                          }\n                        }, 0)\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Step 4: Subject-Specific Discounts */}\n          {currentStep === 4 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-800\">Apply Subject-Specific Discounts</h3>\n              <p className=\"text-sm text-gray-600\">Set discounts for individual subjects. Teachers can give discounts only on their specific subjects.</p>\n              \n              <div className=\"space-y-4\">\n                {formData.selectedSubjects?.map((subjectId) => {\n                  const subject = subjects?.find(s => s.id === subjectId);\n                  if (!subject) return null;\n                  \n                  const subjectDiscounts = formData.subjectDiscounts || {};\n                  const subjectDiscount = subjectDiscounts[subjectId] || { discountType: 'none', discountValue: 0, discountReason: '' };\n                  \n                  return (\n                    <div key={subjectId} className=\"p-4 border rounded-lg bg-gray-50\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-800\">{subject.name}</h4>\n                          <p className=\"text-sm text-gray-600\">Base Fee: {formatPKR(subject.baseFee)}/month</p>\n                        </div>\n                        <div className=\"text-right\">\n                          {subjectDiscount.discountType !== 'none' && (\n                            <div className=\"text-sm text-green-600 font-medium\">\n                              Discount: {subjectDiscount.discountType === 'percentage' \n                                ? `${subjectDiscount.discountValue}%` \n                                : formatPKR(subjectDiscount.discountValue)}\n                            </div>\n                          )}\n                          <div className=\"text-lg font-semibold\">\n                            Final: {formatPKR(\n                              subjectDiscount.discountType === 'percentage' \n                                ? subject.baseFee - (subject.baseFee * Number(subjectDiscount.discountValue) / 100)\n                                : subject.baseFee - Number(subjectDiscount.discountValue)\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                        <div>\n                          <Label htmlFor={`discount-type-${subjectId}`}>Discount Type</Label>\n                          <select\n                            id={`discount-type-${subjectId}`}\n                            value={subjectDiscount.discountType}\n                            onChange={(e) => {\n                              const newSubjectDiscounts = {\n                                ...subjectDiscounts,\n                                [subjectId]: { ...subjectDiscount, discountType: e.target.value as 'none' | 'percentage' | 'fixed' }\n                              };\n                              updateFormData('subjectDiscounts', newSubjectDiscounts);\n                            }}\n                            className=\"w-full p-2 border rounded-md\"\n                            data-testid={`select-discount-type-${subject.code}`}\n                          >\n                            <option value=\"none\">No Discount</option>\n                            <option value=\"percentage\">Percentage</option>\n                            <option value=\"fixed\">Fixed Amount</option>\n                          </select>\n                        </div>\n                        \n                        {subjectDiscount.discountType !== 'none' && (\n                          <>\n                            <div>\n                              <Label htmlFor={`discount-value-${subjectId}`}>\n                                {subjectDiscount.discountType === 'percentage' ? 'Percentage (%)' : 'Amount (Rs.)'}\n                              </Label>\n                              <Input\n                                id={`discount-value-${subjectId}`}\n                                type=\"number\"\n                                min=\"0\"\n                                max={subjectDiscount.discountType === 'percentage' ? \"100\" : subject.baseFee.toString()}\n                                placeholder={subjectDiscount.discountType === 'percentage' ? \"0-100\" : \"0\"}\n                                value={subjectDiscount.discountValue || ''}\n                                onChange={(e) => {\n                                  const newSubjectDiscounts = {\n                                    ...subjectDiscounts,\n                                    [subjectId]: { ...subjectDiscount, discountValue: parseFloat(e.target.value) || 0 }\n                                  };\n                                  updateFormData('subjectDiscounts', newSubjectDiscounts);\n                                }}\n                                data-testid={`input-discount-value-${subject.code}`}\n                              />\n                            </div>\n                            \n                            <div>\n                              <Label htmlFor={`discount-reason-${subjectId}`}>Reason</Label>\n                              <Input\n                                id={`discount-reason-${subjectId}`}\n                                type=\"text\"\n                                placeholder=\"e.g. Teacher discount, Sibling discount\"\n                                value={subjectDiscount.discountReason || ''}\n                                onChange={(e) => {\n                                  const newSubjectDiscounts = {\n                                    ...subjectDiscounts,\n                                    [subjectId]: { ...subjectDiscount, discountReason: e.target.value }\n                                  };\n                                  updateFormData('subjectDiscounts', newSubjectDiscounts);\n                                }}\n                                data-testid={`input-discount-reason-${subject.code}`}\n                              />\n                            </div>\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n              \n              {/* Total Summary */}\n              {formData.selectedSubjects && formData.selectedSubjects.length > 0 && (\n                <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-800 mb-2\">Enrollment Summary</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    {formData.selectedSubjects.map(subjectId => {\n                      const subject = subjects?.find(s => s.id === subjectId);\n                      if (!subject) return null;\n                      \n                      const subjectDiscounts = formData.subjectDiscounts || {};\n                      const subjectDiscount = subjectDiscounts[subjectId] || { discountType: 'none', discountValue: 0 };\n                      \n                      const baseFee = parseFloat(String(subject.baseFee)) || 0;\n                      const discountValue = parseFloat(String(subjectDiscount.discountValue)) || 0;\n                      \n                      const discountAmount = subjectDiscount.discountType === 'percentage' \n                        ? (baseFee * discountValue / 100)\n                        : discountValue;\n                      const finalFee = baseFee - discountAmount;\n                      \n                      return (\n                        <div key={subjectId} className=\"flex justify-between\">\n                          <span>{subject.name}</span>\n                          <span>\n                            {discountAmount > 0 && (\n                              <span className=\"text-green-600 mr-2\">-{formatPKR(discountAmount)}</span>\n                            )}\n                            {formatPKR(finalFee)}\n                          </span>\n                        </div>\n                      );\n                    })}\n                    <div className=\"border-t pt-1 font-medium flex justify-between\">\n                      <span>Total Monthly Fees:</span>\n                      <span>{formatPKR(\n                        formData.selectedSubjects.reduce((total, subjectId) => {\n                          const subject = subjects?.find(s => s.id === subjectId);\n                          if (!subject) return total;\n                          \n                          const subjectDiscounts = formData.subjectDiscounts || {};\n                          const subjectDiscount = subjectDiscounts[subjectId] || { discountType: 'none', discountValue: 0 };\n                          \n                          const baseFee = parseFloat(String(subject.baseFee)) || 0;\n                          const discountValue = parseFloat(String(subjectDiscount.discountValue)) || 0;\n                          \n                          const discountAmount = subjectDiscount.discountType === 'percentage' \n                            ? (baseFee * discountValue / 100)\n                            : discountValue;\n                          return total + (baseFee - discountAmount);\n                        }, 0)\n                      )}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          \n          {/* Step 5: Review */}\n          {currentStep === 5 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-800\">Review & Confirm</h3>\n              \n              <div className=\"bg-gray-50 p-4 rounded-lg space-y-2\">\n                <div><strong>Name:</strong> {formData.firstName} {formData.lastName}</div>\n                <div><strong>Roll Number:</strong> {formData.rollNumber}</div>\n                <div><strong>Class:</strong> {formData.classLevel?.toUpperCase()}</div>\n                <div><strong>Parent:</strong> {formData.parentName}</div>\n                <div><strong>Contact:</strong> {formData.parentPhone}</div>\n                <div><strong>Subjects:</strong> {formData.selectedSubjects?.length || 0} selected</div>\n                {formData.addOns && formData.addOns.length > 0 && (\n                  <div><strong>Add-Ons:</strong> {formData.addOns.length} selected</div>\n                )}\n                {formData.subjectDiscounts && Object.keys(formData.subjectDiscounts).some(id => \n                  formData.subjectDiscounts![id].discountType !== 'none' && formData.subjectDiscounts![id].discountValue > 0\n                ) && (\n                  <div><strong>Subject Discounts:</strong> Applied to specific subjects</div>\n                )}\n              </div>\n\n              {/* Calculate and show fee breakdown */}\n              {subjects && formData.selectedSubjects && formData.selectedSubjects.length > 0 && (\n                <div className=\"p-4 border rounded-lg\">\n                  <h4 className=\"font-medium text-gray-800 mb-3\">Fee Breakdown</h4>\n                  {formData.selectedSubjects.map(subjectId => {\n                    const subject = subjects.find(s => s.id === subjectId);\n                    if (!subject) return null;\n                    \n                    // Calculate discount for this subject\n                    const subjectDiscounts = formData.subjectDiscounts || {};\n                    const subjectDiscount = subjectDiscounts[subjectId] || { discountType: 'none', discountValue: 0 };\n                    \n                    let discountAmount = 0;\n                    const discountValue = parseFloat(String(subjectDiscount.discountValue)) || 0;\n                    const baseFee = parseFloat(String(subject.baseFee)) || 0;\n                    \n                    if (subjectDiscount.discountType === 'percentage') {\n                      discountAmount = (baseFee * discountValue) / 100;\n                    } else if (subjectDiscount.discountType === 'fixed') {\n                      discountAmount = discountValue;\n                    }\n                    \n                    const finalPrice = baseFee - discountAmount;\n                    \n                    return (\n                      <div key={subject.id} className=\"space-y-1\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>{subject.name}</span>\n                          <span>{formatPKR(baseFee)}</span>\n                        </div>\n                        {discountAmount > 0 && (\n                          <>\n                            <div className=\"flex justify-between text-xs text-green-600 ml-4\">\n                              <span>\n                                Discount ({subjectDiscount.discountType === 'percentage' \n                                  ? `${discountValue}%` \n                                  : `Rs.${discountValue}`}\n                                {subjectDiscount.discountReason && ` - ${subjectDiscount.discountReason}`})\n                              </span>\n                              <span>-{formatPKR(discountAmount)}</span>\n                            </div>\n                            <div className=\"flex justify-between text-xs font-medium ml-4\">\n                              <span>Final Price:</span>\n                              <span>{formatPKR(finalPrice)}</span>\n                            </div>\n                          </>\n                        )}\n                      </div>\n                    );\n                  })}\n                  \n                  {formData.selectedSubjects.length > 0 && (\n                    <>\n                      <hr className=\"my-2\" />\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Monthly Tuition Subtotal</span>\n                        <span>{formatPKR(\n                          formData.selectedSubjects.reduce((total, subjectId) => {\n                            const subject = subjects.find(s => s.id === subjectId);\n                            if (!subject) return total;\n                            \n                            // Apply subject-specific discounts\n                            const subjectDiscounts = formData.subjectDiscounts || {};\n                            const subjectDiscount = subjectDiscounts[subjectId] || { discountType: 'none', discountValue: 0 };\n                            \n                            const baseFee = parseFloat(String(subject.baseFee)) || 0;\n                            const discountValue = parseFloat(String(subjectDiscount.discountValue)) || 0;\n                            \n                            let discountAmount = 0;\n                            if (subjectDiscount.discountType === 'percentage') {\n                              discountAmount = (baseFee * discountValue) / 100;\n                            } else if (subjectDiscount.discountType === 'fixed') {\n                              discountAmount = discountValue;\n                            }\n                            \n                            return total + (baseFee - discountAmount);\n                          }, 0)\n                        )}</span>\n                      </div>\n\n                      {/* Add-On Fees */}\n                      {formData.addOns && formData.addOns.length > 0 && (\n                        <>\n                          {formData.addOns.map(addon => (\n                            <div key={addon} className=\"flex justify-between text-sm text-blue-600\">\n                              <span>\n                                {addon === 'registration' ? 'Registration Fees' : \n                                 addon === 'resource-pack' ? 'Resource Pack' : \n                                 addon === 'online-access' ? 'Online Access' : addon}\n                              </span>\n                              <span>+{formatPKR(\n                                addon === 'registration' ? 5000 : \n                                addon === 'resource-pack' ? 4000 : \n                                addon === 'online-access' ? 6900 : 0\n                              )}</span>\n                            </div>\n                          ))}\n                          <div className=\"flex justify-between text-sm font-medium\">\n                            <span>Subtotal with Add-Ons</span>\n                            <span>{formatPKR(\n                              formData.selectedSubjects.reduce((total, subjectId) => {\n                                const subject = subjects.find(s => s.id === subjectId);\n                                if (!subject) return total;\n                                \n                                // Apply subject-specific discounts\n                                const subjectDiscounts = formData.subjectDiscounts || {};\n                                const subjectDiscount = subjectDiscounts[subjectId] || { type: 'none', value: 0 };\n                                \n                                const baseFee = parseFloat(String(subject.baseFee)) || 0;\n                                const discountValue = parseFloat(String(subjectDiscount.value)) || 0;\n                                \n                                let discountAmount = 0;\n                                if (subjectDiscount.type === 'percentage') {\n                                  discountAmount = (baseFee * discountValue) / 100;\n                                } else if (subjectDiscount.type === 'fixed') {\n                                  discountAmount = discountValue;\n                                }\n                                \n                                return total + (baseFee - discountAmount);\n                              }, 0) + \n                              (formData.addOns?.reduce((total, addon) => {\n                                switch(addon) {\n                                  case 'registration': return total + 5000;\n                                  case 'resource-pack': return total + 4000;\n                                  case 'online-access': return total + 6900;\n                                  default: return total;\n                                }\n                              }, 0) || 0)\n                            )}</span>\n                          </div>\n                        </>\n                      )}\n                      \n                      {/* Discounts */}\n                      {((formData.discountPercentage && parseFloat(formData.discountPercentage) > 0) || \n                        (formData.customDiscountAmount && parseFloat(formData.customDiscountAmount) > 0)) && (\n                        <>\n                          <div className=\"flex justify-between text-sm text-green-600\">\n                            <span>\n                              {formData.customDiscountAmount && parseFloat(formData.customDiscountAmount) > 0 \n                                ? 'Custom Discount (Fixed Amount)'\n                                : `Discount (${formData.discountPercentage}%)`}\n                            </span>\n                            <span>-{formatPKR(\n                              formData.customDiscountAmount && parseFloat(formData.customDiscountAmount) > 0 \n                                ? parseFloat(formData.customDiscountAmount)\n                                : (formData.selectedSubjects.reduce((total, subjectId) => {\n                                    const subject = subjects.find(s => s.id === subjectId);\n                                    if (!subject) return total;\n                                    \n                                    // Apply subject-specific discounts first\n                                    const subjectDiscounts = formData.subjectDiscounts || {};\n                                    const subjectDiscount = subjectDiscounts[subjectId] || { type: 'none', value: 0 };\n                                    \n                                    const baseFee = parseFloat(String(subject.baseFee)) || 0;\n                                    const discountValue = parseFloat(String(subjectDiscount.value)) || 0;\n                                    \n                                    let discountAmount = 0;\n                                    if (subjectDiscount.type === 'percentage') {\n                                      discountAmount = (baseFee * discountValue) / 100;\n                                    } else if (subjectDiscount.type === 'fixed') {\n                                      discountAmount = discountValue;\n                                    }\n                                    \n                                    return total + (baseFee - discountAmount);\n                                  }, 0) * (parseFloat(formData.discountPercentage || '0') / 100))\n                            )}</span>\n                          </div>\n                          <hr className=\"my-2\" />\n                          <div className=\"flex justify-between font-medium\">\n                            <span>Total Amount (First Invoice)</span>\n                            <span>{formatPKR((() => {\n                              const tuitionTotal = formData.selectedSubjects.reduce((total, subjectId) => {\n                                const subject = subjects.find(s => s.id === subjectId);\n                                if (!subject) return total;\n                                \n                                // Apply subject-specific discounts\n                                const subjectDiscounts = formData.subjectDiscounts || {};\n                                const subjectDiscount = subjectDiscounts[subjectId] || { type: 'none', value: 0 };\n                                \n                                const baseFee = parseFloat(String(subject.baseFee)) || 0;\n                                const discountValue = parseFloat(String(subjectDiscount.value)) || 0;\n                                \n                                let discountAmount = 0;\n                                if (subjectDiscount.type === 'percentage') {\n                                  discountAmount = (baseFee * discountValue) / 100;\n                                } else if (subjectDiscount.type === 'fixed') {\n                                  discountAmount = discountValue;\n                                }\n                                \n                                return total + (baseFee - discountAmount);\n                              }, 0);\n                              const addOnTotal = formData.addOns?.reduce((total, addon) => {\n                                switch(addon) {\n                                  case 'registration': return total + 5000;\n                                  case 'resource-pack': return total + 4000;\n                                  case 'online-access': return total + 6900;\n                                  default: return total;\n                                }\n                              }, 0) || 0;\n                              const subtotal = tuitionTotal + addOnTotal;\n                              const discountAmount = formData.customDiscountAmount && parseFloat(formData.customDiscountAmount) > 0 \n                                ? parseFloat(formData.customDiscountAmount)\n                                : (tuitionTotal * (parseFloat(formData.discountPercentage || '0') / 100));\n                              return subtotal - discountAmount;\n                            })())}</span>\n                          </div>\n                        </>\n                      )}\n                    </>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n          \n          {/* Navigation Buttons */}\n          <div className=\"flex justify-between\">\n            <Button\n              variant=\"outline\"\n              onClick={handlePrevious}\n              disabled={currentStep === 1}\n              data-testid=\"button-previous\"\n            >\n              Previous\n            </Button>\n            \n            {currentStep < 5 ? (\n              <Button onClick={handleNext} data-testid=\"button-next\">\n                Next: {currentStep === 1 ? 'Select Subjects' : currentStep === 2 ? 'Add-Ons' : currentStep === 3 ? 'Discounts' : 'Review'}\n                <i className=\"fas fa-arrow-right ml-2\"></i>\n              </Button>\n            ) : (\n              <Button \n                onClick={handleSubmit}\n                disabled={createEnrollmentMutation.isPending}\n                data-testid=\"button-submit-enrollment\"\n              >\n                {createEnrollmentMutation.isPending ? 'Enrolling...' : 'Complete Enrollment'}\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":54368},"client/src/pages/finance/Invoices.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Invoice } from \"@shared/schema\";\nimport InvoiceWizard from \"@/components/InvoiceWizard\";\nimport { isOverdue, getCurrentPakistanTime, formatPakistanDate } from \"@/utils/pakistanTime\";\n\nexport default function Invoices() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\n  const [showPaymentDialog, setShowPaymentDialog] = useState(false);\n  const [showCreateInvoiceDialog, setShowCreateInvoiceDialog] = useState(false);\n  const [showInvoiceWizard, setShowInvoiceWizard] = useState(false);\n  \n  // Advanced filtering states\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [dateRangeFilter, setDateRangeFilter] = useState(\"all\");\n  const [amountRangeFilter, setAmountRangeFilter] = useState(\"all\");\n  const [studentFilter, setStudentFilter] = useState(\"all\");\n\n  const [paymentAmount, setPaymentAmount] = useState(\"\");\n  const [paymentMethod, setPaymentMethod] = useState(\"\");\n  const [transactionNumber, setTransactionNumber] = useState(\"\");\n  const [paymentNotes, setPaymentNotes] = useState(\"\");\n  const [selectedStudentId, setSelectedStudentId] = useState(\"\");\n  const [invoiceAmount, setInvoiceAmount] = useState(\"\");\n  const [invoiceNotes, setInvoiceNotes] = useState(\"\");\n  const [editingInvoice, setEditingInvoice] = useState<Invoice | null>(null);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: invoices, isLoading } = useQuery<Invoice[]>({\n    queryKey: ['/api/invoices'],\n  });\n\n  const { data: students = [] } = useQuery({\n    queryKey: ['/api/students'],\n  });\n\n  // Create a map of students by ID for quick lookup\n  const studentsMap = students.reduce((acc: any, student: any) => {\n    acc[student.id] = student;\n    return acc;\n  }, {});\n\n  // Function to get student name by ID\n  const getStudentName = (studentId: string) => {\n    const student = studentsMap[studentId];\n    return student ? `${student.firstName} ${student.lastName}` : 'Unknown Student';\n  };\n\n  // Enhanced filtering logic\n  const filteredInvoices = invoices?.filter(invoice => {\n    // Text search across invoice number, student name, and notes\n    const studentName = getStudentName(invoice.studentId).toLowerCase();\n    const searchTerms = searchQuery.toLowerCase();\n    const matchesSearch = !searchQuery || \n      invoice.invoiceNumber?.toLowerCase().includes(searchTerms) ||\n      studentName.includes(searchTerms) ||\n      invoice.studentRollNumber?.toLowerCase().includes(searchTerms) ||\n      invoice.notes?.toLowerCase().includes(searchTerms);\n\n    // Status filter - use actual status including overdue logic\n    const matchesStatus = !statusFilter || statusFilter === \"all\" || getActualStatus(invoice) === statusFilter;\n\n    // Student filter\n    const matchesStudent = !studentFilter || studentFilter === \"all\" || invoice.studentId === studentFilter;\n\n    // Date range filter\n    const matchesDateRange = !dateRangeFilter || dateRangeFilter === \"all\" || (() => {\n      const invoiceDate = new Date(invoice.issueDate);\n      const today = getCurrentPakistanTime();\n      \n      switch (dateRangeFilter) {\n        case 'today':\n          return invoiceDate.toDateString() === today.toDateString();\n        case 'this-week':\n          const weekStart = new Date(today);\n          weekStart.setDate(today.getDate() - today.getDay());\n          return invoiceDate >= weekStart;\n        case 'this-month':\n          return invoiceDate.getMonth() === today.getMonth() && \n                 invoiceDate.getFullYear() === today.getFullYear();\n        case 'last-30-days':\n          const thirtyDaysAgo = new Date(today);\n          thirtyDaysAgo.setDate(today.getDate() - 30);\n          return invoiceDate >= thirtyDaysAgo;\n        default:\n          return true;\n      }\n    })();\n\n    // Amount range filter\n    const matchesAmountRange = !amountRangeFilter || amountRangeFilter === \"all\" || (() => {\n      const amount = parseFloat(invoice.total);\n      \n      switch (amountRangeFilter) {\n        case 'under-10k':\n          return amount < 10000;\n        case '10k-25k':\n          return amount >= 10000 && amount <= 25000;\n        case '25k-50k':\n          return amount >= 25000 && amount <= 50000;\n        case 'over-50k':\n          return amount > 50000;\n        default:\n          return true;\n      }\n    })();\n\n    return matchesSearch && matchesStatus && matchesStudent && matchesDateRange && matchesAmountRange;\n  }) || [];\n\n  // Clear all filters function\n  const clearAllFilters = () => {\n    setSearchQuery(\"\");\n    setStatusFilter(\"all\");\n    setDateRangeFilter(\"all\");\n    setAmountRangeFilter(\"all\");\n    setStudentFilter(\"all\");\n  };\n\n  // Get filter count for display\n  const getFilterCount = () => {\n    let count = 0;\n    if (statusFilter && statusFilter !== \"all\") count++;\n    if (dateRangeFilter && dateRangeFilter !== \"all\") count++;\n    if (amountRangeFilter && amountRangeFilter !== \"all\") count++;\n    if (studentFilter && studentFilter !== \"all\") count++;\n    return count;\n  };\n\n  // Function to determine actual status including overdue logic\n  const getActualStatus = (invoice: Invoice) => {\n    // If invoice is already paid, keep it as paid\n    if (invoice.status === 'paid') {\n      return 'paid';\n    }\n    \n    // Check if due date has passed using Pakistan time\n    if (isOverdue(invoice.dueDate)) {\n      return 'overdue';\n    }\n    \n    // Return original status if not overdue\n    return invoice.status || 'sent';\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return 'bg-green-100 text-green-800';\n      case 'overdue':\n        return 'bg-red-100 text-red-800';\n      case 'sent':\n        return 'bg-blue-100 text-blue-800';\n      case 'partial':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'draft':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  // Payment mutation\n  const paymentMutation = useMutation({\n    mutationFn: async (paymentData: {\n      invoiceId: string;\n      studentId: string;\n      amount: string;\n      paymentMethod: string;\n      transactionNumber?: string;\n      notes?: string;\n    }) => {\n      const response = await apiRequest('POST', '/api/payments', {\n        studentId: paymentData.studentId,\n        invoiceId: paymentData.invoiceId,\n        amount: paymentData.amount,\n        paymentMethod: paymentData.paymentMethod,\n        transactionNumber: paymentData.transactionNumber,\n        paymentDate: getCurrentPakistanTime().toISOString(),\n        notes: paymentData.notes || '',\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Payment recorded successfully\",\n        description: `Payment of Rs. ${paymentAmount} recorded for invoice ${selectedInvoice?.invoiceNumber}`,\n      });\n      \n      // Refresh invoice data\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/students-with-financial'] });\n      \n      // Reset form\n      setPaymentAmount(\"\");\n      setPaymentMethod(\"\");\n      setTransactionNumber(\"\");\n      setPaymentNotes(\"\");\n      setShowPaymentDialog(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Payment failed\",\n        description: error.message || \"Failed to process payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRecordPayment = (invoice: Invoice) => {\n    const balanceDue = parseFloat(invoice.balanceDue || invoice.total || '0');\n    \n    // Don't allow payments on fully paid invoices\n    if (balanceDue <= 0) {\n      toast({\n        title: \"Payment not needed\",\n        description: \"This invoice is already fully paid\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setSelectedInvoice(invoice);\n    setPaymentAmount(balanceDue.toString());\n    setPaymentMethod(\"\");\n    setTransactionNumber(\"\");\n    setPaymentNotes(\"\");\n    setShowPaymentDialog(true);\n  };\n\n  const handleSubmitPayment = async () => {\n    if (!selectedInvoice || !paymentAmount || !paymentMethod) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const paymentAmountNum = parseFloat(paymentAmount);\n    const balanceDue = parseFloat(selectedInvoice.balanceDue || selectedInvoice.total || '0');\n    \n    // Validate payment amount\n    if (paymentAmountNum <= 0) {\n      toast({\n        title: \"Invalid amount\",\n        description: \"Payment amount must be greater than zero\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (paymentAmountNum > balanceDue) {\n      toast({\n        title: \"Amount too high\",\n        description: `Payment amount (Rs. ${paymentAmountNum.toLocaleString()}) cannot exceed invoice balance (Rs. ${balanceDue.toLocaleString()})`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await paymentMutation.mutateAsync({\n        invoiceId: selectedInvoice.id,\n        studentId: selectedInvoice.studentId,\n        amount: paymentAmount,\n        paymentMethod: paymentMethod,\n        transactionNumber: transactionNumber || undefined,\n        notes: paymentNotes,\n      });\n    } catch (error) {\n      console.error('Payment error:', error);\n    }\n  };\n\n  // Create invoice mutation\n  const createInvoiceMutation = useMutation({\n    mutationFn: async (invoiceData: {\n      studentId: string;\n      amount: string;\n      notes: string;\n    }) => {\n      return apiRequest('POST', '/api/invoices', {\n        studentId: invoiceData.studentId,\n        type: 'custom',\n        subtotal: invoiceData.amount,\n        total: invoiceData.amount,\n        notes: invoiceData.notes,\n        issueDate: new Date().toISOString(),\n        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days from now\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Invoice created successfully\",\n        description: `Invoice created for Rs. ${invoiceAmount}`,\n      });\n      \n      // Refresh invoice data\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      \n      // Reset form\n      setSelectedStudentId(\"\");\n      setInvoiceAmount(\"\");\n      setInvoiceNotes(\"\");\n      setShowCreateInvoiceDialog(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to create invoice\",\n        description: error.message || \"Failed to create invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateInvoice = async () => {\n    if (!selectedStudentId || !invoiceAmount) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please select a student and enter amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    await createInvoiceMutation.mutateAsync({\n      studentId: selectedStudentId,\n      amount: invoiceAmount,\n      notes: invoiceNotes || \"Custom invoice\",\n    });\n  };\n\n  // Handle invoice PDF view with format options\n  const handleViewInvoicePDF = async (invoice: Invoice) => {\n    // Create format selection dialog first\n    const formatChoice = window.confirm(\"Choose Invoice Format:\\n\\nOK = Full PDF Format (A4)\\nCancel = Thermal Receipt Format\");\n    \n    if (formatChoice) {\n      await generatePDFInvoice(invoice);\n    } else {\n      await generateThermalInvoice(invoice);\n    }\n  };\n\n  // Generate full PDF invoice format with detailed line items\n  const generatePDFInvoice = async (invoice: Invoice) => {\n    const studentName = getStudentName(invoice.studentId);\n    const currentDate = new Date().toLocaleDateString();\n    \n    // Use saved invoice items to show detailed line items with discounts\n    let lineItemsHTML = '';\n    let subtotalAmount = 0;\n    \n    try {\n      // Check if invoice has items array (new format with discount data)\n      if (invoice.items && invoice.items.length > 0) {\n        // Use the saved invoice items that include discount information\n        for (const item of invoice.items) {\n          const unitPrice = parseFloat(item.unitPrice || '0');\n          const discountAmount = parseFloat(item.discountAmount || '0');\n          const totalPrice = parseFloat(item.totalPrice || item.unitPrice || '0');\n          \n          subtotalAmount += unitPrice;\n          \n          // Show original price line\n          lineItemsHTML += `\n            <div class=\"line-item\">\n              <div class=\"item-description\">${item.name} - ${item.description || 'Monthly Tuition'}</div>\n              <div class=\"item-amount\">Rs. ${unitPrice.toLocaleString()}</div>\n            </div>`;\n          \n          // Show discount if applicable\n          if (discountAmount > 0) {\n            const discountText = item.discountType === 'percentage' \n              ? `${item.discountValue}% Discount on ${item.name}`\n              : `Rs. ${discountAmount.toLocaleString()} Discount on ${item.name}`;\n              \n            lineItemsHTML += `\n              <div class=\"line-item discount-item\">\n                <div class=\"item-description\">${discountText}</div>\n                <div class=\"item-amount discount\">-Rs. ${discountAmount.toLocaleString()}</div>\n              </div>`;\n          }\n        }\n      } else {\n        // Fallback for older invoices without items array\n        lineItemsHTML = `\n          <div class=\"line-item\">\n            <div class=\"item-description\">Tuition Fees</div>\n            <div class=\"item-amount\">Rs. ${Number(invoice.subtotal || invoice.total).toLocaleString()}</div>\n          </div>`;\n        \n        const discountAmount = parseFloat(invoice.discountAmount || '0');\n        if (discountAmount > 0) {\n          lineItemsHTML += `\n            <div class=\"line-item discount-item\">\n              <div class=\"item-description\">Discount Applied</div>\n              <div class=\"item-amount discount\">-Rs. ${discountAmount.toLocaleString()}</div>\n            </div>`;\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error processing invoice items:', error);\n      // Fallback to basic display\n      lineItemsHTML = `\n        <div class=\"line-item\">\n          <div class=\"item-description\">Tuition Fees</div>\n          <div class=\"item-amount\">Rs. ${Number(invoice.subtotal || invoice.total).toLocaleString()}</div>\n        </div>`;\n    }\n    \n    const pdfHTML = `\n      <html>\n        <head>\n          <title>Invoice ${invoice.invoiceNumber} - Primax Educational Institution</title>\n          <style>\n            @page { \n              size: A4; \n              margin: 20mm; \n            }\n            * {\n              margin: 0;\n              padding: 0;\n              box-sizing: border-box;\n            }\n            body { \n              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n              line-height: 1.6;\n              color: #333;\n              background: white;\n            }\n            .invoice-container {\n              max-width: 800px;\n              margin: 0 auto;\n              background: white;\n              border: 2px solid #e2e8f0;\n              border-radius: 12px;\n              overflow: hidden;\n            }\n            .header {\n              background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);\n              color: white;\n              padding: 30px 40px;\n              text-align: center;\n              position: relative;\n            }\n            .header::after {\n              content: '';\n              position: absolute;\n              bottom: -10px;\n              left: 50%;\n              transform: translateX(-50%);\n              width: 0;\n              height: 0;\n              border-left: 20px solid transparent;\n              border-right: 20px solid transparent;\n              border-top: 20px solid #1e40af;\n            }\n            .school-name {\n              font-size: 28px;\n              font-weight: 800;\n              margin-bottom: 8px;\n              text-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            }\n            .school-subtitle {\n              font-size: 16px;\n              opacity: 0.9;\n              font-weight: 300;\n            }\n            .invoice-title {\n              background: #f8fafc;\n              padding: 25px 40px;\n              border-bottom: 3px solid #e2e8f0;\n            }\n            .invoice-number {\n              font-size: 32px;\n              font-weight: 700;\n              color: #1e40af;\n              margin-bottom: 10px;\n            }\n            .invoice-date {\n              color: #64748b;\n              font-size: 14px;\n            }\n            .content {\n              padding: 40px;\n            }\n            .section {\n              margin-bottom: 30px;\n            }\n            .section-title {\n              font-size: 18px;\n              font-weight: 600;\n              color: #1e40af;\n              border-bottom: 2px solid #e2e8f0;\n              padding-bottom: 8px;\n              margin-bottom: 20px;\n            }\n            .detail-grid {\n              display: grid;\n              grid-template-columns: 1fr 1fr;\n              gap: 20px;\n              margin-bottom: 30px;\n            }\n            .detail-item {\n              display: flex;\n              flex-direction: column;\n            }\n            .detail-label {\n              font-size: 12px;\n              color: #64748b;\n              text-transform: uppercase;\n              letter-spacing: 0.5px;\n              margin-bottom: 5px;\n              font-weight: 500;\n            }\n            .detail-value {\n              font-size: 16px;\n              font-weight: 600;\n              color: #1e293b;\n            }\n            .amount-section {\n              background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);\n              padding: 30px;\n              border-radius: 10px;\n              border: 2px solid #cbd5e1;\n              text-align: center;\n              margin: 30px 0;\n            }\n            .total-amount {\n              font-size: 48px;\n              font-weight: 800;\n              color: #1e40af;\n              margin-bottom: 10px;\n              text-shadow: 0 2px 4px rgba(30, 64, 175, 0.1);\n            }\n            .amount-label {\n              font-size: 16px;\n              color: #64748b;\n              text-transform: uppercase;\n              letter-spacing: 1px;\n            }\n            .payment-details {\n              background: #fefce8;\n              border: 2px solid #fbbf24;\n              border-radius: 10px;\n              padding: 20px;\n              margin: 30px 0;\n            }\n            .payment-title {\n              color: #92400e;\n              font-weight: 600;\n              margin-bottom: 15px;\n              display: flex;\n              align-items: center;\n            }\n            .payment-title::before {\n              content: '⚠';\n              margin-right: 10px;\n              font-size: 20px;\n            }\n            .payment-grid {\n              display: grid;\n              grid-template-columns: repeat(2, 1fr);\n              gap: 15px;\n            }\n            .footer {\n              background: #f8fafc;\n              padding: 30px 40px;\n              text-align: center;\n              border-top: 3px solid #e2e8f0;\n              color: #64748b;\n            }\n            .footer-note {\n              font-size: 14px;\n              margin-bottom: 10px;\n            }\n            .footer-signature {\n              font-size: 12px;\n              opacity: 0.8;\n            }\n            .status-badge {\n              display: inline-block;\n              padding: 8px 16px;\n              border-radius: 20px;\n              font-size: 12px;\n              font-weight: 600;\n              text-transform: uppercase;\n              letter-spacing: 0.5px;\n            }\n            .status-sent { background: #dbeafe; color: #1d4ed8; }\n            .status-paid { background: #dcfce7; color: #16a34a; }\n            .status-overdue { background: #fee2e2; color: #dc2626; }\n            .status-partial { background: #fef3c7; color: #d97706; }\n            \n            /* Line Items Styles */\n            .line-items-section {\n              margin: 30px 40px;\n              border: 2px solid #e2e8f0;\n              border-radius: 10px;\n              overflow: hidden;\n            }\n            .line-items-header {\n              background: #f8fafc;\n              padding: 15px 20px;\n              border-bottom: 2px solid #e2e8f0;\n              font-weight: 600;\n              color: #374151;\n              display: flex;\n              justify-content: space-between;\n            }\n            .line-item {\n              display: flex;\n              justify-content: space-between;\n              align-items: center;\n              padding: 12px 20px;\n              border-bottom: 1px solid #f1f5f9;\n            }\n            .line-item:last-child {\n              border-bottom: none;\n            }\n            .item-description {\n              font-size: 14px;\n              color: #374151;\n            }\n            .item-amount {\n              font-size: 14px;\n              font-weight: 600;\n              color: #111827;\n            }\n            .addon-item {\n              background: #f0f9ff;\n            }\n            .addon-item .item-description {\n              color: #1e40af;\n            }\n            .discount-item {\n              background: #f0fdf4;\n            }\n            .discount-item .item-description {\n              color: #16a34a;\n            }\n            .discount {\n              color: #16a34a !important;\n            }\n            .totals-section {\n              background: #f8fafc;\n              padding: 20px;\n              border-top: 2px solid #e2e8f0;\n            }\n            .total-line {\n              display: flex;\n              justify-content: space-between;\n              padding: 8px 0;\n              font-size: 16px;\n            }\n            .final-total {\n              border-top: 2px solid #1e40af;\n              margin-top: 10px;\n              padding-top: 10px;\n              font-weight: 700;\n              font-size: 18px;\n              color: #1e40af;\n            }\n            \n            @media print {\n              body { -webkit-print-color-adjust: exact; }\n              .invoice-container { border: none; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"invoice-container\">\n            <div class=\"header\">\n              <div class=\"school-name\">PRIMAX EDUCATIONAL INSTITUTION</div>\n              <div class=\"school-subtitle\">Excellence in Education Since 2010</div>\n            </div>\n            \n            <div class=\"invoice-title\">\n              <div class=\"invoice-number\">INVOICE #${invoice.invoiceNumber}</div>\n              <div class=\"invoice-date\">Generated on ${currentDate}</div>\n            </div>\n            \n            <div class=\"content\">\n              <div class=\"section\">\n                <div class=\"section-title\">Student & Invoice Details</div>\n                <div class=\"detail-grid\">\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">Student Name</div>\n                    <div class=\"detail-value\">${studentName}</div>\n                  </div>\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">Invoice Status</div>\n                    <div class=\"detail-value\">\n                      <span class=\"status-badge status-${getActualStatus(invoice)}\">${getActualStatus(invoice).toUpperCase()}</span>\n                    </div>\n                  </div>\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">Issue Date</div>\n                    <div class=\"detail-value\">${new Date(invoice.issueDate).toLocaleDateString('en-GB')}</div>\n                  </div>\n                  <div class=\"detail-item\">\n                    <div class=\"detail-label\">Due Date</div>\n                    <div class=\"detail-value\">${new Date(invoice.dueDate).toLocaleDateString('en-GB')}</div>\n                  </div>\n                </div>\n                \n                ${invoice.notes ? `\n                <div class=\"detail-item\">\n                  <div class=\"detail-label\">Description</div>\n                  <div class=\"detail-value\">${invoice.notes}</div>\n                </div>\n                ` : ''}\n              </div>\n              \n              <!-- Detailed Line Items Section -->\n              <div class=\"line-items-section\">\n                <div class=\"line-items-header\">\n                  <span>ITEM DESCRIPTION</span>\n                  <span>AMOUNT</span>\n                </div>\n                ${lineItemsHTML}\n                \n                <div class=\"totals-section\">\n                  <div class=\"total-line\">\n                    <span>TOTAL AMOUNT:</span>\n                    <span><strong>Rs. ${Number(invoice.total).toLocaleString()}</strong></span>\n                  </div>\n                  <div class=\"total-line\">\n                    <span>Amount Paid:</span>\n                    <span>Rs. ${Number(invoice.amountPaid || 0).toLocaleString()}</span>\n                  </div>\n                  <div class=\"total-line final-total\">\n                    <span>BALANCE DUE:</span>\n                    <span>Rs. ${Number(invoice.balanceDue || invoice.total).toLocaleString()}</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div class=\"amount-section\">\n                <div class=\"total-amount\">Rs. ${Number(invoice.balanceDue || invoice.total).toLocaleString()}</div>\n                <div class=\"amount-label\">Amount Due</div>\n              </div>\n            </div>\n            \n            <div class=\"footer\">\n              <div class=\"footer-note\">\n                <strong>Payment Instructions:</strong> Please pay by the due date to avoid late fees.<br>\n                Contact our finance office for payment methods and assistance.\n              </div>\n              <div class=\"footer-signature\">\n                Thank you for choosing Primax Educational Institution<br>\n                Generated on ${currentDate} | This is a computer-generated invoice\n              </div>\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n    \n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(pdfHTML);\n      printWindow.document.close();\n      printWindow.focus();\n      setTimeout(() => printWindow.print(), 500);\n    }\n  };\n\n  // Generate thermal receipt format with detailed line items\n  const generateThermalInvoice = async (invoice: Invoice) => {\n    const studentName = getStudentName(invoice.studentId);\n    const currentDate = new Date().toLocaleDateString();\n    const currentTime = new Date().toLocaleTimeString();\n    \n    // Use saved invoice items to show detailed line items with discounts\n    let lineItemsHTML = '';\n    \n    try {\n      // Check if invoice has items array (new format with discount data)\n      if (invoice.items && invoice.items.length > 0) {\n        // Use the saved invoice items that include discount information\n        for (const item of invoice.items) {\n          const unitPrice = parseFloat(item.unitPrice || '0');\n          const discountAmount = parseFloat(item.discountAmount || '0');\n          const totalPrice = parseFloat(item.totalPrice || item.unitPrice || '0');\n          \n          // Show original price line\n          lineItemsHTML += `\n            <div class=\"row\">\n              <span style=\"font-size: 9px;\">${item.name}</span>\n              <span>Rs.${unitPrice.toLocaleString()}</span>\n            </div>`;\n          \n          // Show discount if applicable\n          if (discountAmount > 0) {\n            const discountText = item.discountType === 'percentage' \n              ? `${item.discountValue}% Off ${item.name}`\n              : `Rs.${discountAmount.toLocaleString()} Off ${item.name}`;\n              \n            lineItemsHTML += `\n              <div class=\"row\" style=\"background: #e6ffe6; padding: 0.5mm;\">\n                <span style=\"font-size: 8px;\">${discountText}</span>\n                <span style=\"color: #008000;\">-Rs.${discountAmount.toLocaleString()}</span>\n              </div>`;\n          }\n        }\n      } else {\n        // Fallback for older invoices without items array\n        lineItemsHTML = `\n          <div class=\"row\">\n            <span style=\"font-size: 9px;\">Tuition Fees</span>\n            <span>Rs.${Number(invoice.subtotal || invoice.total).toLocaleString()}</span>\n          </div>`;\n        \n        const discountAmount = parseFloat(invoice.discountAmount || '0');\n        if (discountAmount > 0) {\n          lineItemsHTML += `\n            <div class=\"row\" style=\"background: #e6ffe6; padding: 0.5mm;\">\n              <span style=\"font-size: 8px;\">Discount</span>\n              <span style=\"color: #008000;\">-Rs.${discountAmount.toLocaleString()}</span>\n            </div>`;\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error processing invoice items:', error);\n      // Fallback to basic display\n      lineItemsHTML = `\n        <div class=\"row\">\n          <span style=\"font-size: 9px;\">Tuition Fees</span>\n          <span>Rs.${Number(invoice.subtotal || invoice.total).toLocaleString()}</span>\n        </div>`;\n    }\n    \n    const thermalHTML = `\n      <html>\n        <head>\n          <title>Invoice ${invoice.invoiceNumber} - Thermal</title>\n          <style>\n            @page { \n              size: 80mm auto;\n              margin: 2mm;\n            }\n            * {\n              margin: 0;\n              padding: 0;\n              box-sizing: border-box;\n            }\n            body { \n              font-family: 'Courier New', monospace;\n              font-size: 11px;\n              line-height: 1.2;\n              color: #000;\n              width: 76mm;\n              margin: 0 auto;\n              background: white;\n            }\n            .receipt {\n              padding: 4mm;\n            }\n            .header {\n              text-align: center;\n              border-bottom: 1px dashed #000;\n              padding-bottom: 4mm;\n              margin-bottom: 4mm;\n            }\n            .school-name {\n              font-size: 14px;\n              font-weight: bold;\n              margin-bottom: 2mm;\n            }\n            .school-address {\n              font-size: 9px;\n              margin-bottom: 2mm;\n            }\n            .doc-type {\n              font-size: 12px;\n              font-weight: bold;\n              margin-top: 2mm;\n            }\n            .section {\n              margin-bottom: 3mm;\n              padding-bottom: 2mm;\n            }\n            .divider {\n              border-bottom: 1px dashed #000;\n              margin: 2mm 0;\n            }\n            .row {\n              display: flex;\n              justify-content: space-between;\n              margin-bottom: 1mm;\n            }\n            .label {\n              font-weight: bold;\n            }\n            .value {\n              text-align: right;\n            }\n            .invoice-num {\n              font-size: 13px;\n              font-weight: bold;\n              text-align: center;\n              margin: 2mm 0;\n            }\n            .student-name {\n              text-align: center;\n              font-weight: bold;\n              margin: 2mm 0;\n              text-transform: uppercase;\n            }\n            .amount-section {\n              background: #f0f0f0;\n              padding: 2mm;\n              text-align: center;\n              margin: 3mm 0;\n            }\n            .total-amount {\n              font-size: 16px;\n              font-weight: bold;\n            }\n            .amount-label {\n              font-size: 10px;\n              margin-top: 1mm;\n            }\n            .footer {\n              text-align: center;\n              font-size: 8px;\n              margin-top: 4mm;\n              padding-top: 2mm;\n              border-top: 1px dashed #000;\n            }\n            .status {\n              text-align: center;\n              font-weight: bold;\n              padding: 1mm;\n              margin: 2mm 0;\n              border: 1px solid #000;\n            }\n            .datetime {\n              text-align: center;\n              font-size: 9px;\n              margin-bottom: 2mm;\n            }\n            @media print {\n              body { -webkit-print-color-adjust: exact; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"receipt\">\n            <div class=\"header\">\n              <div class=\"school-name\">PRIMAX EDUCATIONAL</div>\n              <div class=\"school-name\">INSTITUTION</div>\n              <div class=\"school-address\">Excellence in Education</div>\n              <div class=\"doc-type\">INVOICE</div>\n            </div>\n            \n            <div class=\"invoice-num\">#${invoice.invoiceNumber}</div>\n            \n            <div class=\"datetime\">${currentDate} ${currentTime}</div>\n            \n            <div class=\"divider\"></div>\n            \n            <div class=\"student-name\">${studentName}</div>\n            \n            <div class=\"divider\"></div>\n            \n            <div class=\"section\">\n              <div class=\"row\">\n                <span class=\"label\">Issue Date:</span>\n                <span class=\"value\">${new Date(invoice.issueDate).toLocaleDateString('en-GB')}</span>\n              </div>\n              <div class=\"row\">\n                <span class=\"label\">Due Date:</span>\n                <span class=\"value\">${new Date(invoice.dueDate).toLocaleDateString('en-GB')}</span>\n              </div>\n              <div class=\"row\">\n                <span class=\"label\">Status:</span>\n                <span class=\"value\">${getActualStatus(invoice).toUpperCase()}</span>\n              </div>\n            </div>\n            \n            <div class=\"divider\"></div>\n            \n            <div class=\"section\">\n              ${invoice.notes ? `\n              <div class=\"row\" style=\"margin-bottom: 2mm;\">\n                <span style=\"font-size: 8px;\">${invoice.notes}</span>\n              </div>\n              <div class=\"divider\"></div>\n              ` : ''}\n              \n              <!-- Detailed Line Items -->\n              <div style=\"margin-bottom: 3mm;\">\n                <div style=\"text-align: center; font-weight: bold; font-size: 10px; margin-bottom: 2mm;\">INVOICE DETAILS</div>\n                <div class=\"divider\"></div>\n                ${lineItemsHTML}\n                <div class=\"divider\"></div>\n              </div>\n              \n              <div class=\"row\">\n                <span class=\"label\">Total Amount:</span>\n                <span class=\"value\">Rs. ${Number(invoice.total).toLocaleString()}</span>\n              </div>\n              <div class=\"row\">\n                <span class=\"label\">Amount Paid:</span>\n                <span class=\"value\">Rs. ${Number(invoice.amountPaid || 0).toLocaleString()}</span>\n              </div>\n            </div>\n            \n            <div class=\"amount-section\">\n              <div class=\"total-amount\">Rs. ${Number(invoice.balanceDue || invoice.total).toLocaleString()}</div>\n              <div class=\"amount-label\">AMOUNT DUE</div>\n            </div>\n            \n            <div class=\"status\">\n              ${getActualStatus(invoice).toUpperCase()}\n            </div>\n            \n            <div class=\"footer\">\n              <div>Pay by due date to avoid late fees</div>\n              <div style=\"margin-top: 2mm;\">Thank you!</div>\n              <div style=\"margin-top: 2mm;\">Generated: ${currentDate}</div>\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n    \n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(thermalHTML);\n      printWindow.document.close();\n      printWindow.focus();\n      setTimeout(() => printWindow.print(), 500);\n    }\n  };\n\n  // Handle invoice editing\n  const handleEditInvoice = (invoice: Invoice) => {\n    setEditingInvoice(invoice);\n    setInvoiceAmount(invoice.total);\n    setInvoiceNotes(invoice.notes || \"\");\n    setShowEditDialog(true);\n  };\n\n  // Update invoice mutation\n  const updateInvoiceMutation = useMutation({\n    mutationFn: async (invoiceData: {\n      id: string;\n      total: string;\n      notes: string;\n    }) => {\n      return apiRequest('PATCH', `/api/invoices/${invoiceData.id}`, {\n        total: invoiceData.total,\n        subtotal: invoiceData.total,\n        balanceDue: (parseFloat(invoiceData.total) - parseFloat(editingInvoice?.amountPaid || '0')).toFixed(2),\n        notes: invoiceData.notes,\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Invoice updated successfully\",\n        description: `Invoice ${editingInvoice?.invoiceNumber} has been updated`,\n      });\n      \n      // Refresh invoice data\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      \n      // Reset form\n      setEditingInvoice(null);\n      setInvoiceAmount(\"\");\n      setInvoiceNotes(\"\");\n      setShowEditDialog(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update invoice\",\n        description: error.message || \"Failed to update invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateInvoice = async () => {\n    if (!editingInvoice || !invoiceAmount) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please enter an amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    await updateInvoiceMutation.mutateAsync({\n      id: editingInvoice.id,\n      total: invoiceAmount,\n      notes: invoiceNotes,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between mb-4\">\n            <CardTitle>Invoices</CardTitle>\n            <Button \n              onClick={() => setShowInvoiceWizard(true)}\n              data-testid=\"button-create-invoice\"\n            >\n              <i className=\"fas fa-plus mr-2\"></i>\n              Create Invoice\n            </Button>\n          </div>\n          \n          {/* Enhanced Search and Filters */}\n          <div className=\"space-y-4\">\n            {/* Search Bar */}\n            <div className=\"relative\">\n              <Input\n                placeholder=\"Search invoices, students, roll numbers, or notes...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 w-full\"\n                data-testid=\"input-search-invoices\"\n              />\n              <i className=\"fas fa-search absolute left-3 top-3 text-gray-400\"></i>\n              {searchQuery && (\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"absolute right-2 top-2 h-6 w-6 p-0\"\n                  onClick={() => setSearchQuery(\"\")}\n                >\n                  <i className=\"fas fa-times text-gray-400\"></i>\n                </Button>\n              )}\n            </div>\n\n            {/* Filter Controls */}\n            <div className=\"flex flex-wrap gap-3 items-center\">\n              {/* Status Filter */}\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-32\" data-testid=\"select-status-filter\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"sent\">Sent</SelectItem>\n                  <SelectItem value=\"paid\">Paid</SelectItem>\n                  <SelectItem value=\"partial\">Partial</SelectItem>\n                  <SelectItem value=\"overdue\">Overdue</SelectItem>\n                  <SelectItem value=\"draft\">Draft</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Student Filter */}\n              <Select value={studentFilter} onValueChange={setStudentFilter}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-student-filter\">\n                  <SelectValue placeholder=\"Student\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Students</SelectItem>\n                  {students.map((student: any) => (\n                    <SelectItem key={student.id} value={student.id}>\n                      {student.firstName} {student.lastName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* Date Range Filter */}\n              <Select value={dateRangeFilter} onValueChange={setDateRangeFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-date-filter\">\n                  <SelectValue placeholder=\"Date Range\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Dates</SelectItem>\n                  <SelectItem value=\"today\">Today</SelectItem>\n                  <SelectItem value=\"this-week\">This Week</SelectItem>\n                  <SelectItem value=\"this-month\">This Month</SelectItem>\n                  <SelectItem value=\"last-30-days\">Last 30 Days</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Amount Range Filter */}\n              <Select value={amountRangeFilter} onValueChange={setAmountRangeFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-amount-filter\">\n                  <SelectValue placeholder=\"Amount\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Amounts</SelectItem>\n                  <SelectItem value=\"under-10k\">Under Rs. 10K</SelectItem>\n                  <SelectItem value=\"10k-25k\">Rs. 10K - 25K</SelectItem>\n                  <SelectItem value=\"25k-50k\">Rs. 25K - 50K</SelectItem>\n                  <SelectItem value=\"over-50k\">Over Rs. 50K</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Clear Filters */}\n              {getFilterCount() > 0 && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={clearAllFilters}\n                  data-testid=\"button-clear-filters\"\n                >\n                  <i className=\"fas fa-times mr-1\"></i>\n                  Clear Filters ({getFilterCount()})\n                </Button>\n              )}\n            </div>\n\n            {/* Results Count */}\n            <div className=\"flex justify-between items-center text-sm text-gray-600\">\n              <span data-testid=\"text-results-count\">\n                Showing {filteredInvoices.length} of {invoices?.length || 0} invoices\n              </span>\n              \n              {(searchQuery || getFilterCount() > 0) && (\n                <span className=\"text-blue-600\" data-testid=\"text-active-filters\">\n                  <i className=\"fas fa-filter mr-1\"></i>\n                  Filters active\n                </span>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Invoice #</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Roll #</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Student</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Issue Date</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Due Date</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Amount</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Status</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {isLoading ? (\n                  // Loading state\n                  Array.from({ length: 5 }).map((_, index) => (\n                    <tr key={index} className=\"animate-pulse\">\n                      <td className=\"px-4 py-3\"><div className=\"h-4 bg-gray-200 rounded w-24\"></div></td>\n                      <td className=\"px-4 py-3\"><div className=\"h-4 bg-gray-200 rounded w-20\"></div></td>\n                      <td className=\"px-4 py-3\"><div className=\"h-4 bg-gray-200 rounded w-32\"></div></td>\n                      <td className=\"px-4 py-3\"><div className=\"h-4 bg-gray-200 rounded w-20\"></div></td>\n                      <td className=\"px-4 py-3\"><div className=\"h-4 bg-gray-200 rounded w-20\"></div></td>\n                      <td className=\"px-4 py-3\"><div className=\"h-4 bg-gray-200 rounded w-16\"></div></td>\n                      <td className=\"px-4 py-3\"><div className=\"h-4 bg-gray-200 rounded w-12\"></div></td>\n                      <td className=\"px-4 py-3\"><div className=\"h-6 bg-gray-200 rounded w-20\"></div></td>\n                    </tr>\n                  ))\n                ) : filteredInvoices.length > 0 ? filteredInvoices.map((invoice) => (\n                  <tr key={invoice.id} className=\"hover:bg-gray-50\" data-testid={`row-invoice-${invoice.id}`}>\n                    <td className=\"px-4 py-3\">\n                      <button \n                        className=\"font-medium text-blue-600 hover:text-blue-800 hover:underline cursor-pointer\"\n                        onClick={() => handleViewInvoicePDF(invoice)}\n                        data-testid={`text-invoice-number-${invoice.id}`}\n                      >\n                        {invoice.invoiceNumber}\n                      </button>\n                    </td>\n                    <td className=\"px-4 py-3\" data-testid={`text-roll-number-${invoice.id}`}>\n                      <span className=\"font-mono text-sm bg-gray-100 px-2 py-1 rounded\">\n                        {invoice.studentRollNumber || 'N/A'}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3\" data-testid={`text-student-${invoice.id}`}>\n                      {invoice.studentFirstName && invoice.studentLastName \n                        ? `${invoice.studentFirstName} ${invoice.studentLastName}`\n                        : getStudentName(invoice.studentId)}\n                    </td>\n                    <td className=\"px-4 py-3\" data-testid={`text-issue-date-${invoice.id}`}>\n                      {formatPakistanDate(invoice.issueDate)}\n                    </td>\n                    <td className=\"px-4 py-3\" data-testid={`text-due-date-${invoice.id}`}>\n                      {formatPakistanDate(invoice.dueDate)}\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <span className=\"font-semibold\" data-testid={`text-amount-${invoice.id}`}>\n                        Rs. {Number(invoice.total).toLocaleString()}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <Badge \n                        className={getStatusColor(getActualStatus(invoice))}\n                        data-testid={`badge-status-${invoice.id}`}\n                      >\n                        {getActualStatus(invoice).toUpperCase()}\n                      </Badge>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\"\n                          onClick={() => handleEditInvoice(invoice)}\n                          data-testid={`button-edit-invoice-${invoice.id}`}\n                        >\n                          <i className=\"fas fa-edit\"></i>\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\" \n                          className={`${parseFloat(invoice.balanceDue || invoice.total || '0') <= 0 ? 'text-gray-400 cursor-not-allowed' : 'text-green-600'}`}\n                          onClick={() => handleRecordPayment(invoice)}\n                          disabled={parseFloat(invoice.balanceDue || invoice.total || '0') <= 0}\n                          title={parseFloat(invoice.balanceDue || invoice.total || '0') <= 0 ? 'Invoice is fully paid' : 'Record payment'}\n                          data-testid={`button-record-payment-${invoice.id}`}\n                        >\n                          <i className=\"fas fa-dollar-sign\"></i>\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                )) : (\n                  <tr>\n                    <td colSpan={8} className=\"px-4 py-12 text-center text-gray-500\">\n                      <div className=\"flex flex-col items-center space-y-2\">\n                        <i className=\"fas fa-search text-gray-300 text-3xl\"></i>\n                        <p className=\"font-medium\">No invoices found</p>\n                        <p className=\"text-sm\">\n                          {searchQuery || getFilterCount() > 0 \n                            ? \"Try adjusting your search or filters\" \n                            : \"No invoices have been created yet\"}\n                        </p>\n                        {(searchQuery || getFilterCount() > 0) && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={clearAllFilters}\n                            className=\"mt-2\"\n                          >\n                            <i className=\"fas fa-times mr-1\"></i>\n                            Clear All Filters\n                          </Button>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Payment Dialog */}\n      <Dialog open={showPaymentDialog} onOpenChange={setShowPaymentDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Record Payment</DialogTitle>\n          </DialogHeader>\n          {selectedInvoice && (\n            <div className=\"space-y-4\">\n              <div className=\"text-sm text-gray-600\">\n                Recording payment for invoice: <strong>{selectedInvoice.invoiceNumber}</strong>\n                <br />\n                Current balance: <strong>Rs. {Number(selectedInvoice.balanceDue || selectedInvoice.total).toLocaleString()}</strong>\n              </div>\n              <div>\n                <Label htmlFor=\"amount\">Payment Amount (PKR)</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  value={paymentAmount}\n                  onChange={(e) => setPaymentAmount(e.target.value)}\n                  placeholder=\"0.00\"\n                  data-testid=\"input-payment-amount\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"method\">Payment Method</Label>\n                <Select value={paymentMethod} onValueChange={setPaymentMethod}>\n                  <SelectTrigger data-testid=\"select-payment-method\">\n                    <SelectValue placeholder=\"Select payment method\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"cash\">Cash</SelectItem>\n                    <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              {/* Transaction Number for Bank Transfer */}\n              {paymentMethod === \"bank_transfer\" && (\n                <div>\n                  <Label htmlFor=\"transactionNumber\">Transaction Number</Label>\n                  <Input\n                    id=\"transactionNumber\"\n                    value={transactionNumber}\n                    onChange={(e) => setTransactionNumber(e.target.value)}\n                    placeholder=\"Enter bank transaction number\"\n                    className=\"mt-1\"\n                    data-testid=\"input-transaction-number\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Enter the bank transaction/reference number for this transfer\n                  </p>\n                </div>\n              )}\n              \n              {/* Notes Field */}\n              <div>\n                <Label htmlFor=\"paymentNotes\">Notes (Optional)</Label>\n                <Input\n                  id=\"paymentNotes\"\n                  value={paymentNotes}\n                  onChange={(e) => setPaymentNotes(e.target.value)}\n                  placeholder=\"Add notes for this payment receipt\"\n                  className=\"mt-1\"\n                  data-testid=\"input-payment-notes\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  These notes will appear on the payment receipt\n                </p>\n              </div>\n              \n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowPaymentDialog(false)}\n                  data-testid=\"button-cancel-payment\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleSubmitPayment}\n                  data-testid=\"button-submit-payment\"\n                >\n                  Record Payment\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n\n\n      {/* Edit Invoice Dialog */}\n      <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Invoice - {editingInvoice?.invoiceNumber}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"editAmount\">Invoice Amount (Rs.)</Label>\n              <Input\n                id=\"editAmount\"\n                type=\"number\"\n                value={invoiceAmount}\n                onChange={(e) => setInvoiceAmount(e.target.value)}\n                placeholder=\"Enter amount\"\n                className=\"mt-1\"\n                data-testid=\"input-edit-amount\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"editNotes\">Notes (Optional)</Label>\n              <Input\n                id=\"editNotes\"\n                value={invoiceNotes}\n                onChange={(e) => setInvoiceNotes(e.target.value)}\n                placeholder=\"Add notes for this invoice\"\n                className=\"mt-1\"\n                data-testid=\"input-edit-notes\"\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowEditDialog(false)}\n                data-testid=\"button-cancel-edit\"\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleUpdateInvoice}\n                disabled={updateInvoiceMutation.isPending}\n                data-testid=\"button-save-invoice\"\n              >\n                {updateInvoiceMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Create Invoice Dialog */}\n      <Dialog open={showCreateInvoiceDialog} onOpenChange={setShowCreateInvoiceDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Create New Invoice</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"student\">Select Student</Label>\n              <Select value={selectedStudentId} onValueChange={setSelectedStudentId}>\n                <SelectTrigger data-testid=\"select-student\">\n                  <SelectValue placeholder=\"Select a student\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {students?.map((student: any) => (\n                    <SelectItem key={student.id} value={student.id}>\n                      {student.firstName} {student.lastName} (Roll #{student.rollNumber})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"amount\">Invoice Amount (PKR)</Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                value={invoiceAmount}\n                onChange={(e) => setInvoiceAmount(e.target.value)}\n                placeholder=\"0.00\"\n                data-testid=\"input-invoice-amount\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"notes\">Notes (Optional)</Label>\n              <Input\n                id=\"notes\"\n                value={invoiceNotes}\n                onChange={(e) => setInvoiceNotes(e.target.value)}\n                placeholder=\"Invoice description or notes\"\n                data-testid=\"input-invoice-notes\"\n              />\n            </div>\n            \n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowCreateInvoiceDialog(false)}\n                data-testid=\"button-cancel-invoice\"\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleCreateInvoice}\n                disabled={createInvoiceMutation.isPending}\n                data-testid=\"button-submit-invoice\"\n              >\n                {createInvoiceMutation.isPending ? \"Creating...\" : \"Create Invoice\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Invoice Creation/Edit Wizard */}\n      <InvoiceWizard\n        open={showInvoiceWizard}\n        onOpenChange={(open) => {\n          setShowInvoiceWizard(open);\n          if (!open) {\n            setEditingInvoice(null);\n          }\n        }}\n        editingInvoice={editingInvoice}\n      />\n    </div>\n  );\n}\n","size_bytes":59728},"client/src/pages/finance/PortalLinks.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Search, \n  ExternalLink, \n  Copy, \n  QrCode, \n  Mail, \n  Users,\n  Link as LinkIcon,\n  CheckCircle\n} from \"lucide-react\";\n\ninterface Student {\n  id: string;\n  rollNumber: string;\n  firstName: string;\n  lastName: string;\n  parentId: string | null;\n  classLevels: string[];\n  isActive: boolean;\n}\n\nexport default function PortalLinks() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [copiedLinks, setCopiedLinks] = useState<Set<string>>(new Set());\n  const { toast } = useToast();\n\n  // Fetch all students\n  const { data: students, isLoading } = useQuery<Student[]>({\n    queryKey: ['/api/students'],\n  });\n\n  // Filter students based on search term\n  const filteredStudents = students?.filter(student =>\n    student.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    student.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    student.rollNumber.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  // Generate portal link\n  const generatePortalLink = (studentId: string) => {\n    const baseUrl = window.location.origin;\n    return `${baseUrl}/student/${studentId}`;\n  };\n\n  // Copy link to clipboard\n  const copyToClipboard = async (studentId: string, studentName: string) => {\n    const link = generatePortalLink(studentId);\n    try {\n      await navigator.clipboard.writeText(link);\n      setCopiedLinks(prev => new Set(Array.from(prev).concat([studentId])));\n      toast({\n        title: \"Link Copied!\",\n        description: `Portal link for ${studentName} copied to clipboard`,\n      });\n      \n      // Reset copied state after 3 seconds\n      setTimeout(() => {\n        setCopiedLinks(prev => {\n          const updated = new Set(Array.from(prev));\n          updated.delete(studentId);\n          return updated;\n        });\n      }, 3000);\n    } catch (error) {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Unable to copy link to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Generate QR code (placeholder for now)\n  const generateQRCode = (studentId: string, studentName: string) => {\n    toast({\n      title: \"QR Code Feature\",\n      description: `QR code generation for ${studentName} would open here`,\n    });\n  };\n\n  // Send email (placeholder for now)\n  const sendEmail = (studentId: string, studentName: string) => {\n    const link = generatePortalLink(studentId);\n    const subject = `Student Portal Access - ${studentName}`;\n    const body = `Dear Parent,\\n\\nYou can access your child's academic portal using the following link:\\n\\n${link}\\n\\nThis portal provides real-time access to:\\n- Attendance records\\n- Grades and assessments\\n- Fee status and payments\\n\\nBest regards,\\nPrimax Academy`;\n    \n    const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n    window.open(mailtoLink);\n  };\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Student Portal Links</h1>\n        <p className=\"text-gray-600\">Generate and share direct portal access links with parents</p>\n      </div>\n\n      {/* Search */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"pt-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search by student name or roll number...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-student-search\"\n            />\n          </div>\n          <div className=\"mt-4 text-sm text-gray-500\">\n            Found {filteredStudents.length} students\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Students List */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <div key={i} className=\"animate-pulse bg-gray-200 h-48 rounded-lg\"></div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {filteredStudents.map((student) => {\n            const portalLink = generatePortalLink(student.id);\n            const isCopied = copiedLinks.has(student.id);\n            \n            return (\n              <Card key={student.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">\n                      {student.firstName} {student.lastName}\n                    </CardTitle>\n                    <Badge \n                      variant={student.isActive ? \"default\" : \"secondary\"}\n                      className={student.isActive ? \"bg-green-100 text-green-800\" : \"\"}\n                    >\n                      {student.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    <p>Roll: {student.rollNumber}</p>\n                    <p>Level: {student.classLevels && student.classLevels.length > 0 ? student.classLevels.map(level => level.toUpperCase()).join(', ') : 'No Class'}</p>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {/* Portal Link Display */}\n                  <div className=\"bg-gray-50 p-3 rounded-lg\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <LinkIcon className=\"h-4 w-4 text-blue-600\" />\n                      <span className=\"text-sm font-medium text-gray-700\">Portal Link</span>\n                    </div>\n                    <div className=\"text-xs text-gray-600 break-all font-mono bg-white p-2 rounded border\">\n                      {portalLink}\n                    </div>\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"flex flex-col gap-2\">\n                    <Button\n                      onClick={() => copyToClipboard(student.id, `${student.firstName} ${student.lastName}`)}\n                      variant={isCopied ? \"default\" : \"outline\"}\n                      className={`w-full ${isCopied ? \"bg-green-600 hover:bg-green-700\" : \"\"}`}\n                      data-testid={`button-copy-${student.id}`}\n                    >\n                      {isCopied ? (\n                        <>\n                          <CheckCircle className=\"h-4 w-4 mr-2\" />\n                          Copied!\n                        </>\n                      ) : (\n                        <>\n                          <Copy className=\"h-4 w-4 mr-2\" />\n                          Copy Link\n                        </>\n                      )}\n                    </Button>\n                    \n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <Button\n                        onClick={() => window.open(portalLink, '_blank')}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        data-testid={`button-preview-${student.id}`}\n                      >\n                        <ExternalLink className=\"h-4 w-4 mr-1\" />\n                        Preview\n                      </Button>\n                      <Button\n                        onClick={() => sendEmail(student.id, `${student.firstName} ${student.lastName}`)}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        data-testid={`button-email-${student.id}`}\n                      >\n                        <Mail className=\"h-4 w-4 mr-1\" />\n                        Email\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!isLoading && filteredStudents.length === 0 && (\n        <Card className=\"text-center py-12\">\n          <CardContent>\n            <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Students Found</h3>\n            <p className=\"text-gray-600\">\n              {searchTerm ? \"Try adjusting your search criteria\" : \"No students available\"}\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Help Section */}\n      <Card className=\"mt-6 bg-blue-50 border-blue-200\">\n        <CardContent className=\"pt-6\">\n          <h3 className=\"font-medium text-blue-900 mb-2\">How to use Portal Links</h3>\n          <div className=\"text-sm text-blue-800 space-y-1\">\n            <p>• <strong>Copy Link:</strong> Share the URL directly with parents via WhatsApp, SMS, or other messaging apps</p>\n            <p>• <strong>Preview:</strong> Test the portal link to ensure it works correctly</p>\n            <p>• <strong>Email:</strong> Send a professionally formatted email with the portal link</p>\n            <p>• <strong>Security:</strong> Each link is unique to a student and provides view-only access</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9682},"client/src/pages/finance/Receipts.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { formatPKR } from \"@/lib/currency\";\n\nexport default function Receipts() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  \n  // Advanced filtering states (same as invoices)\n  const [paymentMethodFilter, setPaymentMethodFilter] = useState(\"all\");\n  const [dateRangeFilter, setDateRangeFilter] = useState(\"all\");\n  const [amountRangeFilter, setAmountRangeFilter] = useState(\"all\");\n  const [studentFilter, setStudentFilter] = useState(\"all\");\n\n  const { data: payments, isLoading } = useQuery({\n    queryKey: ['/api/payments'],\n  });\n\n  const { data: students } = useQuery({\n    queryKey: ['/api/students'],\n  });\n\n  // Helper function to get student name\n  const getStudentName = (studentId: string) => {\n    const student = students?.find((s: any) => s.id === studentId);\n    return student ? `${student.firstName} ${student.lastName}` : 'Unknown Student';\n  };\n\n  // Helper function to get student roll number\n  const getStudentRollNumber = (studentId: string) => {\n    const student = students?.find((s: any) => s.id === studentId);\n    return student?.rollNumber || 'N/A';\n  };\n\n\n\n  const generatePDFReceipt = async (payment: any) => {\n    const studentName = getStudentName(payment.studentId);\n    const currentDate = new Date().toLocaleDateString();\n    const paymentDate = new Date(payment.paymentDate).toLocaleDateString();\n    const paymentTime = new Date(payment.paymentDate).toLocaleTimeString();\n    \n    const pdfHTML = `\n      <html>\n        <head>\n          <title>Receipt ${payment.receiptNumber}</title>\n          <style>\n            @page { \n              size: A4; \n              margin: 15mm; \n            }\n            body { \n              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; \n              margin: 0; \n              padding: 0; \n              color: #333;\n              line-height: 1.4;\n            }\n            .receipt-container {\n              max-width: 210mm;\n              margin: 0 auto;\n              background: white;\n              box-shadow: 0 0 10px rgba(0,0,0,0.1);\n            }\n            .header {\n              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n              color: white;\n              padding: 20px;\n              text-align: center;\n              border-radius: 8px 8px 0 0;\n            }\n            .header h1 {\n              margin: 0 0 8px 0;\n              font-size: 28px;\n              font-weight: 600;\n            }\n            .header p {\n              margin: 0;\n              font-size: 14px;\n              opacity: 0.9;\n            }\n            .receipt-details {\n              padding: 30px;\n              background: #f8f9fa;\n              border-bottom: 2px solid #e9ecef;\n            }\n            .receipt-grid {\n              display: grid;\n              grid-template-columns: 1fr 1fr;\n              gap: 30px;\n              margin-bottom: 20px;\n            }\n            .receipt-info h3 {\n              margin: 0 0 15px 0;\n              font-size: 16px;\n              color: #495057;\n              border-bottom: 2px solid #667eea;\n              padding-bottom: 8px;\n            }\n            .info-row {\n              display: flex;\n              justify-content: space-between;\n              margin-bottom: 8px;\n              padding: 6px 0;\n              border-bottom: 1px solid #e9ecef;\n            }\n            .info-label {\n              font-weight: 500;\n              color: #6c757d;\n            }\n            .info-value {\n              font-weight: 600;\n              color: #212529;\n            }\n            .payment-summary {\n              background: white;\n              padding: 30px;\n              border-radius: 8px;\n              box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n              margin: 20px 0;\n            }\n            .amount-display {\n              text-align: center;\n              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n              color: white;\n              padding: 25px;\n              border-radius: 8px;\n              margin: 20px 0;\n            }\n            .amount-display .amount {\n              font-size: 36px;\n              font-weight: 700;\n              margin: 10px 0;\n            }\n            .amount-display .label {\n              font-size: 14px;\n              opacity: 0.9;\n              text-transform: uppercase;\n              letter-spacing: 1px;\n            }\n            .footer {\n              padding: 30px;\n              text-align: center;\n              background: #f8f9fa;\n              border-top: 2px solid #e9ecef;\n            }\n            .footer-note {\n              font-size: 12px;\n              color: #6c757d;\n              margin-bottom: 15px;\n              line-height: 1.6;\n            }\n            .footer-signature {\n              font-size: 11px;\n              color: #868e96;\n              font-style: italic;\n            }\n            @media print {\n              body { print-color-adjust: exact; }\n              .receipt-container { box-shadow: none; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"receipt-container\">\n            <div class=\"header\">\n              <h1>PRIMAX</h1>\n              <p>Educational Institution - Payment Receipt</p>\n            </div>\n            \n            <div class=\"receipt-details\">\n              <div class=\"receipt-grid\">\n                <div class=\"receipt-info\">\n                  <h3>Receipt Information</h3>\n                  <div class=\"info-row\">\n                    <span class=\"info-label\">Receipt #:</span>\n                    <span class=\"info-value\">${payment.receiptNumber}</span>\n                  </div>\n                  <div class=\"info-row\">\n                    <span class=\"info-label\">Payment Date:</span>\n                    <span class=\"info-value\">${paymentDate}</span>\n                  </div>\n                  <div class=\"info-row\">\n                    <span class=\"info-label\">Payment Time:</span>\n                    <span class=\"info-value\">${paymentTime}</span>\n                  </div>\n                  <div class=\"info-row\">\n                    <span class=\"info-label\">Payment Method:</span>\n                    <span class=\"info-value\">${payment.paymentMethod === 'bank_transfer' ? 'Bank Transfer' : payment.paymentMethod === 'cash' ? 'Cash' : payment.paymentMethod?.toUpperCase()}</span>\n                  </div>\n                  ${payment.transactionNumber ? `\n                  <div class=\"info-row\">\n                    <span class=\"info-label\">Transaction #:</span>\n                    <span class=\"info-value\">${payment.transactionNumber}</span>\n                  </div>\n                  ` : ''}\n                </div>\n                \n                <div class=\"receipt-info\">\n                  <h3>Student Information</h3>\n                  <div class=\"info-row\">\n                    <span class=\"info-label\">Student Name:</span>\n                    <span class=\"info-value\">${studentName}</span>\n                  </div>\n                  <div class=\"info-row\">\n                    <span class=\"info-label\">Student ID:</span>\n                    <span class=\"info-value\">${payment.studentId}</span>\n                  </div>\n                  ${payment.notes ? `\n                  <div class=\"info-row\">\n                    <span class=\"info-label\">Notes:</span>\n                    <span class=\"info-value\">${payment.notes}</span>\n                  </div>\n                  ` : ''}\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"payment-summary\">\n              <div class=\"amount-display\">\n                <div class=\"label\">Amount Received</div>\n                <div class=\"amount\">Rs. ${Number(payment.amount).toLocaleString()}</div>\n                <div class=\"label\">Payment Confirmed</div>\n              </div>\n            </div>\n            \n            <div class=\"footer\">\n              <div class=\"footer-note\">\n                <strong>Thank you for your payment!</strong><br>\n                This receipt serves as proof of payment. Please retain for your records.<br>\n                For any queries, contact our finance office during business hours.\n              </div>\n              <div class=\"footer-signature\">\n                Primax Educational Institution<br>\n                Generated on ${currentDate} | This is a computer-generated receipt\n              </div>\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n    \n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(pdfHTML);\n      printWindow.document.close();\n      printWindow.focus();\n      setTimeout(() => printWindow.print(), 500);\n    }\n  };\n\n  // Generate thermal receipt format\n  const generateThermalReceipt = async (payment: any) => {\n    const studentName = getStudentName(payment.studentId);\n    const currentDate = new Date().toLocaleDateString();\n    const currentTime = new Date().toLocaleTimeString();\n    const paymentDate = new Date(payment.paymentDate).toLocaleDateString();\n    const paymentTime = new Date(payment.paymentDate).toLocaleTimeString();\n    \n    const thermalHTML = `\n      <html>\n        <head>\n          <title>Receipt ${payment.receiptNumber} - Thermal</title>\n          <style>\n            @page { \n              size: 80mm 150mm; \n              margin: 2mm; \n            }\n            body { \n              font-family: 'Courier New', monospace; \n              margin: 0; \n              padding: 2mm; \n              font-size: 10px;\n              line-height: 1.2;\n              color: #000;\n            }\n            .receipt {\n              width: 76mm;\n              margin: 0 auto;\n            }\n            .header {\n              text-align: center;\n              margin-bottom: 3mm;\n              border-bottom: 1px dashed #000;\n              padding-bottom: 2mm;\n            }\n            .header h1 {\n              margin: 0;\n              font-size: 14px;\n              font-weight: bold;\n            }\n            .header p {\n              margin: 1mm 0 0 0;\n              font-size: 8px;\n            }\n            .section {\n              margin: 2mm 0;\n              border-bottom: 1px dashed #ccc;\n              padding-bottom: 2mm;\n            }\n            .row {\n              display: flex;\n              justify-content: space-between;\n              margin: 1mm 0;\n              font-size: 9px;\n            }\n            .row-label {\n              font-weight: bold;\n            }\n            .amount-section {\n              text-align: center;\n              margin: 3mm 0;\n              background: #f0f0f0;\n              padding: 2mm;\n              border: 1px solid #000;\n            }\n            .amount {\n              font-size: 16px;\n              font-weight: bold;\n              margin: 1mm 0;\n            }\n            .footer {\n              text-align: center;\n              margin-top: 3mm;\n              font-size: 7px;\n              border-top: 1px dashed #000;\n              padding-top: 2mm;\n            }\n            @media print {\n              body { print-color-adjust: exact; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"receipt\">\n            <div class=\"header\">\n              <h1>PRIMAX</h1>\n              <p>Educational Institution</p>\n              <p>PAYMENT RECEIPT</p>\n            </div>\n            \n            <div class=\"section\">\n              <div class=\"row\">\n                <span class=\"row-label\">Receipt #:</span>\n                <span>${payment.receiptNumber}</span>\n              </div>\n              <div class=\"row\">\n                <span class=\"row-label\">Date:</span>\n                <span>${paymentDate}</span>\n              </div>\n              <div class=\"row\">\n                <span class=\"row-label\">Time:</span>\n                <span>${paymentTime}</span>\n              </div>\n            </div>\n            \n            <div class=\"section\">\n              <div class=\"row\">\n                <span class=\"row-label\">Student:</span>\n                <span style=\"font-size: 8px;\">${studentName}</span>\n              </div>\n              <div class=\"row\">\n                <span class=\"row-label\">ID:</span>\n                <span>${payment.studentId.substring(0, 8)}...</span>\n              </div>\n            </div>\n            \n            <div class=\"section\">\n              <div class=\"row\">\n                <span class=\"row-label\">Method:</span>\n                <span>${payment.paymentMethod === 'bank_transfer' ? 'Bank Transfer' : payment.paymentMethod === 'cash' ? 'Cash' : payment.paymentMethod?.toUpperCase()}</span>\n              </div>\n              ${payment.transactionNumber ? `\n              <div class=\"row\">\n                <span class=\"row-label\">Trans #:</span>\n                <span style=\"font-size: 7px;\">${payment.transactionNumber}</span>\n              </div>\n              ` : ''}\n            </div>\n            \n            <div class=\"amount-section\">\n              <div style=\"font-size: 10px;\">AMOUNT RECEIVED</div>\n              <div class=\"amount\">Rs. ${Number(payment.amount).toLocaleString()}</div>\n              <div style=\"font-size: 8px;\">PAYMENT CONFIRMED</div>\n            </div>\n            \n            ${payment.notes ? `\n            <div class=\"section\">\n              <div style=\"font-size: 8px; text-align: center;\">\n                ${payment.notes}\n              </div>\n            </div>\n            ` : ''}\n            \n            <div class=\"footer\">\n              <p>Thank you for your payment!</p>\n              <p>Generated: ${currentDate} ${currentTime}</p>\n              <p>This is a computer-generated receipt</p>\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n    \n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(thermalHTML);\n      printWindow.document.close();\n      printWindow.focus();\n      setTimeout(() => printWindow.print(), 500);\n    }\n  };\n\n  // Enhanced filtering logic (same as invoices)\n  const filteredPayments = (payments || []).filter((payment: any) => {\n    // Text search across receipt number, student name, and notes\n    const studentName = getStudentName(payment.studentId).toLowerCase();\n    const searchTerms = searchQuery.toLowerCase();\n    const studentRollNumber = payment.studentRollNumber || getStudentRollNumber(payment.studentId);\n    const matchesSearch = !searchQuery || \n      payment.receiptNumber?.toLowerCase().includes(searchTerms) ||\n      studentName.includes(searchTerms) ||\n      studentRollNumber.toLowerCase().includes(searchTerms) ||\n      payment.notes?.toLowerCase().includes(searchTerms);\n\n    // Payment method filter\n    const matchesPaymentMethod = !paymentMethodFilter || paymentMethodFilter === \"all\" || payment.paymentMethod === paymentMethodFilter;\n\n    // Student filter\n    const matchesStudent = !studentFilter || studentFilter === \"all\" || payment.studentId === studentFilter;\n\n    // Date range filter\n    const matchesDateRange = !dateRangeFilter || dateRangeFilter === \"all\" || (() => {\n      const paymentDate = new Date(payment.paymentDate);\n      const today = new Date();\n      \n      switch (dateRangeFilter) {\n        case 'today':\n          return paymentDate.toDateString() === today.toDateString();\n        case 'this-week':\n          const weekStart = new Date(today);\n          weekStart.setDate(today.getDate() - today.getDay());\n          return paymentDate >= weekStart;\n        case 'this-month':\n          return paymentDate.getMonth() === today.getMonth() && \n                 paymentDate.getFullYear() === today.getFullYear();\n        case 'last-30-days':\n          const thirtyDaysAgo = new Date(today);\n          thirtyDaysAgo.setDate(today.getDate() - 30);\n          return paymentDate >= thirtyDaysAgo;\n        default:\n          return true;\n      }\n    })();\n\n    // Amount range filter\n    const matchesAmountRange = !amountRangeFilter || amountRangeFilter === \"all\" || (() => {\n      const amount = parseFloat(payment.amount);\n      \n      switch (amountRangeFilter) {\n        case 'under-10k':\n          return amount < 10000;\n        case '10k-25k':\n          return amount >= 10000 && amount <= 25000;\n        case '25k-50k':\n          return amount >= 25000 && amount <= 50000;\n        case 'over-50k':\n          return amount > 50000;\n        default:\n          return true;\n      }\n    })();\n\n    return matchesSearch && matchesPaymentMethod && matchesStudent && matchesDateRange && matchesAmountRange;\n  });\n\n  // Clear all filters function\n  const clearAllFilters = () => {\n    setSearchQuery(\"\");\n    setPaymentMethodFilter(\"all\");\n    setDateRangeFilter(\"all\");\n    setAmountRangeFilter(\"all\");\n    setStudentFilter(\"all\");\n  };\n\n  const getPaymentMethodColor = (method: string) => {\n    switch (method) {\n      case 'cash':\n        return 'bg-green-100 text-green-800';\n      case 'bank_transfer':\n        return 'bg-blue-100 text-blue-800';\n      case 'card':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Payment Receipts</CardTitle>\n            <div className=\"flex space-x-3\">\n              <Button data-testid=\"button-export-receipts\">\n                <i className=\"fas fa-download mr-2\"></i>\n                Export\n              </Button>\n            </div>\n          </div>\n          \n          {/* Enhanced Search and Filters (same as invoices) */}\n          <div className=\"space-y-4\">\n            {/* Search Bar */}\n            <div className=\"relative\">\n              <Input\n                placeholder=\"Search receipts, students, roll numbers, or notes...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 w-full\"\n                data-testid=\"input-search-receipts\"\n              />\n              <i className=\"fas fa-search absolute left-3 top-3 text-gray-400\"></i>\n              {searchQuery && (\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"absolute right-2 top-2 h-6 w-6 p-0\"\n                  onClick={() => setSearchQuery(\"\")}\n                >\n                  <i className=\"fas fa-times text-gray-400\"></i>\n                </Button>\n              )}\n            </div>\n\n            {/* Filter Controls */}\n            <div className=\"flex flex-wrap gap-3 items-center\">\n              {/* Payment Method Filter */}\n              <Select value={paymentMethodFilter} onValueChange={setPaymentMethodFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-method-filter\">\n                  <SelectValue placeholder=\"Payment Method\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Methods</SelectItem>\n                  <SelectItem value=\"cash\">Cash</SelectItem>\n                  <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                  <SelectItem value=\"card\">Card</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Student Filter */}\n              <Select value={studentFilter} onValueChange={setStudentFilter}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-student-filter\">\n                  <SelectValue placeholder=\"Student\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Students</SelectItem>\n                  {(students || []).map((student: any) => (\n                    <SelectItem key={student.id} value={student.id}>\n                      {student.firstName} {student.lastName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* Date Range Filter */}\n              <Select value={dateRangeFilter} onValueChange={setDateRangeFilter}>\n                <SelectTrigger className=\"w-36\" data-testid=\"select-date-filter\">\n                  <SelectValue placeholder=\"Date Range\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Dates</SelectItem>\n                  <SelectItem value=\"today\">Today</SelectItem>\n                  <SelectItem value=\"this-week\">This Week</SelectItem>\n                  <SelectItem value=\"this-month\">This Month</SelectItem>\n                  <SelectItem value=\"last-30-days\">Last 30 Days</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Amount Range Filter */}\n              <Select value={amountRangeFilter} onValueChange={setAmountRangeFilter}>\n                <SelectTrigger className=\"w-36\" data-testid=\"select-amount-filter\">\n                  <SelectValue placeholder=\"Amount Range\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Amounts</SelectItem>\n                  <SelectItem value=\"under-10k\">Under Rs. 10K</SelectItem>\n                  <SelectItem value=\"10k-25k\">Rs. 10K - 25K</SelectItem>\n                  <SelectItem value=\"25k-50k\">Rs. 25K - 50K</SelectItem>\n                  <SelectItem value=\"over-50k\">Over Rs. 50K</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Clear Filters Button */}\n              {(searchQuery || paymentMethodFilter !== \"all\" || dateRangeFilter !== \"all\" || amountRangeFilter !== \"all\" || studentFilter !== \"all\") && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={clearAllFilters}\n                  data-testid=\"button-clear-filters\"\n                >\n                  <i className=\"fas fa-times mr-2\"></i>\n                  Clear Filters\n                </Button>\n              )}\n            </div>\n\n            {/* Results Count */}\n            {payments && (\n              <div className=\"text-sm text-gray-600\">\n                Showing {filteredPayments.length} of {payments.length} receipts\n              </div>\n            )}\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700 w-52\">Receipt #</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Roll #</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700 w-48\">Student</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Date</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700 w-36\">Amount</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700 w-40\">Payment Method</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Notes</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {filteredPayments.length > 0 ? filteredPayments.map((payment: any) => (\n                  <tr key={payment.id} className=\"hover:bg-gray-50\" data-testid={`row-payment-${payment.id}`}>\n                    <td className=\"px-4 py-3 w-52\">\n                      <button \n                        className=\"font-medium text-blue-600 hover:text-blue-800 hover:underline cursor-pointer font-mono text-sm whitespace-nowrap\"\n                        onClick={() => {\n                          // Create format selection dialog first\n                          const formatChoice = window.confirm(\"Choose Receipt Format:\\n\\nOK = Full PDF Format (A4)\\nCancel = Thermal Receipt Format\");\n                          \n                          if (formatChoice) {\n                            generatePDFReceipt(payment);\n                          } else {\n                            generateThermalReceipt(payment);\n                          }\n                        }}\n                        data-testid={`text-receipt-${payment.id}`}\n                      >\n                        {payment.receiptNumber || 'N/A'}\n                      </button>\n                    </td>\n                    <td className=\"px-4 py-3\" data-testid={`text-roll-number-${payment.id}`}>\n                      <span className=\"font-mono text-sm bg-gray-100 px-2 py-1 rounded\">\n                        {payment.studentRollNumber || getStudentRollNumber(payment.studentId)}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3 w-48\" data-testid={`text-student-${payment.id}`}>\n                      <span className=\"whitespace-nowrap\">\n                        {payment.studentFirstName && payment.studentLastName \n                          ? `${payment.studentFirstName} ${payment.studentLastName}`\n                          : getStudentName(payment.studentId)}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3\" data-testid={`text-payment-date-${payment.id}`}>\n                      {new Date(payment.paymentDate).toLocaleDateString()}\n                    </td>\n                    <td className=\"px-4 py-3 w-36\">\n                      <span className=\"font-semibold whitespace-nowrap\" data-testid={`text-amount-${payment.id}`}>\n                        Rs. {Number(payment.amount).toLocaleString()}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3 w-40\">\n                      <Badge \n                        className={`${getPaymentMethodColor(payment.paymentMethod)} whitespace-nowrap`}\n                        data-testid={`badge-method-${payment.id}`}\n                      >\n                        {payment.paymentMethod === 'bank_transfer' ? 'BANK TRANSFER' : \n                         payment.paymentMethod === 'cash' ? 'CASH' : \n                         payment.paymentMethod?.toUpperCase()}\n                      </Badge>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <span className=\"text-gray-600\" data-testid={`text-notes-${payment.id}`} title={payment.notes || '-'}>\n                        {payment.notes || '-'}\n                      </span>\n                    </td>\n\n                  </tr>\n                )) : (\n                  <tr>\n                    <td colSpan={6} className=\"px-4 py-8 text-center text-gray-500\">\n                      <i className=\"fas fa-receipt text-4xl mb-4\"></i>\n                      <p>No receipts found</p>\n                      {(searchQuery || paymentMethodFilter !== \"all\" || dateRangeFilter !== \"all\" || amountRangeFilter !== \"all\" || studentFilter !== \"all\") && (\n                        <p className=\"text-sm mt-2\">Try adjusting your filters or search terms</p>\n                      )}\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":27986},"client/src/pages/finance/StudentLedger.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Edit, Settings, Eye, DollarSign, Bell, UserX, Trash2 } from \"lucide-react\";\n\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatPKR } from \"@/lib/currency\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Student } from \"@shared/schema\";\n\nexport default function StudentLedger() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [classFilter, setClassFilter] = useState(\"\");\n  const [feeStatusFilter, setFeeStatusFilter] = useState(\"\");\n  const [attendanceFilter, setAttendanceFilter] = useState(\"\");\n  const [selectedStudent, setSelectedStudent] = useState<any>(null);\n\n  // Status color function matching the invoices page design\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return 'bg-green-100 text-green-800';\n      case 'overdue':\n        return 'bg-red-100 text-red-800';\n      case 'partial':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'pending':\n        return 'bg-red-50 text-red-700'; // Light red for pending\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const [showPaymentDialog, setShowPaymentDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [showSettingsDialog, setShowSettingsDialog] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [studentToDelete, setStudentToDelete] = useState<any>(null);\n\n  const [paymentAmount, setPaymentAmount] = useState(\"\");\n  const [paymentMethod, setPaymentMethod] = useState(\"\");\n  const [transactionNumber, setTransactionNumber] = useState(\"\");\n  const [paymentNotes, setPaymentNotes] = useState(\"\");\n  const [reminderMessage, setReminderMessage] = useState(\"\");\n  \n  // Column visibility settings\n  const [columnSettings, setColumnSettings] = useState({\n    showSubjects: true,\n    showCreationDate: true,\n    showLastUpdate: false, // Hidden by default as requested\n    showDeactivatedStudents: false, // Show deactivated students toggle\n  });\n\n  // Edit form data\n  const [editFormData, setEditFormData] = useState<any>({});\n\n  const [, setLocation] = useLocation();\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: students, isLoading } = useQuery<Student[]>({\n    queryKey: [\"/api/students\"],\n  });\n\n  // Fetch financial data for all students\n  const { data: studentsWithFinancialData, isLoading: isLoadingFinancialData } =\n    useQuery({\n      queryKey: [\"/api/students-with-financial\"],\n      queryFn: async () => {\n        if (!students || students.length === 0) return [];\n\n        const studentsWithData = await Promise.all(\n          students.map(async (student) => {\n            try {\n              // Fetch financial, attendance, grade, and enrollment data in parallel\n              const [financialRes, attendanceRes, gradeRes, enrollmentsRes] = await Promise.all(\n                [\n                  fetch(`/api/students/${student.id}/financial`).then((r) =>\n                    r.ok ? r.json() : null,\n                  ),\n                  fetch(`/api/students/${student.id}/attendance`).then((r) =>\n                    r.ok ? r.json() : null,\n                  ),\n                  fetch(`/api/students/${student.id}/grade`).then((r) =>\n                    r.ok ? r.json() : null,\n                  ),\n                  fetch(`/api/enrollments/student/${student.id}`).then((r) =>\n                    r.ok ? r.json() : [],\n                  ),\n                ],\n              );\n\n              return {\n                ...student,\n                feeStatus: financialRes?.feeStatus || \"pending\",\n                outstandingBalance: financialRes?.outstandingBalance || 0,\n                attendancePercentage: attendanceRes?.attendancePercentage || 0,\n                averageGrade: gradeRes?.averageGrade || \"N/A\",\n                enrollments: enrollmentsRes || [],\n                createdAt: student.createdAt || new Date().toISOString(),\n                lastUpdated: financialRes?.lastUpdated || student.createdAt || new Date().toISOString(),\n              };\n            } catch (error) {\n              console.error(\n                `Error fetching data for student ${student.id}:`,\n                error,\n              );\n              return {\n                ...student,\n                feeStatus: \"pending\" as const,\n                outstandingBalance: 0,\n                attendancePercentage: 0,\n                averageGrade: \"N/A\",\n                enrollments: [],\n                createdAt: student.createdAt || new Date().toISOString(),\n                lastUpdated: student.createdAt || new Date().toISOString(),\n              };\n            }\n          }),\n        );\n\n        return studentsWithData;\n      },\n      enabled: !isLoading && !!students && students.length > 0,\n    });\n\n  const filteredStudents =\n    studentsWithFinancialData?.filter((student) => {\n      const matchesSearch =\n        searchQuery === \"\" ||\n        `${student.firstName} ${student.lastName}`\n          .toLowerCase()\n          .includes(searchQuery.toLowerCase()) ||\n        student.rollNumber.toLowerCase().includes(searchQuery.toLowerCase());\n\n      const matchesClass =\n        classFilter === \"all\" ||\n        classFilter === \"\" ||\n        student.classLevels && student.classLevels.includes(classFilter);\n      const matchesFeeStatus =\n        feeStatusFilter === \"all\" ||\n        feeStatusFilter === \"\" ||\n        student.feeStatus === feeStatusFilter;\n\n      // Attendance filter logic\n      const matchesAttendance =\n        attendanceFilter === \"all\" ||\n        attendanceFilter === \"\" ||\n        (attendanceFilter === \"excellent\" &&\n          student.attendancePercentage >= 90) ||\n        (attendanceFilter === \"good\" &&\n          student.attendancePercentage >= 75 &&\n          student.attendancePercentage < 90) ||\n        (attendanceFilter === \"poor\" && student.attendancePercentage < 75);\n\n      // Active/Deactivated filter logic\n      const matchesActiveStatus = columnSettings.showDeactivatedStudents \n        ? true // Show all students when toggle is on\n        : student.isActive !== false; // Hide deactivated students by default\n\n      return (\n        matchesSearch && matchesClass && matchesFeeStatus && matchesAttendance && matchesActiveStatus\n      );\n    }) || [];\n\n  const handleExport = () => {\n    // Export functionality\n    toast({\n      title: \"Export started\",\n      description: \"Student ledger data is being exported...\",\n    });\n  };\n\n\n\n  const handleRecordPayment = async (student: any) => {\n    setSelectedStudent(student);\n    setPaymentAmount(student.outstandingBalance.toString());\n    setPaymentMethod(\"\");\n    setTransactionNumber(\"\");\n\n    // Fetch the student's outstanding invoices to get the first one to apply payment to\n    try {\n      const response = await fetch(`/api/students/${student.id}/financial`);\n      const financialData = await response.json();\n\n      // Store the first outstanding invoice ID if available\n      if (\n        financialData.outstandingInvoices &&\n        financialData.outstandingInvoices.length > 0\n      ) {\n        student.firstInvoiceId = financialData.outstandingInvoices[0].id;\n      }\n    } catch (error) {\n      console.error(\"Error fetching student financial data:\", error);\n    }\n\n    setShowPaymentDialog(true);\n  };\n\n  const handleSendReminder = async (student: any) => {\n    try {\n      // In a real app, this would send SMS/email reminder\n      toast({\n        title: \"Reminder Sent\",\n        description: `Fee reminder sent to ${student.firstName} ${student.lastName}'s parents`,\n        variant: \"default\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send reminder\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Payment mutation\n  const paymentMutation = useMutation({\n    mutationFn: async (paymentData: {\n      studentId: string;\n      amount: string;\n      paymentMethod: string;\n      transactionNumber?: string;\n      notes?: string;\n    }) => {\n      const response = await apiRequest(\"POST\", \"/api/payments\", {\n        studentId: paymentData.studentId,\n        invoiceId: selectedStudent?.firstInvoiceId, // Link to specific invoice if available\n        amount: paymentData.amount,\n        paymentMethod: paymentData.paymentMethod,\n        transactionNumber: paymentData.transactionNumber,\n        paymentDate: new Date().toISOString(),\n        notes:\n          paymentData.notes ||\n          `Payment for ${selectedStudent?.firstName} ${selectedStudent?.lastName}`,\n      });\n      return response.json();\n    },\n    onSuccess: async (data) => {\n      toast({\n        title: \"Payment recorded successfully\",\n        description: `Payment of Rs. ${paymentAmount} recorded for ${selectedStudent?.firstName} ${selectedStudent?.lastName}`,\n      });\n\n      // Force refresh student data in correct order\n      await queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/students-with-financial\"] });\n      \n      // Force refetch to ensure UI updates immediately\n      await queryClient.refetchQueries({ queryKey: [\"/api/students\"] });\n      await queryClient.refetchQueries({ queryKey: [\"/api/students-with-financial\"] });\n\n      // Reset form\n      setPaymentAmount(\"\");\n      setPaymentMethod(\"\");\n      setTransactionNumber(\"\");\n      setPaymentNotes(\"\");\n      setShowPaymentDialog(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Payment failed\",\n        description: error.message || \"Failed to process payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitPayment = async () => {\n    if (!selectedStudent || !paymentAmount || !paymentMethod) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await paymentMutation.mutateAsync({\n        studentId: selectedStudent.id,\n        amount: paymentAmount,\n        paymentMethod: paymentMethod,\n        transactionNumber: transactionNumber || undefined,\n        notes: paymentNotes || undefined,\n      });\n    } catch (error) {\n      console.error(\"Payment error:\", error);\n    }\n  };\n\n  // New handler functions\n  const handleStudentClick = (student: any) => {\n    // Navigate to student's individual portal/dashboard\n    setLocation(`/student-portal/${student.id}`);\n  };\n\n  const handleEditStudent = (student: any) => {\n    setEditFormData({\n      id: student.id,\n      firstName: student.firstName,\n      lastName: student.lastName,\n      dateOfBirth: student.dateOfBirth,\n      gender: student.gender,\n      classLevels: student.classLevels,\n      rollNumber: student.rollNumber,\n      studentPhone: student.studentPhone,\n      studentEmail: student.studentEmail,\n      homeAddress: student.homeAddress,\n      parentName: student.parentName,\n      parentPhone: student.parentPhone,\n      parentEmail: student.parentEmail,\n      additionalParentName: student.additionalParentName,\n      additionalParentPhone: student.additionalParentPhone,\n      additionalParentEmail: student.additionalParentEmail,\n    });\n    setSelectedStudent(student);\n    setShowEditDialog(true);\n  };\n\n  const handleToggleActiveStatus = (student: any) => {\n    toggleActiveStatusMutation.mutate({\n      studentId: student.id,\n      isActive: student.isActive === false ? true : false\n    });\n  };\n\n  const handleDeleteStudent = (student: any) => {\n    setStudentToDelete(student);\n    setShowDeleteDialog(true);\n  };\n\n  const confirmDeleteStudent = () => {\n    if (studentToDelete) {\n      deleteStudentMutation.mutate(studentToDelete.id);\n      setShowDeleteDialog(false);\n      setStudentToDelete(null);\n    }\n  };\n\n\n\n  const handleUpdateColumnSettings = (setting: keyof typeof columnSettings, value: boolean) => {\n    setColumnSettings(prev => ({\n      ...prev,\n      [setting]: value\n    }));\n  };\n\n  // Edit form mutation\n  const editStudentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"PATCH\", `/api/students/${data.id}`, data);\n      return response.json();\n    },\n    onSuccess: async () => {\n      toast({\n        title: \"Student updated\",\n        description: \"Student information has been updated successfully\",\n      });\n      \n      // Force refresh student data in correct order\n      await queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/students-with-financial\"] });\n      \n      // Force refetch to ensure UI updates immediately\n      await queryClient.refetchQueries({ queryKey: [\"/api/students\"] });\n      await queryClient.refetchQueries({ queryKey: [\"/api/students-with-financial\"] });\n      \n      setShowEditDialog(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message || \"Failed to update student information\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Toggle active status mutation\n  const toggleActiveStatusMutation = useMutation({\n    mutationFn: async (data: { studentId: string; isActive: boolean }) => {\n      const response = await apiRequest(\"PATCH\", `/api/students/${data.studentId}/toggle-active`, data);\n      return response.json();\n    },\n    onSuccess: async (data, variables) => {\n      toast({\n        title: variables.isActive ? \"Student reactivated\" : \"Student deactivated\",\n        description: variables.isActive \n          ? \"Student has been reactivated and can access their portal\"\n          : \"Student has been deactivated and portal access disabled\",\n      });\n      \n      // Force refresh student data in correct order\n      await queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/students-with-financial\"] });\n      \n      // Force refetch to ensure UI updates immediately\n      await queryClient.refetchQueries({ queryKey: [\"/api/students\"] });\n      await queryClient.refetchQueries({ queryKey: [\"/api/students-with-financial\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Action failed\",\n        description: error.message || \"Failed to update student status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete student mutation\n  const deleteStudentMutation = useMutation({\n    mutationFn: async (studentId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/students/${studentId}`);\n      return response.json();\n    },\n    onSuccess: async () => {\n      toast({\n        title: \"Student deleted\",\n        description: \"Student has been permanently deleted from the system\",\n      });\n      \n      // Force refresh student data in correct order\n      await queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/students-with-financial\"] });\n      \n      // Force refetch to ensure UI updates immediately\n      await queryClient.refetchQueries({ queryKey: [\"/api/students\"] });\n      await queryClient.refetchQueries({ queryKey: [\"/api/students-with-financial\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Delete failed\",\n        description: error.message || \"Failed to delete student\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveEdit = () => {\n    editStudentMutation.mutate(editFormData);\n  };\n\n  if (isLoading || isLoadingFinancialData) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Student Ledger</CardTitle>\n            <div className=\"flex space-x-3\">\n              <div className=\"relative\">\n                <Input\n                  placeholder=\"Search students...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-students\"\n                />\n                <i className=\"fas fa-search absolute left-3 top-3 text-gray-400\"></i>\n              </div>\n              <Button \n                variant=\"outline\"\n                onClick={() => setShowSettingsDialog(true)} \n                data-testid=\"button-column-settings\"\n              >\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Columns\n              </Button>\n              <Button onClick={handleExport} data-testid=\"button-export-ledger\">\n                <i className=\"fas fa-download mr-2\"></i>\n                Export\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {/* Filters */}\n          <div className=\"flex flex-wrap gap-4\">\n            <Select onValueChange={setClassFilter}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-class-filter\">\n                <SelectValue placeholder=\"All Classes\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Classes</SelectItem>\n                <SelectItem value=\"o-level\">O-Level</SelectItem>\n                <SelectItem value=\"igcse\">IGCSE</SelectItem>\n                <SelectItem value=\"as-level\">AS-Level</SelectItem>\n                <SelectItem value=\"a2-level\">A2-Level</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select onValueChange={setFeeStatusFilter}>\n              <SelectTrigger\n                className=\"w-40\"\n                data-testid=\"select-fee-status-filter\"\n              >\n                <SelectValue placeholder=\"All Fee Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Fee Status</SelectItem>\n                <SelectItem value=\"paid\">Paid</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"overdue\">Overdue</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select onValueChange={setAttendanceFilter}>\n              <SelectTrigger\n                className=\"w-40\"\n                data-testid=\"select-attendance-filter\"\n              >\n                <SelectValue placeholder=\"All Attendance\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Attendance</SelectItem>\n                <SelectItem value=\"excellent\">90%+</SelectItem>\n                <SelectItem value=\"good\">75-89%</SelectItem>\n                <SelectItem value=\"poor\">&lt;75%</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Student Table */}\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">\n                    Student\n                  </th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">\n                    Class\n                  </th>\n                  {columnSettings.showSubjects && (\n                    <th className=\"px-4 py-3 text-left font-medium text-gray-700\">\n                      Current Subjects\n                    </th>\n                  )}\n                  {columnSettings.showCreationDate && (\n                    <th className=\"px-4 py-3 text-left font-medium text-gray-700\">\n                      Created\n                    </th>\n                  )}\n                  {columnSettings.showLastUpdate && (\n                    <th className=\"px-4 py-3 text-left font-medium text-gray-700\">\n                      Last Updated\n                    </th>\n                  )}\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">\n                    Outstanding Fees\n                  </th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">\n                    Attendance %\n                  </th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">\n                    Avg Grade\n                  </th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {filteredStudents.length > 0 ? (\n                  filteredStudents.map((student) => {\n                    return (\n                      <tr\n                        key={student.id}\n                        className=\"hover:bg-gray-50\"\n                        data-testid={`row-student-${student.id}`}\n                      >\n                        <td className=\"px-4 py-3\">\n                          <div className=\"flex items-center\">\n                            {student.profileImageUrl && (\n                              <img\n                                src={student.profileImageUrl}\n                                alt=\"Student photo\"\n                                className=\"w-8 h-8 rounded-full object-cover mr-3\"\n                              />\n                            )}\n                            <div>\n                              <button\n                                onClick={() => handleStudentClick(student)}\n                                className=\"font-medium text-blue-600 hover:text-blue-800 cursor-pointer text-left\"\n                                data-testid={`link-student-name-${student.id}`}\n                              >\n                                {student.firstName} {student.lastName}\n                              </button>\n                              <p\n                                className=\"text-gray-500\"\n                                data-testid={`text-roll-number-${student.id}`}\n                              >\n                                Roll: {student.rollNumber}\n                              </p>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-4 py-3\">\n                          <div className=\"flex flex-wrap gap-1\">\n                            {student.classLevels && student.classLevels.length > 0 ? (\n                              student.classLevels.map((level, index) => (\n                                <Badge\n                                  key={index}\n                                  variant={\n                                    level === \"a2-level\"\n                                      ? \"default\"\n                                      : \"secondary\"\n                                  }\n                                  data-testid={`badge-class-${student.id}-${index}`}\n                                  className=\"text-xs\"\n                                >\n                                  {level.toUpperCase()}\n                                </Badge>\n                              ))\n                            ) : (\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                No Class\n                              </Badge>\n                            )}\n                          </div>\n                        </td>\n                        {columnSettings.showSubjects && (\n                          <td className=\"px-4 py-3\">\n                            <div className=\"flex flex-wrap gap-1\">\n                              {student.enrollments?.length > 0 ? (\n                                student.enrollments.slice(0, 3).map((enrollment: any, index: number) => (\n                                  <Badge \n                                    key={enrollment.id || index} \n                                    variant=\"outline\" \n                                    className=\"text-xs\"\n                                  >\n                                    {enrollment.subjectName || enrollment.subject?.name || 'Unknown'}\n                                  </Badge>\n                                ))\n                              ) : (\n                                <span className=\"text-gray-400 text-xs\">No subjects</span>\n                              )}\n                              {student.enrollments?.length > 3 && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  +{student.enrollments.length - 3}\n                                </Badge>\n                              )}\n                            </div>\n                          </td>\n                        )}\n                        {columnSettings.showCreationDate && (\n                          <td className=\"px-4 py-3\">\n                            <span className=\"text-sm text-gray-600\">\n                              {new Date(student.createdAt).toLocaleDateString()}\n                            </span>\n                          </td>\n                        )}\n                        {columnSettings.showLastUpdate && (\n                          <td className=\"px-4 py-3\">\n                            <span className=\"text-sm text-gray-600\">\n                              {new Date(student.lastUpdated).toLocaleDateString()}\n                            </span>\n                          </td>\n                        )}\n                        <td className=\"px-4 py-3\">\n                          <div className=\"flex flex-col\">\n                            <span\n                              className={`font-semibold ${student.outstandingBalance > 0 ? \"text-red-600\" : \"text-green-600\"}`}\n                              data-testid={`text-outstanding-fees-${student.id}`}\n                            >\n                              Rs. {student.outstandingBalance.toLocaleString()}\n                            </span>\n                            <Badge\n                              className={`${getStatusColor(student.feeStatus || 'unknown')} w-fit mt-1`}\n                            >\n                              {student.feeStatus ? student.feeStatus.toUpperCase() : 'UNKNOWN'}\n                            </Badge>\n                          </div>\n                        </td>\n                        <td className=\"px-4 py-3\">\n                          <div className=\"flex items-center\">\n                            <Progress\n                              value={student.attendancePercentage}\n                              className=\"w-16 h-2 mr-2\"\n                            />\n                            <span\n                              className={`text-sm font-medium ${\n                                student.attendancePercentage >= 90\n                                  ? \"text-green-600\"\n                                  : student.attendancePercentage >= 75\n                                    ? \"text-yellow-600\"\n                                    : \"text-red-600\"\n                              }`}\n                              data-testid={`text-attendance-${student.id}`}\n                            >\n                              {student.attendancePercentage}%\n                            </span>\n                          </div>\n                        </td>\n                        <td className=\"px-4 py-3\">\n                          <Badge\n                            variant={\n                              student.averageGrade.includes(\"A\")\n                                ? \"default\"\n                                : student.averageGrade.includes(\"B\")\n                                  ? \"secondary\"\n                                  : \"outline\"\n                            }\n                            data-testid={`badge-avg-grade-${student.id}`}\n                          >\n                            {student.averageGrade}\n                          </Badge>\n                        </td>\n                        <td className=\"px-4 py-3\">\n                          <div className=\"flex space-x-2\">\n\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"text-green-600\"\n                              onClick={() => handleRecordPayment(student)}\n                              data-testid={`button-record-payment-${student.id}`}\n                              title=\"Record Payment\"\n                            >\n                              <DollarSign className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => handleSendReminder(student)}\n                              disabled={student.feeStatus === \"paid\"}\n                              data-testid={`button-send-reminder-${student.id}`}\n                              title=\"Send Reminder\"\n                            >\n                              <Bell className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"text-blue-600\"\n                              onClick={() => handleEditStudent(student)}\n                              data-testid={`button-edit-student-${student.id}`}\n                              title=\"Edit Student\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className={student.isActive === false ? \"text-green-600\" : \"text-orange-600\"}\n                              onClick={() => handleToggleActiveStatus(student)}\n                              data-testid={`button-toggle-active-${student.id}`}\n                              title={student.isActive === false ? \"Reactivate Student\" : \"Deactivate Student\"}\n                            >\n                              <UserX className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"text-red-600\"\n                              onClick={() => handleDeleteStudent(student)}\n                              data-testid={`button-delete-student-${student.id}`}\n                              title=\"Delete Student\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  })\n                ) : (\n                  <tr>\n                    <td\n                      colSpan={6 + (columnSettings.showSubjects ? 1 : 0) + (columnSettings.showCreationDate ? 1 : 0) + (columnSettings.showLastUpdate ? 1 : 0)}\n                      className=\"px-4 py-8 text-center text-gray-500\"\n                    >\n                      <i className=\"fas fa-users text-4xl mb-4\"></i>\n                      <p>No students found</p>\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n\n          {/* Pagination */}\n          {filteredStudents.length > 0 && (\n            <div className=\"flex items-center justify-between\">\n              <div\n                className=\"text-sm text-gray-600\"\n                data-testid=\"text-pagination-info\"\n              >\n                Showing 1 to {Math.min(10, filteredStudents.length)} of{\" \"}\n                {filteredStudents.length} students\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  data-testid=\"button-previous-page\"\n                >\n                  Previous\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  data-testid=\"button-next-page\"\n                >\n                  Next\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n\n\n      {/* Record Payment Dialog */}\n      <Dialog open={showPaymentDialog} onOpenChange={setShowPaymentDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Record Payment</DialogTitle>\n          </DialogHeader>\n          {selectedStudent && (\n            <div className=\"space-y-4\">\n              <div className=\"text-sm text-gray-600\">\n                Recording payment for:{\" \"}\n                <strong>\n                  {selectedStudent.firstName} {selectedStudent.lastName}\n                </strong>\n              </div>\n              <div>\n                <Label htmlFor=\"amount\">Payment Amount (PKR)</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  value={paymentAmount}\n                  onChange={(e) => setPaymentAmount(e.target.value)}\n                  placeholder=\"0.00\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"method\">Payment Method</Label>\n                <Select value={paymentMethod} onValueChange={setPaymentMethod}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select payment method\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"cash\">Cash</SelectItem>\n                    <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Transaction Number for Bank Transfer */}\n              {paymentMethod === \"bank_transfer\" && (\n                <div>\n                  <Label htmlFor=\"transactionNumber\">\n                    Transaction Number (Optional)\n                  </Label>\n                  <Input\n                    id=\"transactionNumber\"\n                    value={transactionNumber}\n                    onChange={(e) => setTransactionNumber(e.target.value)}\n                    placeholder=\"Enter bank transaction number\"\n                    className=\"mt-1\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Enter the bank transaction/reference number for this\n                    transfer (if available)\n                  </p>\n                </div>\n              )}\n\n              {/* Notes Field */}\n              <div>\n                <Label htmlFor=\"paymentNotes\">Notes (Optional)</Label>\n                <Input\n                  id=\"paymentNotes\"\n                  value={paymentNotes}\n                  onChange={(e) => setPaymentNotes(e.target.value)}\n                  placeholder=\"Add payment notes or details\"\n                  className=\"mt-1\"\n                  data-testid=\"input-payment-notes\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Add any additional notes or details about this payment\n                </p>\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowPaymentDialog(false)}\n                >\n                  Cancel\n                </Button>\n                <Button onClick={handleSubmitPayment}>Record Payment</Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Column Settings Dialog */}\n      <Dialog open={showSettingsDialog} onOpenChange={setShowSettingsDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Column Settings</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"show-subjects\">Show Current Subjects</Label>\n              <Switch\n                id=\"show-subjects\"\n                checked={columnSettings.showSubjects}\n                onCheckedChange={(checked) => handleUpdateColumnSettings('showSubjects', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"show-creation-date\">Show Creation Date</Label>\n              <Switch\n                id=\"show-creation-date\"\n                checked={columnSettings.showCreationDate}\n                onCheckedChange={(checked) => handleUpdateColumnSettings('showCreationDate', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"show-last-update\">Show Last Update Date</Label>\n              <Switch\n                id=\"show-last-update\"\n                checked={columnSettings.showLastUpdate}\n                onCheckedChange={(checked) => handleUpdateColumnSettings('showLastUpdate', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"show-deactivated-students\">View Deactivated Students</Label>\n              <Switch\n                id=\"show-deactivated-students\"\n                checked={columnSettings.showDeactivatedStudents}\n                onCheckedChange={(checked) => handleUpdateColumnSettings('showDeactivatedStudents', checked)}\n              />\n            </div>\n          </div>\n          <div className=\"flex justify-end pt-4\">\n            <Button onClick={() => setShowSettingsDialog(false)}>\n              Done\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Student Dialog */}\n      <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n        <DialogContent className=\"max-w-3xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Student Information</DialogTitle>\n          </DialogHeader>\n          {selectedStudent && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"edit-first-name\">First Name *</Label>\n                  <Input\n                    id=\"edit-first-name\"\n                    value={editFormData.firstName || ''}\n                    onChange={(e) => setEditFormData(prev => ({ ...prev, firstName: e.target.value }))}\n                    data-testid=\"input-edit-first-name\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-last-name\">Last Name *</Label>\n                  <Input\n                    id=\"edit-last-name\"\n                    value={editFormData.lastName || ''}\n                    onChange={(e) => setEditFormData(prev => ({ ...prev, lastName: e.target.value }))}\n                    data-testid=\"input-edit-last-name\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-date-of-birth\">Date of Birth *</Label>\n                  <Input\n                    id=\"edit-date-of-birth\"\n                    type=\"date\"\n                    value={editFormData.dateOfBirth || ''}\n                    onChange={(e) => setEditFormData(prev => ({ ...prev, dateOfBirth: e.target.value }))}\n                    data-testid=\"input-edit-date-of-birth\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-gender\">Gender *</Label>\n                  <Select \n                    value={editFormData.gender || ''} \n                    onValueChange={(value) => setEditFormData(prev => ({ ...prev, gender: value }))}\n                  >\n                    <SelectTrigger data-testid=\"select-edit-gender\">\n                      <SelectValue placeholder=\"Select gender\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"male\">Male</SelectItem>\n                      <SelectItem value=\"female\">Female</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-class-level\">Class Level *</Label>\n                  <Select \n                    value={editFormData.classLevels?.[0] || ''} \n                    onValueChange={(value) => setEditFormData(prev => ({ ...prev, classLevels: [value] }))}\n                  >\n                    <SelectTrigger data-testid=\"select-edit-class-level\">\n                      <SelectValue placeholder=\"Select class level\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"o-level\">O-Level</SelectItem>\n                      <SelectItem value=\"a-level\">A-Level</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-roll-number\">Roll Number</Label>\n                  <Input\n                    id=\"edit-roll-number\"\n                    value={editFormData.rollNumber || ''}\n                    disabled\n                    className=\"bg-gray-50\"\n                    data-testid=\"input-edit-roll-number\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">Roll number cannot be changed</p>\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-parent-name\">Parent/Guardian Name *</Label>\n                  <Input\n                    id=\"edit-parent-name\"\n                    value={editFormData.parentName || ''}\n                    onChange={(e) => setEditFormData(prev => ({ ...prev, parentName: e.target.value }))}\n                    data-testid=\"input-edit-parent-name\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-parent-phone\">Contact Number *</Label>\n                  <Input\n                    id=\"edit-parent-phone\"\n                    placeholder=\"+92 300 1234567\"\n                    value={editFormData.parentPhone || ''}\n                    onChange={(e) => setEditFormData(prev => ({ ...prev, parentPhone: e.target.value }))}\n                    data-testid=\"input-edit-parent-phone\"\n                    required\n                  />\n                </div>\n                <div className=\"col-span-2\">\n                  <Label htmlFor=\"edit-parent-email\">Email Address</Label>\n                  <Input\n                    id=\"edit-parent-email\"\n                    type=\"email\"\n                    placeholder=\"parent@example.com\"\n                    value={editFormData.parentEmail || ''}\n                    onChange={(e) => setEditFormData(prev => ({ ...prev, parentEmail: e.target.value }))}\n                    data-testid=\"input-edit-parent-email\"\n                  />\n                </div>\n              </div>\n              \n              {/* Student Contact Information */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"edit-student-phone\">Student Phone Number *</Label>\n                  <Input\n                    id=\"edit-student-phone\"\n                    placeholder=\"+92 300 1234567\"\n                    value={editFormData.studentPhone || ''}\n                    onChange={(e) => setEditFormData(prev => ({ ...prev, studentPhone: e.target.value }))}\n                    data-testid=\"input-edit-student-phone\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-student-email\">Student Email Address *</Label>\n                  <Input\n                    id=\"edit-student-email\"\n                    type=\"email\"\n                    placeholder=\"student@example.com\"\n                    value={editFormData.studentEmail || ''}\n                    onChange={(e) => setEditFormData(prev => ({ ...prev, studentEmail: e.target.value }))}\n                    data-testid=\"input-edit-student-email\"\n                    required\n                  />\n                </div>\n                <div className=\"col-span-2\">\n                  <Label htmlFor=\"edit-home-address\">Home Address</Label>\n                  <Textarea\n                    id=\"edit-home-address\"\n                    placeholder=\"Enter complete home address\"\n                    value={editFormData.homeAddress || ''}\n                    onChange={(e) => setEditFormData(prev => ({ ...prev, homeAddress: e.target.value }))}\n                    data-testid=\"input-edit-home-address\"\n                    rows={3}\n                  />\n                </div>\n              </div>\n              \n              {/* Additional Parent/Guardian Information */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"edit-additional-parent-name\">Additional Parent/Guardian Name</Label>\n                  <Input\n                    id=\"edit-additional-parent-name\"\n                    placeholder=\"Enter additional parent/guardian name\"\n                    value={editFormData.additionalParentName || ''}\n                    onChange={(e) => setEditFormData(prev => ({ ...prev, additionalParentName: e.target.value }))}\n                    data-testid=\"input-edit-additional-parent-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-additional-parent-phone\">Additional Parent/Guardian Contact Number</Label>\n                  <Input\n                    id=\"edit-additional-parent-phone\"\n                    placeholder=\"+92 300 1234567\"\n                    value={editFormData.additionalParentPhone || ''}\n                    onChange={(e) => setEditFormData(prev => ({ ...prev, additionalParentPhone: e.target.value }))}\n                    data-testid=\"input-edit-additional-parent-phone\"\n                  />\n                </div>\n                <div className=\"col-span-2\">\n                  <Label htmlFor=\"edit-additional-parent-email\">Additional Parent/Guardian Email Address</Label>\n                  <Input\n                    id=\"edit-additional-parent-email\"\n                    type=\"email\"\n                    placeholder=\"additional.parent@example.com\"\n                    value={editFormData.additionalParentEmail || ''}\n                    onChange={(e) => setEditFormData(prev => ({ ...prev, additionalParentEmail: e.target.value }))}\n                    data-testid=\"input-edit-additional-parent-email\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowEditDialog(false)}\n                  data-testid=\"button-cancel-edit\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleSaveEdit}\n                  disabled={editStudentMutation.isPending}\n                  data-testid=\"button-save-edit\"\n                >\n                  {editStudentMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <DialogContent aria-describedby=\"delete-student-description\">\n          <DialogHeader>\n            <DialogTitle>Delete Student</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"text-center\" id=\"delete-student-description\">\n              <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4\">\n                <Trash2 className=\"h-6 w-6 text-red-600\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Are you absolutely sure?\n              </h3>\n              <p className=\"text-sm text-gray-500 mb-4\">\n                You are about to permanently delete{\" \"}\n                <strong>\n                  {studentToDelete?.firstName} {studentToDelete?.lastName}\n                </strong>{\" \"}\n                from the system.\n              </p>\n              <div className=\"bg-red-50 border border-red-200 rounded-md p-3 mb-4\">\n                <p className=\"text-xs text-red-700\">\n                  <strong>Warning:</strong> This action cannot be undone. All student data, \n                  including grades, attendance records, financial history, and portal access \n                  will be permanently removed from the database.\n                </p>\n              </div>\n              <p className=\"text-xs text-gray-600\">\n                If you want to temporarily disable the student instead, use the \n                \"Deactivate\" option which preserves all data.\n              </p>\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowDeleteDialog(false)}\n              data-testid=\"button-cancel-delete\"\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmDeleteStudent}\n              disabled={deleteStudentMutation.isPending}\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteStudentMutation.isPending ? \"Deleting...\" : \"Yes, Delete Permanently\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":51195},"client/src/pages/management/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users } from \"lucide-react\";\nimport type { DashboardStats } from \"@/types\";\n\nexport default function ManagementDashboard() {\n  \n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard/stats'],\n  });\n\n  const { data: expenses } = useQuery({\n    queryKey: ['/api/expenses'],\n  });\n\n  const { data: payments } = useQuery({\n    queryKey: ['/api/payments'],\n  });\n\n  // Calculate key metrics\n  const currentMonth = new Date();\n  const lastMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1);\n  \n  const currentMonthRevenue = payments?.filter((p: any) => \n    new Date(p.paymentDate).getMonth() === currentMonth.getMonth()\n  ).reduce((sum: number, p: any) => sum + Number(p.amount), 0) || 0;\n\n  const lastMonthRevenue = payments?.filter((p: any) => \n    new Date(p.paymentDate).getMonth() === lastMonth.getMonth()\n  ).reduce((sum: number, p: any) => sum + Number(p.amount), 0) || 0;\n\n  const currentMonthExpenses = expenses?.filter((e: any) => \n    new Date(e.expenseDate).getMonth() === currentMonth.getMonth()\n  ).reduce((sum: number, e: any) => sum + Number(e.amount), 0) || 0;\n\n  const netProfit = currentMonthRevenue - currentMonthExpenses;\n  const profitMargin = currentMonthRevenue > 0 ? (netProfit / currentMonthRevenue) * 100 : 0;\n  const revenueGrowth = lastMonthRevenue > 0 ? ((currentMonthRevenue - lastMonthRevenue) / lastMonthRevenue) * 100 : 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[1, 2, 3, 4].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"pt-6\">\n                <div className=\"h-16 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Key Performance Indicators */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <i className=\"fas fa-dollar-sign text-green-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Monthly Revenue</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-monthly-revenue\">\n                  Rs. {currentMonthRevenue.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-red-100 rounded-lg\">\n                <i className=\"fas fa-minus-circle text-red-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Monthly Expenses</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-monthly-expenses\">\n                  Rs. {currentMonthExpenses.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <i className=\"fas fa-chart-line text-blue-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Net Profit</p>\n                <p className={`text-2xl font-semibold ${netProfit >= 0 ? 'text-green-600' : 'text-red-600'}`} data-testid=\"stat-net-profit\">\n                  Rs. {netProfit.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\n                <i className=\"fas fa-percentage text-purple-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Profit Margin</p>\n                <p className={`text-2xl font-semibold ${profitMargin >= 0 ? 'text-green-600' : 'text-red-600'}`} data-testid=\"stat-profit-margin\">\n                  {profitMargin.toFixed(1)}%\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Financial Overview */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Revenue vs Expenses</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-600\">Current Month Revenue</span>\n                <span className=\"font-semibold text-green-600\">Rs. {currentMonthRevenue.toLocaleString()}</span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                <div className=\"bg-green-600 h-3 rounded-full\" style={{ width: '70%' }}></div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-600\">Current Month Expenses</span>\n                <span className=\"font-semibold text-red-600\">Rs. {currentMonthExpenses.toLocaleString()}</span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                <div className=\"bg-red-600 h-3 rounded-full\" style={{ width: '50%' }}></div>\n              </div>\n              \n              <div className=\"pt-2 border-t\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium text-gray-800\">Net Profit</span>\n                  <span className={`font-bold text-lg ${netProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                    Rs. {netProfit.toLocaleString()}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Growth Metrics</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600\">Revenue Growth</p>\n                <p className={`text-3xl font-bold ${revenueGrowth >= 0 ? 'text-green-600' : 'text-red-600'}`} data-testid=\"revenue-growth\">\n                  {revenueGrowth >= 0 ? '+' : ''}{revenueGrowth.toFixed(1)}%\n                </p>\n                <p className=\"text-xs text-gray-500\">vs last month</p>\n              </div>\n              \n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600\">Student Enrollment</p>\n                <p className=\"text-3xl font-bold text-blue-600\" data-testid=\"total-students\">\n                  {stats?.totalStudents || 0}\n                </p>\n                <p className=\"text-xs text-gray-500\">active students</p>\n              </div>\n              \n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600\">Collection Rate</p>\n                <p className=\"text-3xl font-bold text-purple-600\">94.2%</p>\n                <p className=\"text-xs text-gray-500\">monthly average</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n\n\n\n\n      {/* Expense Categories */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Expense Breakdown - This Month</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                  <i className=\"fas fa-chalkboard-teacher text-blue-600 text-sm\"></i>\n                </div>\n                <span className=\"font-medium\">Teacher Salaries</span>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"font-semibold\">Rs. {(currentMonthExpenses * 0.6).toLocaleString()}</p>\n                <p className=\"text-xs text-gray-500\">60% of expenses</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3\">\n                  <i className=\"fas fa-bolt text-green-600 text-sm\"></i>\n                </div>\n                <span className=\"font-medium\">Utilities</span>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"font-semibold\">Rs. {(currentMonthExpenses * 0.15).toLocaleString()}</p>\n                <p className=\"text-xs text-gray-500\">15% of expenses</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-3 bg-purple-50 rounded-lg\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3\">\n                  <i className=\"fas fa-cog text-purple-600 text-sm\"></i>\n                </div>\n                <span className=\"font-medium\">Administrative</span>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"font-semibold\">Rs. {(currentMonthExpenses * 0.25).toLocaleString()}</p>\n                <p className=\"text-xs text-gray-500\">25% of expenses</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Alerts and Notifications */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Alerts & Notifications</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n              <div className=\"flex items-center\">\n                <i className=\"fas fa-exclamation-triangle text-yellow-600 mr-3\"></i>\n                <div>\n                  <p className=\"text-sm font-medium text-yellow-800\">High Outstanding Fees</p>\n                  <p className=\"text-xs text-yellow-600\">Rs. 45,200 in overdue payments require attention</p>\n                </div>\n              </div>\n              <Button size=\"sm\" variant=\"outline\" className=\"text-yellow-600 border-yellow-300\" data-testid=\"button-review-overdue\">\n                Review\n              </Button>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <div className=\"flex items-center\">\n                <i className=\"fas fa-info-circle text-blue-600 mr-3\"></i>\n                <div>\n                  <p className=\"text-sm font-medium text-blue-800\">Monthly Report Ready</p>\n                  <p className=\"text-xs text-blue-600\">March 2024 financial report is ready for download</p>\n                </div>\n              </div>\n              <Button size=\"sm\" variant=\"outline\" className=\"text-blue-600 border-blue-300\" data-testid=\"button-download-report\">\n                Download\n              </Button>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n              <div className=\"flex items-center\">\n                <i className=\"fas fa-check-circle text-green-600 mr-3\"></i>\n                <div>\n                  <p className=\"text-sm font-medium text-green-800\">All Payrolls Processed</p>\n                  <p className=\"text-xs text-green-600\">Teacher payments for March have been completed</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n\n    </div>\n  );\n}\n","size_bytes":12674},"client/src/pages/management/Expenses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Expense } from \"@shared/schema\";\n\nexport default function Expenses() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [newExpense, setNewExpense] = useState({\n    category: \"\",\n    description: \"\",\n    amount: \"\",\n    expenseDate: new Date().toISOString().split('T')[0],\n    paymentMethod: \"cash\" as const,\n    whoPaid: \"\", // Track who paid for the expense\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: expenses, isLoading } = useQuery<Expense[]>({\n    queryKey: ['/api/expenses'],\n  });\n\n  // Get all teachers and management staff for the \"Who Paid\" dropdown\n  const { data: staffMembers } = useQuery({\n    queryKey: ['/api/staff'],\n  });\n\n  const createExpenseMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest('POST', '/api/expenses', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Expense recorded successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/expenses'] });\n      setNewExpense({\n        category: \"\",\n        description: \"\",\n        amount: \"\",\n        expenseDate: new Date().toISOString().split('T')[0],\n        paymentMethod: \"cash\",\n        whoPaid: \"\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record expense. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitExpense = () => {\n    if (!newExpense.category || !newExpense.description || !newExpense.amount || !newExpense.whoPaid) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields including who paid.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const amount = parseFloat(newExpense.amount);\n    if (amount <= 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a valid amount.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createExpenseMutation.mutate({\n      ...newExpense,\n      amount,\n    });\n  };\n\n  const filteredExpenses = expenses?.filter(expense => {\n    const matchesSearch = searchQuery === \"\" || \n      expense.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      expense.category.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesCategory = categoryFilter === \"all\" || expense.category === categoryFilter;\n    \n    return matchesSearch && matchesCategory;\n  }) || [];\n\n  const expenseCategories = [\n    \"Teacher Salaries\",\n    \"Utilities\",\n    \"Administrative\",\n    \"Supplies\",\n    \"Maintenance\",\n    \"Marketing\",\n    \"Technology\",\n    \"Other\"\n  ];\n\n  const getMethodColor = (method: string) => {\n    switch (method) {\n      case 'cash':\n        return 'bg-green-100 text-green-800';\n      case 'bank_transfer':\n        return 'bg-blue-100 text-blue-800';\n      case 'card':\n        return 'bg-purple-100 text-purple-800';\n      case 'cheque':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  // Calculate category totals\n  const categoryTotals = expenses?.reduce((acc, expense) => {\n    const category = expense.category;\n    acc[category] = (acc[category] || 0) + Number(expense.amount);\n    return acc;\n  }, {} as Record<string, number>) || {};\n\n  const totalExpenses = expenses?.reduce((sum, expense) => sum + Number(expense.amount), 0) || 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-red-100 rounded-lg\">\n                <i className=\"fas fa-minus-circle text-red-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Expenses</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-total-expenses\">\n                  Rs. {totalExpenses.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <i className=\"fas fa-calendar-month text-blue-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">This Month</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-monthly-expenses\">\n                  Rs. {expenses?.filter(e => {\n                    const expenseDate = new Date(e.expenseDate);\n                    const currentMonth = new Date();\n                    return expenseDate.getMonth() === currentMonth.getMonth() &&\n                           expenseDate.getFullYear() === currentMonth.getFullYear();\n                  }).reduce((sum, e) => sum + Number(e.amount), 0).toLocaleString() || '0'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <i className=\"fas fa-list text-green-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Categories</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-categories\">\n                  {Object.keys(categoryTotals).length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\n                <i className=\"fas fa-receipt text-purple-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Transactions</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-transactions\">\n                  {expenses?.length || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Expense Management */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Expense Management</CardTitle>\n            <div className=\"flex space-x-3\">\n              <div className=\"relative\">\n                <Input\n                  placeholder=\"Search expenses...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-expenses\"\n                />\n                <i className=\"fas fa-search absolute left-3 top-3 text-gray-400\"></i>\n              </div>\n              \n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-category-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {expenseCategories.map((category) => (\n                    <SelectItem key={category} value={category}>\n                      {category}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-expense\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Add Expense\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Record New Expense</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"category\">Category *</Label>\n                      <Select value={newExpense.category} onValueChange={(value) => setNewExpense(prev => ({ ...prev, category: value }))}>\n                        <SelectTrigger data-testid=\"select-expense-category\">\n                          <SelectValue placeholder=\"Select category...\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {expenseCategories.map((category) => (\n                            <SelectItem key={category} value={category}>\n                              {category}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"description\">Description *</Label>\n                      <Textarea\n                        id=\"description\"\n                        placeholder=\"Describe the expense...\"\n                        value={newExpense.description}\n                        onChange={(e) => setNewExpense(prev => ({ ...prev, description: e.target.value }))}\n                        data-testid=\"textarea-expense-description\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"amount\">Amount (Rs. ) *</Label>\n                        <Input\n                          id=\"amount\"\n                          type=\"number\"\n                          placeholder=\"0.00\"\n                          value={newExpense.amount}\n                          onChange={(e) => setNewExpense(prev => ({ ...prev, amount: e.target.value }))}\n                          data-testid=\"input-expense-amount\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"expenseDate\">Date *</Label>\n                        <Input\n                          id=\"expenseDate\"\n                          type=\"date\"\n                          value={newExpense.expenseDate}\n                          onChange={(e) => setNewExpense(prev => ({ ...prev, expenseDate: e.target.value }))}\n                          data-testid=\"input-expense-date\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"paymentMethod\">Payment Method *</Label>\n                      <Select value={newExpense.paymentMethod} onValueChange={(value) => setNewExpense(prev => ({ ...prev, paymentMethod: value as any }))}>\n                        <SelectTrigger data-testid=\"select-payment-method\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"cash\">Cash</SelectItem>\n                          <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                          <SelectItem value=\"card\">Card</SelectItem>\n                          <SelectItem value=\"cheque\">Cheque</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"whoPaid\">Who Paid? *</Label>\n                      <Select value={newExpense.whoPaid} onValueChange={(value) => setNewExpense(prev => ({ ...prev, whoPaid: value }))}>\n                        <SelectTrigger data-testid=\"select-who-paid\">\n                          <SelectValue placeholder=\"Select staff member...\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"school\">School/Office (No Individual)</SelectItem>\n                          {staffMembers?.map((staff: any) => (\n                            <SelectItem key={staff.id} value={staff.id}>\n                              {staff.firstName} {staff.lastName} - {staff.role}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        Select who actually paid for this expense. If a teacher/staff paid out of pocket, select them for later reconciliation.\n                      </p>\n                    </div>\n\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button variant=\"outline\">Cancel</Button>\n                      <Button \n                        onClick={handleSubmitExpense}\n                        disabled={createExpenseMutation.isPending}\n                        data-testid=\"button-save-expense\"\n                      >\n                        {createExpenseMutation.isPending ? 'Saving...' : 'Save Expense'}\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Date</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Category</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Description</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Amount</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Method</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {filteredExpenses.length > 0 ? filteredExpenses.map((expense) => (\n                  <tr key={expense.id} className=\"hover:bg-gray-50\" data-testid={`row-expense-${expense.id}`}>\n                    <td className=\"px-4 py-3\" data-testid={`text-date-${expense.id}`}>\n                      {new Date(expense.expenseDate).toLocaleDateString()}\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <Badge variant=\"outline\" data-testid={`badge-category-${expense.id}`}>\n                        {expense.category}\n                      </Badge>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <span className=\"text-gray-700 max-w-xs truncate\" data-testid={`text-description-${expense.id}`}>\n                        {expense.description}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <span className=\"font-semibold text-red-600\" data-testid={`text-amount-${expense.id}`}>\n                        Rs. {Number(expense.amount).toLocaleString()}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <Badge className={getMethodColor(expense.paymentMethod)} data-testid={`badge-method-${expense.id}`}>\n                        {expense.paymentMethod.replace('_', ' ').toUpperCase()}\n                      </Badge>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <div className=\"flex space-x-2\">\n                        <Button size=\"sm\" variant=\"ghost\" data-testid={`button-edit-${expense.id}`}>\n                          <i className=\"fas fa-edit\"></i>\n                        </Button>\n                        <Button size=\"sm\" variant=\"ghost\" className=\"text-red-600\" data-testid={`button-delete-${expense.id}`}>\n                          <i className=\"fas fa-trash\"></i>\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                )) : (\n                  <tr>\n                    <td colSpan={6} className=\"px-4 py-8 text-center text-gray-500\">\n                      <i className=\"fas fa-receipt text-4xl mb-4\"></i>\n                      <p>No expenses found</p>\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Category Breakdown */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Category Breakdown</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {Object.entries(categoryTotals).map(([category, amount]) => {\n              const percentage = totalExpenses > 0 ? (amount / totalExpenses) * 100 : 0;\n              return (\n                <div key={category} className=\"space-y-2\" data-testid={`category-${category.replace(/\\s+/g, '-').toLowerCase()}`}>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">{category}</span>\n                    <div className=\"text-right\">\n                      <span className=\"text-sm font-semibold\">Rs. {amount.toLocaleString()}</span>\n                      <span className=\"text-xs text-gray-500 ml-2\">({percentage.toFixed(1)}%)</span>\n                    </div>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\" \n                      style={{ width: `${percentage}%` }}\n                    ></div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":19264},"client/src/pages/management/PayoutSummary.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface TeacherPayout {\n  id: string;\n  teacherId: string;\n  teacherName: string;\n  baseAmount: number;\n  extraAmount: number;\n  totalAmount: number;\n  payoutRate: number;\n  isFixed: boolean;\n  isPaidOut: boolean;\n  month: string;\n  year: number;\n}\n\nexport default function PayoutSummary() {\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth());\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n  const [selectedTeacher, setSelectedTeacher] = useState(\"\");\n  const [newRate, setNewRate] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // In real implementation, these would come from actual API calls\n  const { data: teachers } = useQuery({\n    queryKey: ['/api/teachers'],\n  });\n\n  const { data: payoutRules } = useQuery({\n    queryKey: ['/api/payout-rules'],\n  });\n\n  // Mock payout data for demonstration\n  const mockPayouts: TeacherPayout[] = [\n    {\n      id: '1',\n      teacherId: 'teacher1',\n      teacherName: 'Mr. Tariq Ahmed',\n      baseAmount: 21000,\n      extraAmount: 3500,\n      totalAmount: 24500,\n      payoutRate: 70,\n      isFixed: true,\n      isPaidOut: false,\n      month: 'March',\n      year: 2024,\n    },\n    {\n      id: '2',\n      teacherId: 'teacher2',\n      teacherName: 'Ms. Ayesha Malik',\n      baseAmount: 18000,\n      extraAmount: 2000,\n      totalAmount: 20000,\n      payoutRate: 65,\n      isFixed: false,\n      isPaidOut: true,\n      month: 'March',\n      year: 2024,\n    },\n    {\n      id: '3',\n      teacherId: 'teacher3',\n      teacherName: 'Mr. Hassan Ali',\n      baseAmount: 15000,\n      extraAmount: 1500,\n      totalAmount: 16500,\n      payoutRate: 70,\n      isFixed: true,\n      isPaidOut: false,\n      month: 'March',\n      year: 2024,\n    },\n  ];\n\n  const updatePayoutRateMutation = useMutation({\n    mutationFn: async ({ teacherId, rate }: { teacherId: string; rate: number }) => {\n      // In real implementation, this would update the payout rule\n      return await apiRequest('PATCH', `/api/payout-rules/${teacherId}`, {\n        fixedPercentage: rate,\n        effectiveFrom: new Date().toISOString().split('T')[0],\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Payout rate updated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/payout-rules'] });\n      setNewRate(\"\");\n      setSelectedTeacher(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update payout rate. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const markAsPaidMutation = useMutation({\n    mutationFn: async (payoutId: string) => {\n      // In real implementation, this would mark the payout as completed\n      console.log('Marking payout as paid:', payoutId);\n      return Promise.resolve();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Payout marked as completed!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update payout status. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateRate = () => {\n    if (!selectedTeacher || !newRate) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please select a teacher and enter a rate.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const rate = parseFloat(newRate);\n    if (rate <= 0 || rate > 100) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a valid rate between 1-100%.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updatePayoutRateMutation.mutate({\n      teacherId: selectedTeacher,\n      rate,\n    });\n  };\n\n  const monthNames = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n\n  const filteredPayouts = mockPayouts.filter(payout => \n    payout.month === monthNames[selectedMonth] && payout.year === selectedYear\n  );\n\n  const totalPayouts = filteredPayouts.reduce((sum, payout) => sum + payout.totalAmount, 0);\n  const pendingPayouts = filteredPayouts.filter(p => !p.isPaidOut).length;\n  const completedPayouts = filteredPayouts.filter(p => p.isPaidOut).length;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header Controls */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Teacher Payout Summary</CardTitle>\n            <div className=\"flex space-x-3\">\n              <Select value={selectedMonth.toString()} onValueChange={(value) => setSelectedMonth(parseInt(value))}>\n                <SelectTrigger className=\"w-32\" data-testid=\"select-month\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {monthNames.map((month, index) => (\n                    <SelectItem key={index} value={index.toString()}>\n                      {month}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              \n              <Select value={selectedYear.toString()} onValueChange={(value) => setSelectedYear(parseInt(value))}>\n                <SelectTrigger className=\"w-20\" data-testid=\"select-year\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {[2023, 2024, 2025].map((year) => (\n                    <SelectItem key={year} value={year.toString()}>\n                      {year}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" data-testid=\"button-manage-rates\">\n                    <i className=\"fas fa-cog mr-2\"></i>\n                    Manage Rates\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Update Payout Rates</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"teacher\">Select Teacher</Label>\n                      <Select value={selectedTeacher} onValueChange={setSelectedTeacher}>\n                        <SelectTrigger data-testid=\"select-teacher-rate\">\n                          <SelectValue placeholder=\"Choose teacher...\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {filteredPayouts.map((payout) => (\n                            <SelectItem key={payout.teacherId} value={payout.teacherId}>\n                              {payout.teacherName}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"rate\">New Payout Rate (%)</Label>\n                      <Input\n                        id=\"rate\"\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"100\"\n                        placeholder=\"70\"\n                        value={newRate}\n                        onChange={(e) => setNewRate(e.target.value)}\n                        data-testid=\"input-new-rate\"\n                      />\n                    </div>\n\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button variant=\"outline\">Cancel</Button>\n                      <Button \n                        onClick={handleUpdateRate}\n                        disabled={updatePayoutRateMutation.isPending}\n                        data-testid=\"button-update-rate\"\n                      >\n                        {updatePayoutRateMutation.isPending ? 'Updating...' : 'Update Rate'}\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <i className=\"fas fa-dollar-sign text-blue-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Payouts</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-total-payouts\">\n                  Rs. {totalPayouts.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-yellow-100 rounded-lg\">\n                <i className=\"fas fa-clock text-yellow-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Pending</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-pending-payouts\">\n                  {pendingPayouts}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <i className=\"fas fa-check-circle text-green-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Completed</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-completed-payouts\">\n                  {completedPayouts}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\n                <i className=\"fas fa-users text-purple-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Teachers</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-total-teachers\">\n                  {filteredPayouts.length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Payout Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>\n              {monthNames[selectedMonth]} {selectedYear} Payouts\n            </CardTitle>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" data-testid=\"button-export-payouts\">\n                <i className=\"fas fa-download mr-2\"></i>\n                Export\n              </Button>\n              <Button \n                disabled={pendingPayouts === 0}\n                data-testid=\"button-process-all\"\n              >\n                <i className=\"fas fa-credit-card mr-2\"></i>\n                Process All Pending\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Teacher</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Rate</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Base Amount</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Extra Amount</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Total Amount</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Status</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {filteredPayouts.length > 0 ? filteredPayouts.map((payout) => (\n                  <tr key={payout.id} className=\"hover:bg-gray-50\" data-testid={`row-payout-${payout.id}`}>\n                    <td className=\"px-4 py-3\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                          <i className=\"fas fa-user-tie text-blue-600 text-sm\"></i>\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-gray-900\" data-testid={`teacher-name-${payout.id}`}>\n                            {payout.teacherName}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            {payout.isFixed ? 'Fixed Rate' : 'Tiered Rate'}\n                          </p>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <Badge variant=\"outline\" data-testid={`rate-${payout.id}`}>\n                        {payout.payoutRate}%\n                      </Badge>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <span className=\"font-semibold\" data-testid={`base-amount-${payout.id}`}>\n                        Rs. {payout.baseAmount.toLocaleString()}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <span className=\"font-semibold text-green-600\" data-testid={`extra-amount-${payout.id}`}>\n                        Rs. {payout.extraAmount.toLocaleString()}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <span className=\"font-bold text-blue-600\" data-testid={`total-amount-${payout.id}`}>\n                        Rs. {payout.totalAmount.toLocaleString()}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <Badge \n                        className={payout.isPaidOut ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}\n                        data-testid={`status-${payout.id}`}\n                      >\n                        <i className={`fas fa-${payout.isPaidOut ? 'check-circle' : 'clock'} mr-1`}></i>\n                        {payout.isPaidOut ? 'Paid' : 'Pending'}\n                      </Badge>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <div className=\"flex space-x-2\">\n                        <Button size=\"sm\" variant=\"ghost\" data-testid={`button-view-details-${payout.id}`}>\n                          <i className=\"fas fa-eye\"></i>\n                        </Button>\n                        {!payout.isPaidOut && (\n                          <Button \n                            size=\"sm\" \n                            className=\"bg-green-600 hover:bg-green-700\"\n                            onClick={() => markAsPaidMutation.mutate(payout.id)}\n                            disabled={markAsPaidMutation.isPending}\n                            data-testid={`button-mark-paid-${payout.id}`}\n                          >\n                            <i className=\"fas fa-check mr-1\"></i>\n                            Mark Paid\n                          </Button>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                )) : (\n                  <tr>\n                    <td colSpan={7} className=\"px-4 py-8 text-center text-gray-500\">\n                      <i className=\"fas fa-users text-4xl mb-4\"></i>\n                      <p>No payout data for selected period</p>\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Payout Rules */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Current Payout Rules</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-800\">Fixed Rate Teachers</h4>\n              {filteredPayouts.filter(p => p.isFixed).map((teacher) => (\n                <div key={teacher.id} className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\n                  <span className=\"font-medium\">{teacher.teacherName}</span>\n                  <Badge className=\"bg-blue-100 text-blue-800\">{teacher.payoutRate}%</Badge>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-800\">Tiered Rate Teachers</h4>\n              {filteredPayouts.filter(p => !p.isFixed).map((teacher) => (\n                <div key={teacher.id} className=\"flex items-center justify-between p-3 bg-purple-50 rounded-lg\">\n                  <span className=\"font-medium\">{teacher.teacherName}</span>\n                  <div className=\"text-right\">\n                    <Badge className=\"bg-purple-100 text-purple-800\">{teacher.payoutRate}%</Badge>\n                    <p className=\"text-xs text-gray-500 mt-1\">Base rate</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":18776},"client/src/pages/parent/AttendanceCalendar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport type { Attendance, Student } from \"@shared/schema\";\n\nexport default function AttendanceCalendar() {\n  const [selectedChild, setSelectedChild] = useState(\"\");\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth());\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n\n  const { data: children } = useQuery<Student[]>({\n    queryKey: ['/api/students'], // In real implementation, filter by parent ID\n  });\n\n  const { data: attendanceData } = useQuery<Attendance[]>({\n    queryKey: ['/api/attendance/student', selectedChild],\n    enabled: !!selectedChild,\n  });\n\n  const selectedChildData = children?.find(child => child.id === selectedChild);\n\n  // Generate calendar days for the selected month\n  const generateCalendarDays = () => {\n    const firstDay = new Date(selectedYear, selectedMonth, 1);\n    const lastDay = new Date(selectedYear, selectedMonth + 1, 0);\n    const daysInMonth = lastDay.getDate();\n    const startingDayOfWeek = firstDay.getDay();\n    \n    const days = [];\n    \n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < startingDayOfWeek; i++) {\n      days.push(null);\n    }\n    \n    // Add days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(day);\n    }\n    \n    return days;\n  };\n\n  const getAttendanceStatus = (day: number) => {\n    if (!attendanceData || !day) return null;\n    \n    const dateString = new Date(selectedYear, selectedMonth, day).toISOString().split('T')[0];\n    const attendance = attendanceData.find(a => \n      a.attendanceDate === dateString\n    );\n    \n    return attendance?.status || null;\n  };\n\n  const getStatusColor = (status: string | null) => {\n    switch (status) {\n      case 'present':\n        return 'bg-green-500 text-white';\n      case 'absent':\n        return 'bg-red-500 text-white';\n      case 'late':\n        return 'bg-yellow-500 text-white';\n      default:\n        // Weekend or holiday\n        const dayOfWeek = new Date(selectedYear, selectedMonth, parseInt(status || '1')).getDay();\n        return dayOfWeek === 0 || dayOfWeek === 6 ? 'bg-gray-200 text-gray-600' : 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const isToday = (day: number) => {\n    const today = new Date();\n    return today.getDate() === day && \n           today.getMonth() === selectedMonth && \n           today.getFullYear() === selectedYear;\n  };\n\n  const monthNames = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n\n  const calendarDays = generateCalendarDays();\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n  // Calculate statistics\n  const thisMonthAttendance = attendanceData?.filter(a => {\n    const attendanceDate = new Date(a.attendanceDate);\n    return attendanceDate.getMonth() === selectedMonth && \n           attendanceDate.getFullYear() === selectedYear;\n  }) || [];\n\n  const presentCount = thisMonthAttendance.filter(a => a.status === 'present').length;\n  const absentCount = thisMonthAttendance.filter(a => a.status === 'absent').length;\n  const lateCount = thisMonthAttendance.filter(a => a.status === 'late').length;\n  const totalDays = thisMonthAttendance.length;\n  const attendancePercentage = totalDays > 0 ? (presentCount / totalDays) * 100 : 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header Controls */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Attendance Calendar</CardTitle>\n            <div className=\"flex space-x-3\">\n              {children && children.length > 1 && (\n                <Select value={selectedChild} onValueChange={setSelectedChild}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-child\">\n                    <SelectValue placeholder=\"Select child...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {children.map((child) => (\n                      <SelectItem key={child.id} value={child.id}>\n                        {child.firstName} {child.lastName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              )}\n              \n              <Select value={selectedMonth.toString()} onValueChange={(value) => setSelectedMonth(parseInt(value))}>\n                <SelectTrigger className=\"w-32\" data-testid=\"select-month\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {monthNames.map((month, index) => (\n                    <SelectItem key={index} value={index.toString()}>\n                      {month}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              \n              <Select value={selectedYear.toString()} onValueChange={(value) => setSelectedYear(parseInt(value))}>\n                <SelectTrigger className=\"w-20\" data-testid=\"select-year\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {[2023, 2024, 2025].map((year) => (\n                    <SelectItem key={year} value={year.toString()}>\n                      {year}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {!selectedChild && children && children.length > 0 && (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-12\">\n              <i className=\"fas fa-calendar-alt text-4xl text-gray-400 mb-4\"></i>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Select a Child</h3>\n              <p className=\"text-gray-600\">\n                Choose a child from the dropdown above to view their attendance calendar\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {selectedChild && (\n        <>\n          {/* Attendance Statistics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-present\">\n                    {presentCount}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Present</p>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-red-600\" data-testid=\"stat-absent\">\n                    {absentCount}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Absent</p>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-yellow-600\" data-testid=\"stat-late\">\n                    {lateCount}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Late</p>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-blue-600\" data-testid=\"stat-percentage\">\n                    {attendancePercentage.toFixed(0)}%\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Attendance</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Calendar */}\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                {monthNames[selectedMonth]} {selectedYear} - {selectedChildData?.firstName} {selectedChildData?.lastName}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {/* Calendar Header */}\n              <div className=\"grid grid-cols-7 gap-2 mb-4\">\n                {daysOfWeek.map((day) => (\n                  <div key={day} className=\"p-2 text-center text-xs font-medium text-gray-600\">\n                    {day}\n                  </div>\n                ))}\n              </div>\n              \n              {/* Calendar Days */}\n              <div className=\"grid grid-cols-7 gap-2\">\n                {calendarDays.map((day, index) => {\n                  if (day === null) {\n                    return <div key={index} className=\"p-2\"></div>;\n                  }\n                  \n                  const status = getAttendanceStatus(day);\n                  const todayClass = isToday(day) ? 'ring-2 ring-blue-500' : '';\n                  \n                  return (\n                    <div\n                      key={day}\n                      className={`\n                        w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium\n                        ${getStatusColor(status)} ${todayClass}\n                      `}\n                      data-testid={`calendar-day-${day}`}\n                    >\n                      {day}\n                    </div>\n                  );\n                })}\n              </div>\n              \n              {/* Legend */}\n              <div className=\"flex items-center justify-center space-x-6 mt-6 text-xs\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full mr-2\"></div>\n                  <span className=\"text-gray-600\">Present</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full mr-2\"></div>\n                  <span className=\"text-gray-600\">Absent</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-3 h-3 bg-yellow-500 rounded-full mr-2\"></div>\n                  <span className=\"text-gray-600\">Late</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-3 h-3 bg-blue-500 rounded-full mr-2\"></div>\n                  <span className=\"text-gray-600\">Today</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-3 h-3 bg-gray-200 rounded-full mr-2\"></div>\n                  <span className=\"text-gray-600\">Holiday</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Subject-wise Attendance */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Subject-wise Attendance</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                      <i className=\"fas fa-flask text-blue-600 text-sm\"></i>\n                    </div>\n                    <span className=\"font-medium\">Chemistry</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold text-green-600\" data-testid=\"chemistry-percentage\">96%</p>\n                    <p className=\"text-xs text-gray-500\">24/25 classes</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3\">\n                      <i className=\"fas fa-calculator text-green-600 text-sm\"></i>\n                    </div>\n                    <span className=\"font-medium\">Physics</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold text-green-600\" data-testid=\"physics-percentage\">92%</p>\n                    <p className=\"text-xs text-gray-500\">23/25 classes</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3\">\n                      <i className=\"fas fa-book text-purple-600 text-sm\"></i>\n                    </div>\n                    <span className=\"font-medium\">Mathematics</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold text-yellow-600\" data-testid=\"math-percentage\">88%</p>\n                    <p className=\"text-xs text-gray-500\">22/25 classes</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </div>\n  );\n}\n","size_bytes":13636},"client/src/pages/parent/Grades.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport type { Grade, Student, Assessment } from \"@shared/schema\";\n\nexport default function Grades() {\n  const [selectedChild, setSelectedChild] = useState(\"\");\n  const [selectedSubject, setSelectedSubject] = useState(\"all\");\n\n  const { data: children } = useQuery<Student[]>({\n    queryKey: ['/api/students'], // In real implementation, filter by parent ID\n  });\n\n  const { data: grades } = useQuery<Grade[]>({\n    queryKey: ['/api/grades/student', selectedChild],\n    enabled: !!selectedChild,\n  });\n\n  const { data: subjects } = useQuery({\n    queryKey: ['/api/subjects'],\n  });\n\n  const selectedChildData = children?.find(child => child.id === selectedChild);\n\n  // Group grades by subject for better organization\n  const gradesBySubject = grades?.reduce((acc, grade) => {\n    const subjectId = grade.assessmentId; // This would be properly linked in real implementation\n    if (!acc[subjectId]) {\n      acc[subjectId] = [];\n    }\n    acc[subjectId].push(grade);\n    return acc;\n  }, {} as Record<string, Grade[]>) || {};\n\n  const calculateSubjectAverage = (subjectGrades: Grade[]) => {\n    if (subjectGrades.length === 0) return 0;\n    const total = subjectGrades.reduce((sum, grade) => sum + grade.marksObtained, 0);\n    return total / subjectGrades.length;\n  };\n\n  const getGradeColor = (grade: string) => {\n    switch (grade) {\n      case 'A+':\n      case 'A':\n        return 'bg-green-100 text-green-800';\n      case 'B+':\n      case 'B':\n        return 'bg-blue-100 text-blue-800';\n      case 'C+':\n      case 'C':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'D':\n        return 'bg-orange-100 text-orange-800';\n      case 'F':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const recentGrades = grades?.slice(0, 10) || [];\n\n  // Mock subject data for demonstration\n  const mockSubjects = [\n    { id: 'chemistry', name: 'Chemistry', average: 92, trend: 'up', lastGrade: 'A+' },\n    { id: 'physics', name: 'Physics', average: 89, trend: 'stable', lastGrade: 'A' },\n    { id: 'mathematics', name: 'Mathematics', average: 85, trend: 'up', lastGrade: 'B+' },\n    { id: 'biology', name: 'Biology', average: 94, trend: 'up', lastGrade: 'A+' },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header Controls */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Academic Performance</CardTitle>\n            <div className=\"flex space-x-3\">\n              {children && children.length > 1 && (\n                <Select value={selectedChild} onValueChange={setSelectedChild}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-child\">\n                    <SelectValue placeholder=\"Select child...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {children.map((child) => (\n                      <SelectItem key={child.id} value={child.id}>\n                        {child.firstName} {child.lastName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              )}\n              \n              <Select value={selectedSubject} onValueChange={setSelectedSubject}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-subject\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Subjects</SelectItem>\n                  {subjects?.map((subject: any) => (\n                    <SelectItem key={subject.id} value={subject.id}>\n                      {subject.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {!selectedChild && children && children.length > 0 && (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-12\">\n              <i className=\"fas fa-graduation-cap text-4xl text-gray-400 mb-4\"></i>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Select a Child</h3>\n              <p className=\"text-gray-600\">\n                Choose a child from the dropdown above to view their grades and performance\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {selectedChild && (\n        <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"detailed\">Detailed Grades</TabsTrigger>\n            <TabsTrigger value=\"progress\">Progress Report</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Overall Performance */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Overall Performance - {selectedChildData?.firstName} {selectedChildData?.lastName}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                  <div className=\"text-center\">\n                    <p className=\"text-3xl font-bold text-blue-600\" data-testid=\"overall-average\">89.5</p>\n                    <p className=\"text-sm text-gray-600\">Overall Average</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-3xl font-bold text-green-600\" data-testid=\"current-rank\">3</p>\n                    <p className=\"text-sm text-gray-600\">Class Rank</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-3xl font-bold text-purple-600\" data-testid=\"subjects-count\">4</p>\n                    <p className=\"text-sm text-gray-600\">Subjects</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <Badge className=\"text-lg px-3 py-1 bg-green-100 text-green-800\" data-testid=\"overall-grade\">\n                      A\n                    </Badge>\n                    <p className=\"text-sm text-gray-600 mt-1\">Overall Grade</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Subject-wise Performance */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Subject-wise Performance</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {mockSubjects.map((subject) => (\n                    <div key={subject.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\" data-testid={`subject-${subject.id}`}>\n                      <div className=\"flex items-center\">\n                        <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                          <i className=\"fas fa-book text-blue-600\"></i>\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-gray-900\">{subject.name}</p>\n                          <p className=\"text-sm text-gray-600\">Average: {subject.average}%</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge className={getGradeColor(subject.lastGrade)} data-testid={`grade-${subject.id}`}>\n                          {subject.lastGrade}\n                        </Badge>\n                        <div className=\"flex items-center mt-1\">\n                          <i className={`fas fa-arrow-${subject.trend === 'up' ? 'up' : subject.trend === 'down' ? 'down' : 'right'} text-${subject.trend === 'up' ? 'green' : subject.trend === 'down' ? 'red' : 'gray'}-500 text-xs mr-1`}></i>\n                          <span className=\"text-xs text-gray-500\">{subject.trend}</span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Grades */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Grades</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {recentGrades.length > 0 ? recentGrades.map((grade, index) => (\n                    <div key={grade.id} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\" data-testid={`recent-grade-${index}`}>\n                      <div>\n                        <p className=\"font-medium text-gray-900\">Assessment Name</p>\n                        <p className=\"text-sm text-gray-600\">Subject Name</p>\n                        <p className=\"text-xs text-gray-500\">{new Date(grade.enteredAt).toLocaleDateString()}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-gray-900\">{grade.marksObtained}/100</p>\n                        <Badge className={getGradeColor(grade.grade || 'B')} data-testid={`badge-grade-${index}`}>\n                          {grade.grade || 'B'}\n                        </Badge>\n                      </div>\n                    </div>\n                  )) : (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <i className=\"fas fa-clipboard-list text-4xl mb-4\"></i>\n                      <p>No recent grades available</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"detailed\" className=\"space-y-6\">\n            {/* Detailed Grades Table */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Detailed Grade Report</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full text-sm\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Date</th>\n                        <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Subject</th>\n                        <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Assessment</th>\n                        <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Marks</th>\n                        <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Grade</th>\n                        <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Comments</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-gray-200\">\n                      {recentGrades.length > 0 ? recentGrades.map((grade, index) => (\n                        <tr key={grade.id} className=\"hover:bg-gray-50\" data-testid={`detailed-grade-${index}`}>\n                          <td className=\"px-4 py-3\" data-testid={`date-${index}`}>\n                            {new Date(grade.enteredAt).toLocaleDateString()}\n                          </td>\n                          <td className=\"px-4 py-3\">Subject Name</td>\n                          <td className=\"px-4 py-3\">Assessment Name</td>\n                          <td className=\"px-4 py-3\">\n                            <span className=\"font-semibold\">{grade.marksObtained}/100</span>\n                          </td>\n                          <td className=\"px-4 py-3\">\n                            <Badge className={getGradeColor(grade.grade || 'B')}>\n                              {grade.grade || 'B'}\n                            </Badge>\n                          </td>\n                          <td className=\"px-4 py-3 text-gray-600\">\n                            {grade.comments || 'Good work!'}\n                          </td>\n                        </tr>\n                      )) : (\n                        <tr>\n                          <td colSpan={6} className=\"px-4 py-8 text-center text-gray-500\">\n                            No detailed grades available\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"progress\" className=\"space-y-6\">\n            {/* Progress Charts */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Grade Trends</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {mockSubjects.map((subject) => (\n                      <div key={subject.id} className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm font-medium\">{subject.name}</span>\n                          <span className=\"text-sm text-gray-600\">{subject.average}%</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                          <div \n                            className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\" \n                            style={{ width: `${subject.average}%` }}\n                          ></div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Monthly Performance</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n                      <span className=\"font-medium text-green-800\">March 2024</span>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-green-800\">92%</p>\n                        <p className=\"text-xs text-green-600\">Excellent</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\n                      <span className=\"font-medium text-blue-800\">February 2024</span>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-blue-800\">89%</p>\n                        <p className=\"text-xs text-blue-600\">Very Good</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-3 bg-yellow-50 rounded-lg\">\n                      <span className=\"font-medium text-yellow-800\">January 2024</span>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-yellow-800\">87%</p>\n                        <p className=\"text-xs text-yellow-600\">Good</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Teacher Comments */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Teacher Comments</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"border-l-4 border-green-500 pl-4 py-2\">\n                    <p className=\"font-medium text-green-800\">Chemistry - Ms. Ayesha</p>\n                    <p className=\"text-sm text-gray-600\">\n                      \"Excellent understanding of organic chemistry concepts. Shows great improvement in lab work.\"\n                    </p>\n                    <p className=\"text-xs text-gray-500 mt-1\">March 15, 2024</p>\n                  </div>\n                  \n                  <div className=\"border-l-4 border-blue-500 pl-4 py-2\">\n                    <p className=\"font-medium text-blue-800\">Physics - Mr. Ahmed</p>\n                    <p className=\"text-sm text-gray-600\">\n                      \"Good grasp of mechanics principles. Needs to focus more on problem-solving techniques.\"\n                    </p>\n                    <p className=\"text-xs text-gray-500 mt-1\">March 12, 2024</p>\n                  </div>\n                  \n                  <div className=\"border-l-4 border-purple-500 pl-4 py-2\">\n                    <p className=\"font-medium text-purple-800\">Mathematics - Mr. Hassan</p>\n                    <p className=\"text-sm text-gray-600\">\n                      \"Consistent performance in calculus. Excellent work on the recent assignment.\"\n                    </p>\n                    <p className=\"text-xs text-gray-500 mt-1\">March 10, 2024</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      )}\n    </div>\n  );\n}\n","size_bytes":17678},"client/src/pages/parent/Portal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Link } from \"wouter\";\nimport type { Student } from \"@shared/schema\";\nimport { formatPKR } from \"@/lib/currency\";\n\nexport default function ParentPortal() {\n  const [selectedChild, setSelectedChild] = useState(\"\");\n\n  const { data: children, isLoading } = useQuery<Student[]>({\n    queryKey: ['/api/students'], // In real implementation, this would filter by parent ID\n  });\n\n  const selectedChildData = children?.find(child => child.id === selectedChild);\n\n  // Mock data for demonstration - in real app this would come from APIs\n  const childStats = selectedChildData ? {\n    feeBalance: Math.floor(Math.random() * 10000),\n    attendance: Math.floor(Math.random() * 30) + 70,\n    avgGrade: ['A+', 'A', 'B+', 'B', 'C+'][Math.floor(Math.random() * 5)],\n    lastPayment: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),\n    dueDate: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000),\n  } : null;\n\n  const recentActivity = [\n    {\n      title: \"Payment Received\",\n      description: \"Monthly fee payment of Rs. 9,000 processed\",\n      time: \"2 hours ago\",\n      type: \"payment\"\n    },\n    {\n      title: \"Grade Updated\",\n      description: \"Physics test result: A+ (92%)\",\n      time: \"Yesterday\",\n      type: \"grade\"\n    },\n    {\n      title: \"Attendance Alert\",\n      description: \"Marked late for Chemistry class\",\n      time: \"2 days ago\",\n      type: \"attendance\"\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"h-32 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Child Selector & Overview */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Parent Portal</CardTitle>\n            {children && children.length > 1 && (\n              <Select value={selectedChild} onValueChange={setSelectedChild}>\n                <SelectTrigger className=\"w-64\" data-testid=\"select-child\">\n                  <SelectValue placeholder=\"Select child...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {children.map((child) => (\n                    <SelectItem key={child.id} value={child.id}>\n                      {child.firstName} {child.lastName} ({child.classLevel?.toUpperCase()})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            )}\n          </div>\n        </CardHeader>\n        \n        {selectedChildData && childStats && (\n          <CardContent>\n            {/* Child Overview Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card className=\"bg-gradient-to-r from-blue-500 to-blue-700 text-white\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-blue-100\">Fee Balance</p>\n                      <p className=\"text-2xl font-bold\" data-testid=\"text-fee-balance\">\n                        {formatPKR(childStats.feeBalance)}\n                      </p>\n                      <p className=\"text-sm text-blue-100\" data-testid=\"text-due-date\">\n                        Due: {childStats.dueDate.toLocaleDateString()}\n                      </p>\n                    </div>\n                    <i className=\"fas fa-credit-card text-3xl text-blue-200\"></i>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-gradient-to-r from-green-500 to-green-700 text-white\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-green-100\">Attendance</p>\n                      <p className=\"text-2xl font-bold\" data-testid=\"text-attendance\">\n                        {childStats.attendance}%\n                      </p>\n                      <p className=\"text-sm text-green-100\">This month: 23/25 days</p>\n                    </div>\n                    <i className=\"fas fa-calendar-check text-3xl text-green-200\"></i>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-gradient-to-r from-orange-500 to-orange-700 text-white\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-orange-100\">Average Grade</p>\n                      <p className=\"text-2xl font-bold\" data-testid=\"text-avg-grade\">\n                        {childStats.avgGrade}\n                      </p>\n                      <p className=\"text-sm text-orange-100\">Last assessment: A+</p>\n                    </div>\n                    <i className=\"fas fa-graduation-cap text-3xl text-orange-200\"></i>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </CardContent>\n        )}\n      </Card>\n\n      {!selectedChild && children && children.length > 0 && (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-12\">\n              <i className=\"fas fa-child text-4xl text-gray-400 mb-4\"></i>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Select a Child</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Choose a child from the dropdown above to view their information\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {selectedChild && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Recent Activity */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {recentActivity.map((activity, index) => (\n                  <div key={index} className=\"flex items-start space-x-3\" data-testid={`activity-${index}`}>\n                    <div className={`w-2 h-2 rounded-full mt-2 ${\n                      activity.type === 'payment' ? 'bg-green-500' :\n                      activity.type === 'grade' ? 'bg-blue-500' : 'bg-yellow-500'\n                    }`}></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-gray-900\" data-testid={`activity-title-${index}`}>\n                        {activity.title}\n                      </p>\n                      <p className=\"text-xs text-gray-600\" data-testid={`activity-description-${index}`}>\n                        {activity.description}\n                      </p>\n                      <p className=\"text-xs text-gray-500\" data-testid={`activity-time-${index}`}>\n                        {activity.time}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Links */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Links</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <Link href=\"/attendance\">\n                  <Button variant=\"outline\" className=\"w-full flex items-center justify-between p-4 h-auto\" data-testid=\"button-view-attendance\">\n                    <div className=\"flex items-center\">\n                      <i className=\"fas fa-calendar-check text-blue-600 mr-3\"></i>\n                      <span className=\"font-medium text-gray-900\">View Attendance</span>\n                    </div>\n                    <i className=\"fas fa-arrow-right text-gray-400\"></i>\n                  </Button>\n                </Link>\n                \n                <Link href=\"/grades\">\n                  <Button variant=\"outline\" className=\"w-full flex items-center justify-between p-4 h-auto\" data-testid=\"button-view-grades\">\n                    <div className=\"flex items-center\">\n                      <i className=\"fas fa-chart-line text-blue-600 mr-3\"></i>\n                      <span className=\"font-medium text-gray-900\">View Grades</span>\n                    </div>\n                    <i className=\"fas fa-arrow-right text-gray-400\"></i>\n                  </Button>\n                </Link>\n                \n                <Button variant=\"outline\" className=\"w-full flex items-center justify-between p-4 h-auto\" data-testid=\"button-view-fees\">\n                  <div className=\"flex items-center\">\n                    <i className=\"fas fa-file-invoice text-blue-600 mr-3\"></i>\n                    <span className=\"font-medium text-gray-900\">Fee Details</span>\n                  </div>\n                  <i className=\"fas fa-arrow-right text-gray-400\"></i>\n                </Button>\n                \n                <Button variant=\"outline\" className=\"w-full flex items-center justify-between p-4 h-auto\" data-testid=\"button-download-receipts\">\n                  <div className=\"flex items-center\">\n                    <i className=\"fas fa-download text-blue-600 mr-3\"></i>\n                    <span className=\"font-medium text-gray-900\">Download Receipts</span>\n                  </div>\n                  <i className=\"fas fa-arrow-right text-gray-400\"></i>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Notifications */}\n      {selectedChild && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Notifications</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                <div className=\"flex items-center\">\n                  <i className=\"fas fa-info-circle text-blue-600 mr-3\"></i>\n                  <div>\n                    <p className=\"text-sm font-medium text-blue-800\">Fee Due Reminder</p>\n                    <p className=\"text-xs text-blue-600\">Monthly fee payment due in 5 days</p>\n                  </div>\n                </div>\n                <Button size=\"sm\" variant=\"outline\" className=\"text-blue-600 border-blue-300\" data-testid=\"button-pay-now\">\n                  Pay Now\n                </Button>\n              </div>\n              \n              <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n                <div className=\"flex items-center\">\n                  <i className=\"fas fa-check-circle text-green-600 mr-3\"></i>\n                  <div>\n                    <p className=\"text-sm font-medium text-green-800\">Excellent Attendance</p>\n                    <p className=\"text-xs text-green-600\">Your child maintained 95%+ attendance this month</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":11553},"client/src/pages/teacher/Attendance.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Check, X, Clock, QrCode, Users, Calendar } from \"lucide-react\";\nimport QrScanner from \"qr-scanner\";\n\ninterface Student {\n  id: string;\n  firstName: string;\n  lastName: string;\n  rollNumber: string;\n  profileImageUrl?: string;\n}\n\ninterface AttendanceRecord {\n  studentId: string;\n  status: 'present' | 'absent' | 'late';\n}\n\nexport default function Attendance() {\n  const [selectedClass, setSelectedClass] = useState(\"\");\n  const [attendanceRecords, setAttendanceRecords] = useState<AttendanceRecord[]>([]);\n  const [attendanceMethod, setAttendanceMethod] = useState<'tap' | 'qr'>('tap');\n  const [isScanning, setIsScanning] = useState(false);\n  const [qrScanner, setQrScanner] = useState<QrScanner | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const { data: todayClasses } = useQuery({\n    queryKey: ['/api/teacher/classes/today'],\n  });\n\n  const { data: students, isLoading: studentsLoading } = useQuery<Student[]>({\n    queryKey: ['/api/classes', selectedClass, 'students'],\n    enabled: !!selectedClass,\n  });\n\n  const submitAttendanceMutation = useMutation({\n    mutationFn: async () => {\n      const promises = attendanceRecords.map(record => \n        apiRequest('POST', '/api/attendance', {\n          classId: selectedClass,\n          studentId: record.studentId,\n          attendanceDate: new Date().toISOString().split('T')[0],\n          status: record.status,\n        })\n      );\n      return Promise.all(promises);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Attendance submitted successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/attendance'] });\n      setAttendanceRecords([]);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit attendance. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const markAttendance = (studentId: string, status: 'present' | 'absent' | 'late') => {\n    setAttendanceRecords(prev => {\n      const existing = prev.find(r => r.studentId === studentId);\n      if (existing) {\n        return prev.map(r => r.studentId === studentId ? { ...r, status } : r);\n      }\n      return [...prev, { studentId, status }];\n    });\n  };\n\n  const undoMark = (studentId: string) => {\n    setAttendanceRecords(prev => prev.filter(r => r.studentId !== studentId));\n  };\n\n  const getStudentStatus = (studentId: string): 'present' | 'absent' | 'late' | undefined => {\n    return attendanceRecords.find(r => r.studentId === studentId)?.status;\n  };\n\n  const handleSubmit = () => {\n    if (attendanceRecords.length === 0) {\n      toast({\n        title: \"Warning\",\n        description: \"Please mark attendance for at least one student.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    submitAttendanceMutation.mutate();\n  };\n\n  // QR Scanner setup\n  useEffect(() => {\n    if (attendanceMethod === 'qr' && videoRef.current && !qrScanner && isScanning) {\n      const scanner = new QrScanner(\n        videoRef.current,\n        (result: QrScanner.ScanResult) => handleQrScan(result.data),\n        {\n          preferredCamera: 'environment',\n          highlightScanRegion: true,\n          highlightCodeOutline: true,\n        }\n      );\n      setQrScanner(scanner);\n      scanner.start();\n    }\n\n    return () => {\n      if (qrScanner) {\n        qrScanner.stop();\n        qrScanner.destroy();\n        setQrScanner(null);\n      }\n    };\n  }, [attendanceMethod, isScanning]);\n\n  const handleQrScan = (qrData: string) => {\n    try {\n      // Expected QR format: studentId:rollNumber or just studentId\n      const studentId = qrData.includes(':') ? qrData.split(':')[0] : qrData;\n      const student = students?.find(s => s.id === studentId || s.rollNumber === qrData);\n      \n      if (student) {\n        // Auto-mark as present when QR is scanned\n        markAttendance(student.id, 'present');\n        toast({\n          title: \"Student Scanned\",\n          description: `${student.firstName} ${student.lastName} marked as present`,\n        });\n      } else {\n        toast({\n          title: \"Student Not Found\",\n          description: \"This QR code doesn't match any student in the current class\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Invalid QR Code\",\n        description: \"Unable to read student information from this QR code\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const toggleScanning = () => {\n    if (isScanning && qrScanner) {\n      qrScanner.stop();\n      setIsScanning(false);\n    } else {\n      setIsScanning(true);\n    }\n  };\n\n  const presentCount = attendanceRecords.filter(r => r.status === 'present').length;\n  const absentCount = attendanceRecords.filter(r => r.status === 'absent').length;\n  const lateCount = attendanceRecords.filter(r => r.status === 'late').length;\n  const totalStudents = students?.length || 0;\n  const unmarkedCount = totalStudents - attendanceRecords.length;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Take Attendance\n              </CardTitle>\n              {selectedClass && (\n                <p className=\"text-gray-600 mt-1 flex items-center gap-2\" data-testid=\"text-class-info\">\n                  <Calendar className=\"h-4 w-4\" />\n                  {todayClasses?.find((c: any) => c.id === selectedClass)?.subject} - {new Date().toLocaleDateString()}\n                </p>\n              )}\n            </div>\n            {selectedClass && (\n              <div className=\"grid grid-cols-4 gap-4 text-center\">\n                <div>\n                  <div className=\"flex items-center justify-center gap-1\">\n                    <Check className=\"h-4 w-4 text-green-600\" />\n                    <span className=\"text-sm text-gray-600\">Present</span>\n                  </div>\n                  <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-present-count\">\n                    {presentCount}\n                  </p>\n                </div>\n                <div>\n                  <div className=\"flex items-center justify-center gap-1\">\n                    <X className=\"h-4 w-4 text-red-600\" />\n                    <span className=\"text-sm text-gray-600\">Absent</span>\n                  </div>\n                  <p className=\"text-2xl font-bold text-red-600\" data-testid=\"text-absent-count\">\n                    {absentCount}\n                  </p>\n                </div>\n                <div>\n                  <div className=\"flex items-center justify-center gap-1\">\n                    <Clock className=\"h-4 w-4 text-yellow-600\" />\n                    <span className=\"text-sm text-gray-600\">Late</span>\n                  </div>\n                  <p className=\"text-2xl font-bold text-yellow-600\" data-testid=\"text-late-count\">\n                    {lateCount}\n                  </p>\n                </div>\n                <div>\n                  <div className=\"flex items-center justify-center gap-1\">\n                    <Users className=\"h-4 w-4 text-gray-600\" />\n                    <span className=\"text-sm text-gray-600\">Unmarked</span>\n                  </div>\n                  <p className=\"text-2xl font-bold text-gray-600\" data-testid=\"text-unmarked-count\">\n                    {unmarkedCount}\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {/* Class Selection */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Select Class</label>\n            <Select value={selectedClass} onValueChange={setSelectedClass}>\n              <SelectTrigger data-testid=\"select-class\">\n                <SelectValue placeholder=\"Choose a class...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {todayClasses?.map((classItem: any) => (\n                  <SelectItem key={classItem.id} value={classItem.id}>\n                    {classItem.subject} ({classItem.startTime} - {classItem.endTime})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Method Toggle */}\n          {selectedClass && (\n            <Tabs value={attendanceMethod} onValueChange={(value) => setAttendanceMethod(value as 'tap' | 'qr')} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"tap\" className=\"flex items-center gap-2\" data-testid=\"tab-tap-method\">\n                  <Users className=\"h-4 w-4\" />\n                  Tap Interface\n                </TabsTrigger>\n                <TabsTrigger value=\"qr\" className=\"flex items-center gap-2\" data-testid=\"tab-qr-method\">\n                  <QrCode className=\"h-4 w-4\" />\n                  QR Scanner\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"tap\" className=\"mt-6\">\n                {studentsLoading ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {[1, 2, 3, 4, 5, 6].map((i) => (\n                      <div key={i} className=\"animate-pulse bg-gray-200 h-20 rounded-lg\"></div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {students?.map((student) => {\n                      const status = getStudentStatus(student.id);\n                      const isMarked = !!status;\n                      \n                      return (\n                        <Card \n                          key={student.id} \n                          className={`${\n                            status === 'present' ? 'bg-green-50 border-green-200' :\n                            status === 'absent' ? 'bg-red-50 border-red-200' :\n                            status === 'late' ? 'bg-yellow-50 border-yellow-200' :\n                            'border-gray-200'\n                          }`}\n                          data-testid={`card-student-${student.id}`}\n                        >\n                          <CardContent className=\"pt-4\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center\">\n                                <div className=\"w-10 h-10 bg-gray-300 rounded-full mr-3 flex items-center justify-center text-xs font-bold text-gray-700\">\n                                  {student.rollNumber}\n                                </div>\n                                <div>\n                                  <p className=\"text-sm font-medium text-gray-900\" data-testid={`text-student-name-${student.id}`}>\n                                    {student.firstName} {student.lastName}\n                                  </p>\n                                  <p className=\"text-xs text-gray-500\" data-testid={`text-roll-number-${student.id}`}>\n                                    Roll: {student.rollNumber}\n                                  </p>\n                                </div>\n                              </div>\n                              \n                              {isMarked ? (\n                                <div className=\"flex items-center space-x-1\">\n                                  <Badge \n                                    className={\n                                      status === 'present' ? 'bg-green-100 text-green-800' :\n                                      status === 'absent' ? 'bg-red-100 text-red-800' :\n                                      'bg-yellow-100 text-yellow-800'\n                                    }\n                                    data-testid={`badge-status-${student.id}`}\n                                  >\n                                    {status}\n                                  </Badge>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    onClick={() => undoMark(student.id)}\n                                    className=\"w-6 h-6 p-0\"\n                                    data-testid={`button-undo-${student.id}`}\n                                  >\n                                    <i className=\"fas fa-undo text-xs\"></i>\n                                  </Button>\n                                </div>\n                              ) : (\n                                <div className=\"flex space-x-1\">\n                                  <Button\n                                    size=\"sm\"\n                                    className=\"w-8 h-8 p-0 bg-green-600 hover:bg-green-700\"\n                                    onClick={() => markAttendance(student.id, 'present')}\n                                    data-testid={`button-present-${student.id}`}\n                                  >\n                                    <i className=\"fas fa-check text-xs\"></i>\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    className=\"w-8 h-8 p-0 bg-red-600 hover:bg-red-700\"\n                                    onClick={() => markAttendance(student.id, 'absent')}\n                                    data-testid={`button-absent-${student.id}`}\n                                  >\n                                    <i className=\"fas fa-times text-xs\"></i>\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    className=\"w-8 h-8 p-0 bg-yellow-600 hover:bg-yellow-700\"\n                                    onClick={() => markAttendance(student.id, 'late')}\n                                    data-testid={`button-late-${student.id}`}\n                                  >\n                                    <i className=\"fas fa-clock text-xs\"></i>\n                                  </Button>\n                                </div>\n                              )}\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"qr\" className=\"mt-6\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"text-center mb-4\">\n                      <QrCode className=\"h-12 w-12 text-gray-400 mx-auto mb-2\" />\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">QR Code Scanner</h3>\n                      <p className=\"text-gray-600 mb-4\">\n                        Scan student QR codes to automatically mark attendance as present\n                      </p>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-center\">\n                        <Button \n                          onClick={toggleScanning}\n                          data-testid=\"button-toggle-scanner\"\n                          className={isScanning ? \"bg-red-600 hover:bg-red-700\" : \"bg-green-600 hover:bg-green-700\"}\n                        >\n                          {isScanning ? (\n                            <>\n                              <X className=\"h-4 w-4 mr-2\" />\n                              Stop Scanner\n                            </>\n                          ) : (\n                            <>\n                              <QrCode className=\"h-4 w-4 mr-2\" />\n                              Start Scanner\n                            </>\n                          )}\n                        </Button>\n                      </div>\n                      \n                      {isScanning && (\n                        <div className=\"relative\">\n                          <video \n                            ref={videoRef}\n                            className=\"w-full max-w-md mx-auto rounded-lg border-2 border-dashed border-gray-300\"\n                            style={{ aspectRatio: '1/1' }}\n                          />\n                          <div className=\"text-center mt-2\">\n                            <p className=\"text-sm text-gray-600\">\n                              Hold student QR codes within the camera view\n                            </p>\n                          </div>\n                        </div>\n                      )}\n                      \n                      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                        <h4 className=\"font-medium text-blue-900 mb-2\">QR Code Format</h4>\n                        <p className=\"text-sm text-blue-700\">\n                          Expected format: <code className=\"bg-blue-100 px-1 rounded\">studentId:rollNumber</code> or just <code className=\"bg-blue-100 px-1 rounded\">studentId</code>\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Action Buttons */}\n      {selectedClass && students && students.length > 0 && (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex justify-between items-center\">\n              <div className=\"text-sm text-gray-600\" data-testid=\"text-progress\">\n                <span>{attendanceRecords.length}</span> of <span>{totalStudents}</span> students marked\n              </div>\n              <div className=\"flex space-x-3\">\n                <Button \n                  variant=\"outline\"\n                  disabled={attendanceRecords.length === 0}\n                  data-testid=\"button-save-draft\"\n                >\n                  Save as Draft\n                </Button>\n                <Button \n                  onClick={handleSubmit}\n                  disabled={attendanceRecords.length === 0 || submitAttendanceMutation.isPending}\n                  data-testid=\"button-submit-attendance\"\n                >\n                  {submitAttendanceMutation.isPending ? 'Submitting...' : 'Submit Attendance'}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":19366},"client/src/pages/teacher/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport type { ClassSchedule } from \"@/types\";\n\nexport default function TeacherDashboard() {\n  const { data: todayClasses, isLoading: classesLoading } = useQuery<ClassSchedule[]>({\n    queryKey: ['/api/teacher/classes/today'],\n  });\n\n  \n\n  const currentTime = new Date();\n  const currentHour = currentTime.getHours();\n  const currentMinute = currentTime.getMinutes();\n  const currentTimeString = `${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}`;\n\n  const getClassStatus = (startTime: string, endTime: string): 'completed' | 'in-progress' | 'upcoming' => {\n    if (currentTimeString > endTime) return 'completed';\n    if (currentTimeString >= startTime && currentTimeString <= endTime) return 'in-progress';\n    return 'upcoming';\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'in-progress':\n        return 'bg-blue-100 text-blue-800';\n      case 'upcoming':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getBorderColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'border-l-green-500';\n      case 'in-progress':\n        return 'border-l-blue-500';\n      case 'upcoming':\n        return 'border-l-gray-300';\n      default:\n        return 'border-l-gray-300';\n    }\n  };\n\n  if (classesLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const todayDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-gray-800\">Today's Schedule</h1>\n          <p className=\"text-gray-600\" data-testid=\"text-current-date\">{todayDate}</p>\n        </div>\n        <div className=\"text-sm text-gray-600\">\n          <i className=\"fas fa-clock mr-2\"></i>\n          Current Time: {currentTimeString}\n        </div>\n      </div>\n\n      {/* Sync Status */}\n      <Card className=\"border-green-200 bg-green-50\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <i className=\"fas fa-sync-alt text-green-500 mr-2\"></i>\n              <span className=\"text-sm text-green-700 font-medium\">All data synced</span>\n            </div>\n            <div className=\"text-xs text-green-600\" data-testid=\"text-last-sync\">\n              Last sync: 2 minutes ago\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Class Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {todayClasses && todayClasses.length > 0 ? todayClasses.map((classItem) => {\n          const status = getClassStatus(classItem.startTime, classItem.endTime);\n          \n          return (\n            <Card key={classItem.id} className={`border-l-4 ${getBorderColor(status)}`} data-testid={`card-class-${classItem.id}`}>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"font-medium text-gray-900\" data-testid={`text-subject-${classItem.id}`}>\n                    {classItem.subject}\n                  </h3>\n                  <Badge className={getStatusColor(status)} data-testid={`badge-status-${classItem.id}`}>\n                    {status === 'in-progress' ? 'In Progress' : \n                     status === 'completed' ? 'Completed' : 'Upcoming'}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-gray-600 mb-1\" data-testid={`text-time-${classItem.id}`}>\n                  {classItem.startTime} - {classItem.endTime}\n                </p>\n                <p className=\"text-xs text-gray-500 mb-3\" data-testid={`text-students-${classItem.id}`}>\n                  {classItem.name}\n                </p>\n                \n                {status === 'completed' && classItem.attendanceCount && (\n                  <div className=\"mb-3\">\n                    <span className=\"text-xs text-green-600\" data-testid={`text-attendance-${classItem.id}`}>\n                      Attendance: {classItem.attendanceCount.present}/{classItem.attendanceCount.total}\n                    </span>\n                  </div>\n                )}\n                \n                <div className=\"mt-2\">\n                  {status === 'in-progress' ? (\n                    <Link href=\"/attendance\">\n                      <Button className=\"w-full\" size=\"sm\" data-testid={`button-take-attendance-${classItem.id}`}>\n                        Take Attendance\n                      </Button>\n                    </Link>\n                  ) : status === 'upcoming' ? (\n                    <Button \n                      className=\"w-full\" \n                      size=\"sm\" \n                      variant=\"outline\" \n                      disabled\n                      data-testid={`button-not-started-${classItem.id}`}\n                    >\n                      Not Started\n                    </Button>\n                  ) : (\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      className=\"w-full text-blue-600\"\n                      data-testid={`button-view-details-${classItem.id}`}\n                    >\n                      View Details\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          );\n        }) : (\n          <div className=\"col-span-full text-center py-12\">\n            <i className=\"fas fa-calendar-alt text-4xl text-gray-400 mb-4\"></i>\n            <p className=\"text-gray-500\">No classes scheduled for today</p>\n          </div>\n        )}\n      </div>\n\n      \n\n      \n    </div>\n  );\n}\n","size_bytes":6640},"client/src/pages/teacher/DigitalDiary.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, BookOpen, Users, Calendar, AlertCircle, CheckCircle2, Clock, Edit, Trash2 } from \"lucide-react\";\n\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst announcementSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  content: z.string().min(1, \"Content is required\"),\n  type: z.enum([\"homework\", \"notice\", \"announcement\"]),\n  priority: z.enum([\"low\", \"medium\", \"high\"]),\n  subjectId: z.string().optional(),\n  classId: z.string().optional(),\n  dueDate: z.string().optional(),\n  recipients: z.array(z.string()).optional(),\n  broadcastType: z.enum([\"all\", \"class\", \"specific\"]).default(\"all\"),\n});\n\ntype AnnouncementFormData = z.infer<typeof announcementSchema>;\n\nexport default function DigitalDiary() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedFilter, setSelectedFilter] = useState<\"all\" | \"homework\" | \"notice\" | \"announcement\">(\"all\");\n  const [broadcastType, setBroadcastType] = useState<\"all\" | \"class\" | \"specific\">(\"all\");\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const form = useForm<AnnouncementFormData>({\n    resolver: zodResolver(announcementSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      type: \"announcement\",\n      priority: \"medium\",\n      subjectId: \"\",\n      classId: \"\",\n      dueDate: \"\",\n      recipients: [],\n      broadcastType: \"all\",\n    },\n  });\n\n  // Fetch teacher's announcements only\n  const { data: announcements = [], isLoading } = useQuery({\n    queryKey: [\"/api/announcements\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/announcements\");\n      return response.json();\n    },\n  });\n\n  // Fetch teacher's assigned subjects only\n  const { data: subjects = [] } = useQuery({\n    queryKey: [\"/api/teacher/subjects\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/teacher/subjects\");\n      return response.json();\n    },\n  });\n\n  // Fetch teacher's students grouped by subject (this replaces the generic classes)\n  const { data: teacherStudents = [] } = useQuery({\n    queryKey: [\"/api/teacher/students\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/teacher/students\");\n      return response.json();\n    },\n  });\n\n  // Use teacherStudents as students (avoid duplicate query)\n\n  // Create announcement mutation\n  const createAnnouncementMutation = useMutation({\n    mutationFn: async (data: AnnouncementFormData) => {\n      // Prepare announcement data with recipient logic\n      const announcementData = { ...data };\n      \n      // Determine recipients based on broadcast type (restricted to teacher's students)\n      if (data.broadcastType === \"all\") {\n        // Get teacher's students only (not all students in school)\n        const studentsResponse = await fetch(\"/api/teacher/students\");\n        const teacherStudents = await studentsResponse.json();\n        announcementData.recipients = teacherStudents.map((student: any) => student.id);\n      } else if (data.broadcastType === \"class\" && data.classId) {\n        // Get students in specific subject that this teacher teaches\n        const teacherStudentsResponse = await fetch(\"/api/teacher/students\");\n        const teacherStudents = await teacherStudentsResponse.json();\n        // Filter students by the selected subject\n        const subjectStudents = teacherStudents.filter((s: any) => \n          s.enrolledSubjects && s.enrolledSubjects.some((sub: any) => sub.subjectId === data.classId)\n        );\n        announcementData.recipients = subjectStudents.map((student: any) => student.id);\n      } else if (data.broadcastType === \"specific\") {\n        // Use manually selected recipients (already filtered to teacher's students in UI)\n        announcementData.recipients = data.recipients || [];\n      }\n      \n      console.log(\"Creating announcement with data:\", announcementData);\n      \n      const response = await fetch(\"/api/announcements\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(announcementData),\n      });\n      if (!response.ok) throw new Error(\"Failed to create announcement\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/announcements\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      setBroadcastType(\"all\");\n      toast({\n        title: \"Success\",\n        description: \"Announcement created successfully!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create announcement\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete announcement mutation\n  const deleteAnnouncementMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/announcements/${id}`, {\n        method: \"DELETE\",\n      });\n      if (!response.ok) throw new Error(\"Failed to delete announcement\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/announcements\"] });\n      toast({\n        title: \"Success\",\n        description: \"Announcement deleted successfully!\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AnnouncementFormData) => {\n    // Add broadcast type from state to form data\n    const submitData = { ...data, broadcastType };\n    createAnnouncementMutation.mutate(submitData);\n  };\n\n  const filteredAnnouncements = Array.isArray(announcements) \n    ? announcements.filter((announcement: any) => \n        selectedFilter === \"all\" || announcement.type === selectedFilter\n      )\n    : [];\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"homework\": return <BookOpen className=\"h-4 w-4\" />;\n      case \"notice\": return <AlertCircle className=\"h-4 w-4\" />;\n      case \"reminder\": return <Clock className=\"h-4 w-4\" />;\n      default: return <Users className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\": return \"destructive\";\n      case \"medium\": return \"default\";\n      default: return \"secondary\";\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Digital Diary</h1>\n          <p className=\"text-muted-foreground\">Create and manage announcements for your students</p>\n        </div>\n        \n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-announcement\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Announcement\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create New Announcement</DialogTitle>\n            </DialogHeader>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Enter announcement title\" data-testid=\"input-title\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"content\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Content</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} placeholder=\"Enter announcement content\" rows={4} data-testid=\"textarea-content\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"type\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-type\">\n                              <SelectValue placeholder=\"Select type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"homework\">Homework</SelectItem>\n                            <SelectItem value=\"notice\">Notice</SelectItem>\n                            <SelectItem value=\"announcement\">Announcement</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"priority\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Priority</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-priority\">\n                              <SelectValue placeholder=\"Select priority\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"low\">Low</SelectItem>\n                            <SelectItem value=\"medium\">Medium</SelectItem>\n                            <SelectItem value=\"high\">High</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"subjectId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Subject (Optional)</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-subject\">\n                              <SelectValue placeholder=\"Select subject\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {Array.isArray(subjects) && subjects.map((subject: any) => (\n                              <SelectItem key={subject.id} value={subject.id}>\n                                {subject.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"dueDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Due Date (Optional)</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"date\" data-testid=\"input-due-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Recipients Section */}\n                <div className=\"space-y-4 p-4 bg-gray-50 rounded-lg\">\n                  <h4 className=\"font-medium text-gray-900 flex items-center gap-2\">\n                    <Users className=\"h-4 w-4\" />\n                    Recipients\n                  </h4>\n                  \n                  <div className=\"space-y-3\">\n                    <label className=\"text-sm font-medium\">Send to:</label>\n                    <div className=\"space-y-2\">\n                      <label className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"radio\"\n                          name=\"broadcast\"\n                          value=\"all\"\n                          checked={broadcastType === \"all\"}\n                          onChange={(e) => setBroadcastType(e.target.value as \"all\" | \"class\" | \"specific\")}\n                          className=\"text-blue-600\"\n                        />\n                        <span className=\"text-sm\">All Students</span>\n                      </label>\n                      \n                      <label className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"radio\"\n                          name=\"broadcast\"\n                          value=\"class\"\n                          checked={broadcastType === \"class\"}\n                          onChange={(e) => setBroadcastType(e.target.value as \"all\" | \"class\" | \"specific\")}\n                          className=\"text-blue-600\"\n                        />\n                        <span className=\"text-sm\">Specific Subject</span>\n                      </label>\n                      \n                      <label className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"radio\"\n                          name=\"broadcast\"\n                          value=\"specific\"\n                          checked={broadcastType === \"specific\"}\n                          onChange={(e) => setBroadcastType(e.target.value as \"all\" | \"class\" | \"specific\")}\n                          className=\"text-blue-600\"\n                        />\n                        <span className=\"text-sm\">Select Specific Students</span>\n                      </label>\n                    </div>\n                  </div>\n\n                  {/* Class selector for class broadcast */}\n                  {broadcastType === \"class\" && (\n                    <FormField\n                      control={form.control}\n                      name=\"classId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Select Subject</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-subject\">\n                                <SelectValue placeholder=\"Choose a subject\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {Array.isArray(subjects) && subjects.map((subject: any) => (\n                                <SelectItem key={subject.id} value={subject.id}>\n                                  {subject.name} ({subject.code})\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                  {/* Student multi-selector for specific broadcast */}\n                  {broadcastType === \"specific\" && (\n                    <FormField\n                      control={form.control}\n                      name=\"recipients\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Select Students</FormLabel>\n                          <div className=\"max-h-32 overflow-y-auto border rounded-md p-2 space-y-1\">\n                            {Array.isArray(teacherStudents) && teacherStudents.map((student: any) => (\n                              <label key={student.id} className=\"flex items-center space-x-2 text-sm\">\n                                <input\n                                  type=\"checkbox\"\n                                  checked={field.value?.includes(student.id) || false}\n                                  onChange={(e) => {\n                                    const currentValue = field.value || [];\n                                    if (e.target.checked) {\n                                      field.onChange([...currentValue, student.id]);\n                                    } else {\n                                      field.onChange(currentValue.filter(id => id !== student.id));\n                                    }\n                                  }}\n                                  className=\"text-blue-600\"\n                                />\n                                <span>{student.firstName} {student.lastName} ({student.classLevel})</span>\n                              </label>\n                            ))}\n                          </div>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createAnnouncementMutation.isPending}\n                    data-testid=\"button-submit\"\n                  >\n                    {createAnnouncementMutation.isPending ? \"Creating...\" : \"Create Announcement\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Filter tabs */}\n      <div className=\"flex space-x-2\">\n        {[\"all\", \"homework\", \"notice\", \"announcement\"].map((filter) => (\n          <Button\n            key={filter}\n            variant={selectedFilter === filter ? \"default\" : \"outline\"}\n            onClick={() => setSelectedFilter(filter as any)}\n            className=\"capitalize\"\n            data-testid={`filter-${filter}`}\n          >\n            {filter === \"all\" ? \"All\" : filter}\n          </Button>\n        ))}\n      </div>\n\n      {/* Announcements list */}\n      <div className=\"space-y-4\">\n        {isLoading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n            <p className=\"mt-2 text-muted-foreground\">Loading announcements...</p>\n          </div>\n        ) : filteredAnnouncements.length === 0 ? (\n          <Card>\n            <CardContent className=\"text-center py-8\">\n              <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No announcements found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {selectedFilter === \"all\" \n                  ? \"Create your first announcement to get started\"\n                  : `No ${selectedFilter} announcements found`\n                }\n              </p>\n              <Button onClick={() => setIsCreateDialogOpen(true)} data-testid=\"button-create-first\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Announcement\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredAnnouncements.map((announcement: any) => (\n            <Card key={announcement.id} data-testid={`card-announcement-${announcement.id}`}>\n              <CardHeader className=\"pb-2\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    {getTypeIcon(announcement.type)}\n                    <CardTitle className=\"text-lg\">{announcement.title}</CardTitle>\n                    <Badge variant={getPriorityColor(announcement.priority) as any}>\n                      {announcement.priority}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant=\"outline\" className=\"capitalize\">\n                      {announcement.type}\n                    </Badge>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => deleteAnnouncementMutation.mutate(announcement.id)}\n                      data-testid={`button-delete-${announcement.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                  <span>Created: {new Date(announcement.createdAt).toLocaleDateString()}</span>\n                  {announcement.dueDate && (\n                    <span className=\"flex items-center\">\n                      <Calendar className=\"h-3 w-3 mr-1\" />\n                      Due: {new Date(announcement.dueDate).toLocaleDateString()}\n                    </span>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-700 whitespace-pre-wrap\" data-testid={`text-content-${announcement.id}`}>\n                  {announcement.content}\n                </p>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":23027},"client/src/pages/teacher/Earnings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { TeacherEarnings, CashDrawRequest } from \"@/types\";\n\nexport default function Earnings() {\n  const [requestAmount, setRequestAmount] = useState(\"\");\n  const [requestReason, setRequestReason] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: earnings, isLoading: earningsLoading } = useQuery<TeacherEarnings>({\n    queryKey: ['/api/teacher/earnings'],\n  });\n\n  const { data: cashDrawRequests } = useQuery<CashDrawRequest[]>({\n    queryKey: ['/api/cash-draw-requests'],\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (data: { amount: number; reason: string }) => {\n      return await apiRequest('POST', '/api/cash-draw-requests', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Cash draw request submitted successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/cash-draw-requests'] });\n      setRequestAmount(\"\");\n      setRequestReason(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit request. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitRequest = () => {\n    if (!requestAmount || !requestReason.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter both amount and reason.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const amount = parseFloat(requestAmount);\n    if (amount <= 0 || amount > (earnings?.total || 0)) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a valid amount within your available earnings.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createRequestMutation.mutate({\n      amount,\n      reason: requestReason,\n    });\n  };\n\n  const myRequests = cashDrawRequests?.filter(request => \n    request.teacherId === 'current-teacher-id' // This should be the current user's ID\n  ) || [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'bg-green-100 text-green-800';\n      case 'denied':\n        return 'bg-red-100 text-red-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'fas fa-check-circle text-green-600';\n      case 'denied':\n        return 'fas fa-times-circle text-red-600';\n      case 'pending':\n        return 'fas fa-clock text-yellow-600';\n      default:\n        return 'fas fa-question-circle text-gray-600';\n    }\n  };\n\n  if (earningsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"h-32 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Earnings Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <i className=\"fas fa-percentage text-blue-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Base Rate (70%)</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-base-earnings\">\n                  Rs. {earnings?.baseAmount?.toLocaleString() || '0'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <i className=\"fas fa-plus text-green-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Extra Classes</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-extra-earnings\">\n                  Rs. {earnings?.extraClasses?.toLocaleString() || '0'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\n                <i className=\"fas fa-wallet text-purple-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Earned</p>\n                <p className=\"text-2xl font-semibold text-purple-600\" data-testid=\"stat-total-earnings\">\n                  Rs. {earnings?.total?.toLocaleString() || '0'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Request Cash Draw */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Request Cash Draw</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"amount\">Amount (Rs. )</Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                placeholder=\"0\"\n                value={requestAmount}\n                onChange={(e) => setRequestAmount(e.target.value)}\n                max={earnings?.total || 0}\n                data-testid=\"input-request-amount\"\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Available: Rs. {earnings?.total?.toLocaleString() || '0'}\n              </p>\n            </div>\n\n            <div>\n              <Label htmlFor=\"reason\">Reason for Request</Label>\n              <Textarea\n                id=\"reason\"\n                placeholder=\"Please provide a reason for this cash draw request...\"\n                value={requestReason}\n                onChange={(e) => setRequestReason(e.target.value)}\n                rows={3}\n                data-testid=\"textarea-request-reason\"\n              />\n            </div>\n\n            <Button \n              onClick={handleSubmitRequest}\n              disabled={!requestAmount || !requestReason.trim() || createRequestMutation.isPending}\n              className=\"w-full\"\n              data-testid=\"button-submit-request\"\n            >\n              {createRequestMutation.isPending ? 'Submitting...' : 'Submit Request'}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Earnings Breakdown */}\n        <Card>\n          <CardHeader>\n            <CardTitle>This Month's Breakdown</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                <span className=\"text-gray-600\">Physics A-Level (24 students)</span>\n                <span className=\"font-semibold\">Rs. 12,000</span>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                <span className=\"text-gray-600\">Chemistry O-Level (18 students)</span>\n                <span className=\"font-semibold\">Rs. 9,000</span>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                <span className=\"text-gray-600\">Extra Sessions (5 hours)</span>\n                <span className=\"font-semibold\">Rs. 3,500</span>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-blue-50 rounded-lg border-t border-blue-200\">\n                <span className=\"font-semibold text-blue-800\">Total This Month</span>\n                <span className=\"font-bold text-blue-800\">Rs. {earnings?.total?.toLocaleString() || '0'}</span>\n              </div>\n            </div>\n\n            <div className=\"pt-4\">\n              <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-download-statement\">\n                <i className=\"fas fa-download mr-2\"></i>\n                Download Statement\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Request History */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Request History</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Date</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Amount</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Reason</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Status</th>\n                  <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Reviewed</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {myRequests.length > 0 ? myRequests.map((request) => (\n                  <tr key={request.id} className=\"hover:bg-gray-50\" data-testid={`row-request-${request.id}`}>\n                    <td className=\"px-4 py-3\" data-testid={`text-date-${request.id}`}>\n                      {new Date(request.requestedAt).toLocaleDateString()}\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <span className=\"font-semibold\" data-testid={`text-amount-${request.id}`}>\n                        Rs. {Number(request.amount).toLocaleString()}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <span className=\"text-gray-700 max-w-xs truncate\" data-testid={`text-reason-${request.id}`}>\n                        {request.reason}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      <Badge className={getStatusColor(request.status)} data-testid={`badge-status-${request.id}`}>\n                        <i className={`${getStatusIcon(request.status)} mr-1`}></i>\n                        {request.status.toUpperCase()}\n                      </Badge>\n                    </td>\n                    <td className=\"px-4 py-3\">\n                      {request.reviewedAt ? (\n                        <div className=\"text-sm\" data-testid={`text-reviewed-${request.id}`}>\n                          <p>{new Date(request.reviewedAt).toLocaleDateString()}</p>\n                          {request.notes && (\n                            <p className=\"text-xs text-gray-500\">{request.notes}</p>\n                          )}\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400 text-sm\">Pending</span>\n                      )}\n                    </td>\n                  </tr>\n                )) : (\n                  <tr>\n                    <td colSpan={5} className=\"px-4 py-8 text-center text-gray-500\">\n                      <i className=\"fas fa-history text-4xl mb-4\"></i>\n                      <p>No cash draw requests yet</p>\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12395},"client/src/pages/teacher/Gradebook.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Assessment, Grade } from \"@shared/schema\";\n\ninterface Student {\n  id: string;\n  firstName: string;\n  lastName: string;\n  rollNumber: string;\n}\n\nexport default function Gradebook() {\n  const [dialogSubject, setDialogSubject] = useState(\"\");\n  const [newAssessment, setNewAssessment] = useState({\n    name: \"\",\n    totalMarks: \"\",\n    date: \"\",\n    description: \"\",\n  });\n  const [grades, setGrades] = useState<{ [studentId: string]: { marks: string; comments: string } }>({});\n  const [selectedAssessmentForGrading, setSelectedAssessmentForGrading] = useState<string | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch only teacher's assigned subjects (maintaining data isolation)\n  const { data: subjects = [] } = useQuery({\n    queryKey: ['/api/teacher/subjects'],\n  });\n\n  // Fetch only teacher's students (enrolled in subjects they teach)\n  const { data: students = [] } = useQuery<Student[]>({\n    queryKey: ['/api/teacher/students'],\n  });\n\n  // Fetch only teacher's assessments (maintaining data isolation)\n  const { data: assessments = [] } = useQuery<Assessment[]>({\n    queryKey: ['/api/teacher/assessments'],\n  });\n\n  const createAssessmentMutation = useMutation({\n    mutationFn: async (assessmentData: any) => {\n      return await apiRequest('POST', '/api/assessments', assessmentData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Assessment created successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/assessments'] });\n      setNewAssessment({ name: \"\", totalMarks: \"\", date: \"\", description: \"\" });\n      setDialogSubject(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create assessment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createGradesMutation = useMutation({\n    mutationFn: async (gradesData: any[]) => {\n      const promises = gradesData.map(grade => \n        apiRequest('POST', '/api/grades', grade)\n      );\n      return Promise.all(promises);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Grades submitted successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/grades'] });\n      setGrades({});\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit grades. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateAssessment = () => {\n    console.log('Validation Debug:', {\n      name: newAssessment.name,\n      totalMarks: newAssessment.totalMarks,\n      dialogSubject: dialogSubject,\n      date: newAssessment.date\n    });\n    \n    // Check if required fields are filled\n    const missingFields = [];\n    if (!newAssessment.name?.trim()) missingFields.push('Assessment Name');\n    if (!newAssessment.totalMarks?.trim()) missingFields.push('Total Marks');\n    if (!dialogSubject) missingFields.push('Subject');\n    \n    if (missingFields.length > 0) {\n      console.log('Validation failed - missing fields:', missingFields);\n      toast({\n        title: \"Validation Error\",\n        description: `Please fill in: ${missingFields.join(', ')}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Use dialogSubject for assessment creation\n    const subjectToUse = dialogSubject;\n    \n    console.log('Creating assessment with data:', {\n      name: newAssessment.name,\n      subjectId: subjectToUse,\n      totalMarks: parseInt(newAssessment.totalMarks),\n      assessmentDate: newAssessment.date,\n      description: newAssessment.description,\n    });\n\n    createAssessmentMutation.mutate({\n      name: newAssessment.name,\n      subjectId: subjectToUse,\n      totalMarks: parseInt(newAssessment.totalMarks),\n      assessmentDate: newAssessment.date,\n      description: newAssessment.description,\n    });\n  };\n\n  const handleGradeChange = (studentId: string, field: 'marks' | 'comments', value: string) => {\n    setGrades(prev => ({\n      ...prev,\n      [studentId]: {\n        ...prev[studentId],\n        [field]: value,\n      }\n    }));\n  };\n\n  const calculateGrade = (marks: number, totalMarks: number): string => {\n    const percentage = (marks / totalMarks) * 100;\n    if (percentage >= 90) return 'A+';\n    if (percentage >= 80) return 'A';\n    if (percentage >= 70) return 'B+';\n    if (percentage >= 60) return 'B';\n    if (percentage >= 50) return 'C';\n    return 'F';\n  };\n\n  const handleSubmitGrades = () => {\n    if (!selectedAssessmentForGrading) return;\n    \n    const selectedAssessmentData = assessments?.find(a => a.id === selectedAssessmentForGrading);\n    if (!selectedAssessmentData) return;\n\n    const gradesData = Object.entries(grades)\n      .filter(([_, data]) => data.marks.trim() !== '')\n      .map(([studentId, data]) => ({\n        assessmentId: selectedAssessmentForGrading,\n        studentId,\n        marksObtained: parseInt(data.marks),\n        grade: calculateGrade(parseInt(data.marks), selectedAssessmentData.totalMarks),\n        comments: data.comments,\n      }));\n\n    if (gradesData.length === 0) {\n      toast({\n        title: \"Warning\",\n        description: \"Please enter grades for at least one student.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createGradesMutation.mutate(gradesData);\n  };\n\n  const handleEnterScores = (assessmentId: string) => {\n    setSelectedAssessmentForGrading(assessmentId);\n    setGrades({}); // Reset grades when switching assessments\n  };\n\n  const handleBackToDashboard = () => {\n    setSelectedAssessmentForGrading(null);\n    setGrades({});\n  };\n\n  // Get subject name by ID\n  const getSubjectName = (subjectId: string) => {\n    return Array.isArray(subjects) ? subjects.find((s: any) => s.id === subjectId)?.name || 'Unknown Subject' : 'Unknown Subject';\n  };\n\n  const selectedAssessmentData = assessments?.find(a => a.id === selectedAssessmentForGrading);\n\n  // Grade Entry View - When an assessment is selected for grading\n  if (selectedAssessmentForGrading && selectedAssessmentData) {\n    return (\n      <div className=\"space-y-6\">\n        {/* Header with Back Button */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\">Enter Scores</h1>\n            <p className=\"text-gray-600 mt-1\">\n              {selectedAssessmentData.name} - {getSubjectName(selectedAssessmentData.subjectId)}\n            </p>\n          </div>\n          <Button variant=\"outline\" onClick={handleBackToDashboard} data-testid=\"button-back-dashboard\">\n            <i className=\"fas fa-arrow-left mr-2\"></i>\n            Back to Dashboard\n          </Button>\n        </div>\n\n        {/* Student List for Grade Entry */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Student List</CardTitle>\n            <p className=\"text-sm text-gray-600\">\n              Enter the marks obtained by each student. Total marks for this assessment are{' '}\n              <span className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded font-medium\">\n                {selectedAssessmentData.totalMarks}\n              </span>\n              .\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-4 gap-4 pb-2 border-b font-medium text-gray-700\">\n                <div>Student ID</div>\n                <div>Student Name</div>\n                <div></div>\n                <div>Score</div>\n              </div>\n              \n              {students?.map((student) => {\n                const studentGrade = grades[student.id];\n                const marks = studentGrade?.marks || '';\n                \n                return (\n                  <div key={student.id} className=\"grid grid-cols-4 gap-4 items-center py-3 border-b border-gray-100\">\n                    <div className=\"font-medium\" data-testid={`text-student-id-${student.id}`}>\n                      {student.rollNumber}\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center text-sm font-medium text-gray-600 mr-3\">\n                        {student.firstName.charAt(0)}{student.lastName.charAt(0)}\n                      </div>\n                      <span data-testid={`text-student-name-${student.id}`}>\n                        {student.firstName} {student.lastName}\n                      </span>\n                    </div>\n                    <div></div>\n                    <div className=\"flex items-center\">\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0\"\n                        value={marks}\n                        onChange={(e) => handleGradeChange(student.id, 'marks', e.target.value)}\n                        className=\"w-20 text-center\"\n                        max={selectedAssessmentData.totalMarks}\n                        min=\"0\"\n                        data-testid={`input-score-${student.id}`}\n                      />\n                      <span className=\"ml-2 text-gray-500\">/ {selectedAssessmentData.totalMarks}</span>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n            \n            <div className=\"mt-6 flex justify-end\">\n              <Button \n                onClick={handleSubmitGrades}\n                disabled={createGradesMutation.isPending}\n                data-testid=\"button-submit-grades\"\n              >\n                {createGradesMutation.isPending ? 'Submitting...' : 'Save Grades'}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Main Assessments Table View\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Create Button */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Gradebook</h1>\n        </div>\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-assessment\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              Create New Assessment\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create New Assessment</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"assessmentSubject\">Subject *</Label>\n                <Select \n                  value={dialogSubject} \n                  onValueChange={(value) => {\n                    console.log('Subject selected:', value);\n                    setDialogSubject(value);\n                  }}\n                >\n                  <SelectTrigger data-testid=\"select-assessment-subject\">\n                    <SelectValue placeholder=\"Choose a subject...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Array.isArray(subjects) && subjects.map((subject: any) => (\n                      <SelectItem key={subject.id} value={subject.id}>\n                        {subject.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"assessmentName\">Assessment Name *</Label>\n                <Input\n                  id=\"assessmentName\"\n                  placeholder=\"e.g., Quiz 1, Midterm Exam\"\n                  value={newAssessment.name}\n                  onChange={(e) => {\n                    console.log('Assessment name changed:', e.target.value);\n                    setNewAssessment(prev => ({ ...prev, name: e.target.value }));\n                  }}\n                  data-testid=\"input-assessment-name\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"totalMarks\">Total Marks *</Label>\n                <Input\n                  id=\"totalMarks\"\n                  type=\"number\"\n                  placeholder=\"100\"\n                  value={newAssessment.totalMarks}\n                  onChange={(e) => {\n                    console.log('Total marks changed:', e.target.value);\n                    setNewAssessment(prev => ({ ...prev, totalMarks: e.target.value }));\n                  }}\n                  data-testid=\"input-total-marks\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"assessmentDate\">Assessment Date</Label>\n                <Input\n                  id=\"assessmentDate\"\n                  type=\"date\"\n                  value={newAssessment.date}\n                  onChange={(e) => setNewAssessment(prev => ({ ...prev, date: e.target.value }))}\n                  data-testid=\"input-assessment-date\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Optional description...\"\n                  value={newAssessment.description}\n                  onChange={(e) => setNewAssessment(prev => ({ ...prev, description: e.target.value }))}\n                  data-testid=\"textarea-description\"\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\">Cancel</Button>\n                <Button \n                  onClick={handleCreateAssessment}\n                  disabled={createAssessmentMutation.isPending}\n                  data-testid=\"button-save-assessment\"\n                >\n                  {createAssessmentMutation.isPending ? 'Creating...' : 'Create Assessment'}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Assessments Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Assessments</CardTitle>\n          <p className=\"text-sm text-gray-600\">View and manage your created assessments.</p>\n        </CardHeader>\n        <CardContent>\n          {assessments && assessments.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Title</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Subject</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Date</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Entries</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Total Marks</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-gray-200\">\n                  {assessments.map((assessment) => (\n                    <tr key={assessment.id} data-testid={`row-assessment-${assessment.id}`}>\n                      <td className=\"px-4 py-3\">\n                        <div className=\"font-medium\" data-testid={`text-assessment-title-${assessment.id}`}>\n                          {assessment.name}\n                        </div>\n                      </td>\n                      <td className=\"px-4 py-3\" data-testid={`text-assessment-subject-${assessment.id}`}>\n                        {getSubjectName(assessment.subjectId)}\n                      </td>\n                      <td className=\"px-4 py-3\" data-testid={`text-assessment-date-${assessment.id}`}>\n                        {new Date(assessment.assessmentDate).toLocaleDateString()}\n                      </td>\n                      <td className=\"px-4 py-3\" data-testid={`text-assessment-entries-${assessment.id}`}>\n                        0 / {students?.length || 0}\n                      </td>\n                      <td className=\"px-4 py-3\" data-testid={`text-assessment-marks-${assessment.id}`}>\n                        {assessment.totalMarks}\n                      </td>\n                      <td className=\"px-4 py-3\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleEnterScores(assessment.id)}\n                          data-testid={`button-enter-scores-${assessment.id}`}\n                        >\n                          <i className=\"fas fa-edit mr-1\"></i>\n                          Enter Scores\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              <p>No assessments created yet.</p>\n              <p className=\"text-sm mt-1\">Click \"Create New Assessment\" to get started.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":17957},"client/src/pages/teacher/ScheduleManager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  Plus, \n  Calendar, \n  Clock, \n  MapPin, \n  Edit, \n  Trash2, \n  AlertCircle\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst scheduleSchema = z.object({\n  subjectId: z.string().min(1, \"Subject is required\"),\n  dayOfWeek: z.enum([\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]),\n  startTime: z.string().min(1, \"Start time is required\"),\n  endTime: z.string().min(1, \"End time is required\"),\n  location: z.string().optional(),\n});\n\n\n\ntype ScheduleFormData = z.infer<typeof scheduleSchema>;\n\nconst dayLabels = {\n  monday: \"Monday\",\n  tuesday: \"Tuesday\", \n  wednesday: \"Wednesday\",\n  thursday: \"Thursday\",\n  friday: \"Friday\",\n  saturday: \"Saturday\",\n  sunday: \"Sunday\"\n};\n\nexport default function ScheduleManager() {\n  const [isScheduleDialogOpen, setIsScheduleDialogOpen] = useState(false);\n  const [editingSchedule, setEditingSchedule] = useState<any>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const scheduleForm = useForm<ScheduleFormData>({\n    resolver: zodResolver(scheduleSchema),\n    defaultValues: {\n      subjectId: \"\",\n      dayOfWeek: \"monday\",\n      startTime: \"\",\n      endTime: \"\",\n      location: \"\",\n    },\n  });\n\n  \n\n  // Fetch teacher's schedules\n  const { data: schedules = [], isLoading: schedulesLoading } = useQuery({\n    queryKey: [\"/api/teacher/schedules\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/teacher/schedules\");\n      const data = await response.json();\n      // Return empty array if the response is an error or not an array\n      return Array.isArray(data) ? data : [];\n    },\n  });\n\n  // Fetch teacher's subjects\n  const { data: subjects = [] } = useQuery({\n    queryKey: [\"/api/teacher/subjects\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/teacher/subjects\");\n      return response.json();\n    },\n  });\n\n  \n\n  // Create/Update schedule mutation\n  const scheduleUpsertMutation = useMutation({\n    mutationFn: async (data: ScheduleFormData & { id?: string }) => {\n      if (data.id) {\n        // Update existing schedule\n        return apiRequest(\"PUT\", `/api/teacher/schedules/${data.id}`, data);\n      } else {\n        // Create new schedule\n        return apiRequest(\"POST\", \"/api/teacher/schedules\", data);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teacher/schedules\"] });\n      setIsScheduleDialogOpen(false);\n      setEditingSchedule(null);\n      scheduleForm.reset();\n      toast({\n        title: \"Success\",\n        description: editingSchedule ? \"Schedule updated successfully!\" : \"Schedule created successfully!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save schedule\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete schedule mutation\n  const deleteScheduleMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/teacher/schedules/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teacher/schedules\"] });\n      toast({\n        title: \"Success\",\n        description: \"Schedule deleted successfully!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\", \n        description: \"Failed to delete schedule\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  \n\n  const onScheduleSubmit = (data: ScheduleFormData) => {\n    scheduleUpsertMutation.mutate(editingSchedule ? { ...data, id: editingSchedule.id } : data);\n  };\n\n  \n\n  const handleEditSchedule = (schedule: any) => {\n    setEditingSchedule(schedule);\n    scheduleForm.reset({\n      subjectId: schedule.subjectId,\n      dayOfWeek: schedule.dayOfWeek,\n      startTime: schedule.startTime,\n      endTime: schedule.endTime,\n      location: schedule.location || \"\",\n    });\n    setIsScheduleDialogOpen(true);\n  };\n\n  const handleDeleteSchedule = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this schedule?\")) {\n      deleteScheduleMutation.mutate(id);\n    }\n  };\n\n  \n\n  // Group schedules by day\n  const schedulesByDay = Array.isArray(schedules) ? schedules.reduce((acc: any, schedule: any) => {\n    if (!acc[schedule.dayOfWeek]) {\n      acc[schedule.dayOfWeek] = [];\n    }\n    acc[schedule.dayOfWeek].push(schedule);\n    return acc;\n  }, {}) : {};\n\n  // Sort each day's schedules by start time\n  Object.keys(schedulesByDay).forEach(day => {\n    schedulesByDay[day].sort((a: any, b: any) => a.startTime.localeCompare(b.startTime));\n  });\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Schedule Manager</h1>\n          <p className=\"text-muted-foreground\">Manage your class schedules</p>\n        </div>\n        \n        <Dialog open={isScheduleDialogOpen} onOpenChange={setIsScheduleDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-schedule\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Schedule\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>{editingSchedule ? \"Edit Schedule\" : \"Add New Schedule\"}</DialogTitle>\n            </DialogHeader>\n            <Form {...scheduleForm}>\n              <form onSubmit={scheduleForm.handleSubmit(onScheduleSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={scheduleForm.control}\n                  name=\"subjectId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Subject</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-subject\">\n                            <SelectValue placeholder=\"Select subject\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {subjects.map((subject: any) => (\n                            <SelectItem key={subject.id} value={subject.id}>\n                              {subject.name} ({subject.code})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={scheduleForm.control}\n                  name=\"dayOfWeek\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Day of Week</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-day\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {Object.entries(dayLabels).map(([value, label]) => (\n                            <SelectItem key={value} value={value}>\n                              {label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={scheduleForm.control}\n                    name=\"startTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Start Time</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"time\"\n                            data-testid=\"input-start-time\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={scheduleForm.control}\n                    name=\"endTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>End Time</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"time\"\n                            data-testid=\"input-end-time\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={scheduleForm.control}\n                  name=\"location\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location (Optional)</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Room 101, Lab A, etc.\"\n                          data-testid=\"input-location\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-3\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsScheduleDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={scheduleUpsertMutation.isPending} data-testid=\"button-save-schedule\">\n                    {scheduleUpsertMutation.isPending ? \"Saving...\" : (editingSchedule ? \"Update\" : \"Create\")}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Regular Schedules */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Weekly Schedule\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {schedulesLoading ? (\n            <div className=\"text-center py-8\">Loading schedules...</div>\n          ) : schedules.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No schedules created yet. Click \"Add Schedule\" to get started.\n            </div>\n          ) : (\n            <div className=\"grid gap-4\">\n              {Object.entries(dayLabels).map(([day, label]) => (\n                <div key={day} className=\"border rounded-lg p-4\">\n                  <h3 className=\"font-semibold mb-3\">{label}</h3>\n                  {schedulesByDay[day]?.length > 0 ? (\n                    <div className=\"grid gap-3\">\n                      {schedulesByDay[day].map((schedule: any) => (\n                        <div key={schedule.id} className=\"flex items-center justify-between p-3 bg-muted rounded-lg\" data-testid={`schedule-item-${schedule.id}`}>\n                          <div className=\"flex items-center gap-4\">\n                            <div className=\"flex items-center gap-2\">\n                              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                              <span className=\"font-medium\">\n                                {schedule.startTime} - {schedule.endTime}\n                              </span>\n                            </div>\n                            <Badge variant=\"outline\">{schedule.subjectName}</Badge>\n                            {schedule.location && (\n                              <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                                <MapPin className=\"h-3 w-3\" />\n                                {schedule.location}\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditSchedule(schedule)}\n                              data-testid={`button-edit-${schedule.id}`}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteSchedule(schedule.id)}\n                              data-testid={`button-delete-${schedule.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-muted-foreground text-sm\">No classes scheduled</div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      \n    </div>\n  );\n}","size_bytes":14450},"client/src/pages/finance/EnrollmentNew.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertStudentSchema } from \"@shared/schema\";\nimport type { z } from \"zod\";\nimport { ChevronRight, User, Phone, Mail, MapPin, Users, GraduationCap, FileText } from \"lucide-react\";\n\ninterface Subject {\n  id: string;\n  name: string;\n  code: string;\n  classLevels: string[];\n  baseFee: string;\n  description: string | null;\n  isActive: boolean | null;\n  createdAt: Date | null;\n}\n\ninterface RollNumberResponse {\n  nextRollNumber: string;\n  format: string;\n  example: string;\n}\n\ninterface EnrollmentFormData {\n  // Student Personal Info\n  firstName: string;\n  lastName: string;\n  dateOfBirth: string;\n  gender: 'male' | 'female';\n  classLevels: string[];\n  rollNumber: string;\n  \n  // Contact Info\n  studentPhone: string;\n  studentEmail: string;\n  homeAddress: string;\n  \n  // Parent/Guardian Info\n  parentName: string;\n  parentPhone: string;\n  parentEmail: string;\n  \n  // Additional Parent/Guardian\n  additionalParentName: string;\n  additionalParentPhone: string;\n  additionalParentEmail: string;\n  \n  // Enrollment Details\n  selectedSubjects: string[];\n  addOns: string[];\n  subjectDiscounts: Record<string, {\n    discountType: 'none' | 'percentage' | 'fixed';\n    discountValue: number;\n    discountReason: string;\n  }>;\n}\n\nconst classLevelOptions = [\n  { value: 'o-level', label: 'O-Level', color: 'bg-blue-100 text-blue-800' },\n  { value: 'igcse', label: 'IGCSE', color: 'bg-green-100 text-green-800' },\n  { value: 'as-level', label: 'AS-Level', color: 'bg-purple-100 text-purple-800' },\n  { value: 'a2-level', label: 'A2-Level', color: 'bg-orange-100 text-orange-800' },\n];\n\nexport default function EnrollmentNew() {\n  const [formData, setFormData] = useState<Partial<EnrollmentFormData>>({\n    classLevels: [],\n    selectedSubjects: [],\n    addOns: [],\n    subjectDiscounts: {},\n  });\n  const [currentStep, setCurrentStep] = useState(1);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: subjects } = useQuery<Subject[]>({\n    queryKey: ['/api/subjects'],\n    enabled: currentStep >= 2,\n  });\n\n  // Reserve a unique roll number when form loads\n  const { data: rollNumberReservation, isLoading: isLoadingRollNumber, error: rollNumberError } = useQuery({\n    queryKey: ['/api/roll-numbers/reserve'],\n    queryFn: async () => {\n      const response = await apiRequest('POST', '/api/roll-numbers/reserve', {});\n      const data = await response.json();\n      return data;\n    },\n    enabled: currentStep === 1,\n    staleTime: 25 * 60 * 1000, // 25 minutes (before 30 min expiry)\n    retry: 3,\n    retryDelay: 1000,\n  });\n\n  // Update form data when roll number is reserved\n  useEffect(() => {\n    if (rollNumberReservation?.rollNumber && !formData.rollNumber) {\n      updateFormData('rollNumber', rollNumberReservation.rollNumber);\n    }\n  }, [rollNumberReservation, formData.rollNumber]);\n\n  const createEnrollmentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest('POST', '/api/enrollments', data);\n    },\n    onSuccess: (response: any) => {\n      toast({\n        title: \"Success!\",\n        description: `Student enrolled successfully! Roll Number: ${response.student?.rollNumber || 'Generated'}. ${response.invoice ? `Invoice ${response.invoice.invoiceNumber} created for Rs.${response.summary.total}` : ''}`,\n        variant: \"default\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/students'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      // Reset form\n      setFormData({ classLevels: [], selectedSubjects: [], addOns: [], subjectDiscounts: {} });\n      setCurrentStep(1);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to enroll student: ${error.message || 'Please try again.'}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateFormData = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const validateCurrentStep = (): boolean => {\n    switch (currentStep) {\n      case 1:\n        const requiredFields = ['firstName', 'lastName', 'dateOfBirth', 'gender', 'studentPhone', 'studentEmail', 'parentName', 'parentPhone'];\n        const missingFields = requiredFields.filter(field => !formData[field as keyof EnrollmentFormData]);\n        \n        if (!formData.classLevels || formData.classLevels.length === 0) {\n          missingFields.push('classLevels');\n        }\n        \n        if (missingFields.length > 0) {\n          toast({\n            title: \"Missing Information\",\n            description: `Please fill in: ${missingFields.join(', ')}`,\n            variant: \"destructive\",\n          });\n          return false;\n        }\n        return true;\n        \n      case 2:\n        if (!formData.selectedSubjects || formData.selectedSubjects.length === 0) {\n          toast({\n            title: \"No Subjects Selected\",\n            description: \"Please select at least one subject\",\n            variant: \"destructive\",\n          });\n          return false;\n        }\n        return true;\n        \n      default:\n        return true;\n    }\n  };\n\n  const handleNext = () => {\n    if (validateCurrentStep()) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handleSubmit = () => {\n    try {\n      const studentData = insertStudentSchema.parse({\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        dateOfBirth: formData.dateOfBirth,\n        gender: formData.gender,\n        classLevels: formData.classLevels,\n        rollNumber: formData.rollNumber, // Use the reserved roll number\n        studentPhone: formData.studentPhone,\n        studentEmail: formData.studentEmail,\n        homeAddress: formData.homeAddress,\n        parentName: formData.parentName,\n        parentPhone: formData.parentPhone,\n        parentEmail: formData.parentEmail,\n        additionalParentName: formData.additionalParentName,\n        additionalParentPhone: formData.additionalParentPhone,\n        additionalParentEmail: formData.additionalParentEmail,\n      });\n      \n      // Process add-ons into additionalFees format\n      const additionalFees = (formData.addOns || []).map(addon => {\n        switch(addon) {\n          case 'registration':\n            return { type: 'registration', amount: 5000, description: 'Registration Fees' };\n          case 'resource-pack':\n            return { type: 'resource-pack', amount: 4000, description: 'Resource Pack' };\n          case 'online-access':\n            return { type: 'online-access', amount: 6900, description: 'Online Access' };\n          default:\n            return { type: addon, amount: 0, description: addon };\n        }\n      });\n\n      const enrollmentData = {\n        studentData,\n        selectedSubjects: formData.selectedSubjects?.map(subjectId => {\n          const subjectDiscounts = formData.subjectDiscounts || {};\n          const subjectDiscount = subjectDiscounts[subjectId] || { discountType: 'none', discountValue: 0, discountReason: '' };\n          \n          return {\n            subjectId,\n            discountType: subjectDiscount.discountType,\n            discountValue: subjectDiscount.discountValue,\n            discountReason: subjectDiscount.discountReason\n          };\n        }) || [],\n        additionalFees\n      };\n\n      createEnrollmentMutation.mutate(enrollmentData);\n    } catch (error: any) {\n      console.error(\"Validation error:\", error);\n      toast({\n        title: \"Validation Error\",\n        description: \"Please check all required fields\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const filteredSubjects = subjects?.filter(s => \n    formData.classLevels && formData.classLevels.some(level => \n      s.classLevels && s.classLevels.includes(level)\n    )\n  ) || [];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">New Student Enrollment</h1>\n          <p className=\"text-gray-600 mt-2\">Create a new student profile and enroll them in subjects</p>\n        </div>\n\n        {/* Progress Indicator */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-center max-w-4xl mx-auto\">\n            {[\n              { step: 1, label: 'Student Info' },\n              { step: 2, label: 'Subjects' },\n              { step: 3, label: 'Add-Ons' },\n              { step: 4, label: 'Discounts' },\n              { step: 5, label: 'Review' }\n            ].map((item, index) => (\n              <div key={item.step} className=\"flex items-center\">\n                <div className=\"flex flex-col items-center\">\n                  <div className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium ${\n                    item.step <= currentStep \n                      ? 'bg-blue-600 text-white' \n                      : 'bg-gray-200 text-gray-600'\n                  }`}>\n                    {item.step}\n                  </div>\n                  <span className=\"text-sm text-gray-600 mt-2 text-center whitespace-nowrap\">\n                    {item.label}\n                  </span>\n                </div>\n                {index < 4 && (\n                  <ChevronRight className={`w-5 h-5 mx-6 mt-[-20px] ${\n                    item.step < currentStep ? 'text-blue-600' : 'text-gray-400'\n                  }`} />\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            {/* Step 1: Student Information */}\n            {currentStep === 1 && (\n              <div className=\"space-y-8\">\n                <div>\n                  <h2 className=\"text-xl font-semibold text-gray-900 mb-6 flex items-center\">\n                    <User className=\"w-5 h-5 mr-2\" />\n                    Student Information\n                  </h2>\n                  \n                  {/* Basic Info */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n                    <div>\n                      <Label htmlFor=\"firstName\" className=\"text-sm font-medium text-gray-700\">First Name *</Label>\n                      <Input\n                        id=\"firstName\"\n                        placeholder=\"Enter first name\"\n                        value={formData.firstName || ''}\n                        onChange={(e) => updateFormData('firstName', e.target.value)}\n                        className=\"mt-1 placeholder:text-gray-400\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"lastName\" className=\"text-sm font-medium text-gray-700\">Last Name *</Label>\n                      <Input\n                        id=\"lastName\"\n                        placeholder=\"Enter last name\"\n                        value={formData.lastName || ''}\n                        onChange={(e) => updateFormData('lastName', e.target.value)}\n                        className=\"mt-1 placeholder:text-gray-400\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"dateOfBirth\" className=\"text-sm font-medium text-gray-700\">Date of Birth *</Label>\n                      <Input\n                        id=\"dateOfBirth\"\n                        type=\"date\"\n                        value={formData.dateOfBirth || ''}\n                        onChange={(e) => updateFormData('dateOfBirth', e.target.value)}\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700\">Gender *</Label>\n                      <Select onValueChange={(value) => updateFormData('gender', value)}>\n                        <SelectTrigger className=\"mt-1\">\n                          <SelectValue placeholder=\"Select gender\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"male\">Male</SelectItem>\n                          <SelectItem value=\"female\">Female</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  {/* Class Levels */}\n                  <div className=\"mb-8\">\n                    <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">\n                      <GraduationCap className=\"w-4 h-4 inline mr-1\" />\n                      Class Level(s) *\n                    </Label>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                      {classLevelOptions.map((option) => (\n                        <label key={option.value} className=\"flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer\">\n                          <Checkbox\n                            checked={formData.classLevels?.includes(option.value) || false}\n                            onCheckedChange={(checked) => {\n                              const currentLevels = formData.classLevels || [];\n                              if (checked) {\n                                updateFormData('classLevels', [...currentLevels, option.value]);\n                              } else {\n                                updateFormData('classLevels', currentLevels.filter(l => l !== option.value));\n                              }\n                            }}\n                          />\n                          <Badge variant=\"secondary\" className={option.color}>\n                            {option.label}\n                          </Badge>\n                        </label>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Roll Number */}\n                  <div className=\"mb-8\">\n                    <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Roll Number</Label>\n                    <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                      {isLoadingRollNumber ? (\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"animate-spin h-4 w-4 border-2 border-blue-500 border-t-transparent rounded-full\"></div>\n                          <span className=\"text-blue-600\">Generating unique roll number...</span>\n                        </div>\n                      ) : formData.rollNumber ? (\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <div className=\"text-lg font-semibold text-blue-700\">{formData.rollNumber}</div>\n                            <div className=\"text-sm text-blue-600\">Reserved for this enrollment (expires in 30 minutes)</div>\n                          </div>\n                          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">Reserved</Badge>\n                        </div>\n                      ) : rollNumberError ? (\n                        <div className=\"text-red-600\">\n                          <span className=\"font-medium\">Failed to reserve roll number.</span> Please refresh the page or try again.\n                        </div>\n                      ) : (\n                        <div className=\"text-gray-600\">\n                          <span className=\"font-medium\">Preparing roll number...</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <Separator className=\"my-6\" />\n\n                  {/* Contact Information */}\n                  <div>\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-4 flex items-center\">\n                      <Phone className=\"w-4 h-4 mr-2\" />\n                      Contact Information\n                    </h3>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-700\">Student Phone *</Label>\n                        <Input\n                          placeholder=\"+92 300 1234567\"\n                          value={formData.studentPhone || ''}\n                          onChange={(e) => updateFormData('studentPhone', e.target.value)}\n                          className=\"mt-1 placeholder:text-gray-400\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-700\">Student Email *</Label>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"student@example.com\"\n                          value={formData.studentEmail || ''}\n                          onChange={(e) => updateFormData('studentEmail', e.target.value)}\n                          className=\"mt-1 placeholder:text-gray-400\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"mb-6\">\n                      <Label className=\"text-sm font-medium text-gray-700\">Home Address</Label>\n                      <Input\n                        placeholder=\"Enter complete home address\"\n                        value={formData.homeAddress || ''}\n                        onChange={(e) => updateFormData('homeAddress', e.target.value)}\n                        className=\"mt-1 placeholder:text-gray-400\"\n                      />\n                    </div>\n                  </div>\n\n                  <Separator className=\"my-6\" />\n\n                  {/* Parent/Guardian Information */}\n                  <div>\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-4 flex items-center\">\n                      <Users className=\"w-4 h-4 mr-2\" />\n                      Parent/Guardian Information\n                    </h3>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-700\">Parent/Guardian Name *</Label>\n                        <Input\n                          placeholder=\"Enter parent/guardian name\"\n                          value={formData.parentName || ''}\n                          onChange={(e) => updateFormData('parentName', e.target.value)}\n                          className=\"mt-1 placeholder:text-gray-400\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-700\">Contact Number *</Label>\n                        <Input\n                          placeholder=\"+92 300 1234567\"\n                          value={formData.parentPhone || ''}\n                          onChange={(e) => updateFormData('parentPhone', e.target.value)}\n                          className=\"mt-1 placeholder:text-gray-400\"\n                        />\n                      </div>\n                      \n                      <div className=\"md:col-span-2\">\n                        <Label className=\"text-sm font-medium text-gray-700\">Email Address</Label>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"parent@example.com\"\n                          value={formData.parentEmail || ''}\n                          onChange={(e) => updateFormData('parentEmail', e.target.value)}\n                          className=\"mt-1 placeholder:text-gray-400\"\n                        />\n                      </div>\n                    </div>\n                    \n                    {/* Additional Parent/Guardian (Optional) */}\n                    <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n                      <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Additional Parent/Guardian (Optional)</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-600\">Name</Label>\n                          <Input\n                            placeholder=\"Additional parent/guardian name\"\n                            value={formData.additionalParentName || ''}\n                            onChange={(e) => updateFormData('additionalParentName', e.target.value)}\n                            className=\"mt-1 placeholder:text-gray-400\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-600\">Contact Number</Label>\n                          <Input\n                            placeholder=\"+92 300 1234567\"\n                            value={formData.additionalParentPhone || ''}\n                            onChange={(e) => updateFormData('additionalParentPhone', e.target.value)}\n                            className=\"mt-1 placeholder:text-gray-400\"\n                          />\n                        </div>\n                        \n                        <div className=\"md:col-span-2\">\n                          <Label className=\"text-sm font-medium text-gray-600\">Email Address</Label>\n                          <Input\n                            type=\"email\"\n                            placeholder=\"additional.parent@example.com\"\n                            value={formData.additionalParentEmail || ''}\n                            onChange={(e) => updateFormData('additionalParentEmail', e.target.value)}\n                            className=\"mt-1 placeholder:text-gray-400\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Step 2: Subject Selection */}\n            {currentStep === 2 && (\n              <div className=\"space-y-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900 flex items-center\">\n                  <FileText className=\"w-5 h-5 mr-2\" />\n                  Select Subjects\n                </h2>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {filteredSubjects.map((subject) => (\n                    <label key={subject.id} className=\"flex items-start space-x-3 p-4 border rounded-lg hover:bg-gray-50 cursor-pointer\">\n                      <Checkbox\n                        checked={formData.selectedSubjects?.includes(subject.id) || false}\n                        onCheckedChange={(checked) => {\n                          const current = formData.selectedSubjects || [];\n                          if (checked) {\n                            updateFormData('selectedSubjects', [...current, subject.id]);\n                          } else {\n                            updateFormData('selectedSubjects', current.filter(id => id !== subject.id));\n                          }\n                        }}\n                        className=\"mt-1\"\n                      />\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium text-gray-900\">{subject.name}</div>\n                        <div className=\"text-sm text-gray-600\">{subject.code}</div>\n                        <div className=\"text-sm font-medium text-green-600\">Rs. {subject.baseFee}/month</div>\n                        {subject.description && (\n                          <div className=\"text-xs text-gray-500 mt-1\">{subject.description}</div>\n                        )}\n                      </div>\n                    </label>\n                  ))}\n                </div>\n\n                {filteredSubjects.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    No subjects available for the selected class levels.\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Step 3: Add-Ons */}\n            {currentStep === 3 && (\n              <div className=\"space-y-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">Add-Ons</h2>\n                <p className=\"text-gray-600\">Select optional services (one-time fees)</p>\n                \n                <div className=\"space-y-4\">\n                  <label className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 cursor-pointer\">\n                    <div className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        checked={formData.addOns?.includes('registration') || false}\n                        onCheckedChange={(checked) => {\n                          const current = formData.addOns || [];\n                          if (checked) {\n                            updateFormData('addOns', [...current, 'registration']);\n                          } else {\n                            updateFormData('addOns', current.filter(addon => addon !== 'registration'));\n                          }\n                        }}\n                        className=\"mt-1\"\n                      />\n                      <div>\n                        <div className=\"font-medium text-gray-900\">Registration Fees</div>\n                        <div className=\"text-sm text-gray-600\">One-time enrollment fee</div>\n                      </div>\n                    </div>\n                    <div className=\"text-lg font-semibold text-gray-900\">Rs. 5,000</div>\n                  </label>\n                  \n                  <label className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 cursor-pointer\">\n                    <div className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        checked={formData.addOns?.includes('resource-pack') || false}\n                        onCheckedChange={(checked) => {\n                          const current = formData.addOns || [];\n                          if (checked) {\n                            updateFormData('addOns', [...current, 'resource-pack']);\n                          } else {\n                            updateFormData('addOns', current.filter(addon => addon !== 'resource-pack'));\n                          }\n                        }}\n                        className=\"mt-1\"\n                      />\n                      <div>\n                        <div className=\"font-medium text-gray-900\">Resource Pack</div>\n                        <div className=\"text-sm text-gray-600\">Study materials and textbooks</div>\n                      </div>\n                    </div>\n                    <div className=\"text-lg font-semibold text-gray-900\">Rs. 4,000</div>\n                  </label>\n                  \n                  <label className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 cursor-pointer\">\n                    <div className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        checked={formData.addOns?.includes('online-access') || false}\n                        onCheckedChange={(checked) => {\n                          const current = formData.addOns || [];\n                          if (checked) {\n                            updateFormData('addOns', [...current, 'online-access']);\n                          } else {\n                            updateFormData('addOns', current.filter(addon => addon !== 'online-access'));\n                          }\n                        }}\n                        className=\"mt-1\"\n                      />\n                      <div>\n                        <div className=\"font-medium text-gray-900\">Online Access</div>\n                        <div className=\"text-sm text-gray-600\">Digital learning platform access</div>\n                      </div>\n                    </div>\n                    <div className=\"text-lg font-semibold text-gray-900\">Rs. 6,900</div>\n                  </label>\n                </div>\n\n                {formData.addOns && formData.addOns.length > 0 && (\n                  <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                    <div className=\"text-sm font-medium text-blue-800\">\n                      Total Add-On Fees: Rs. {\n                        formData.addOns.reduce((total, addon) => {\n                          switch(addon) {\n                            case 'registration': return total + 5000;\n                            case 'resource-pack': return total + 4000;\n                            case 'online-access': return total + 6900;\n                            default: return total;\n                          }\n                        }, 0).toLocaleString()\n                      }\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Step 4: Subject-Specific Discounts */}\n            {currentStep === 4 && (\n              <div className=\"space-y-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">Subject-Specific Discounts</h2>\n                <p className=\"text-gray-600\">Apply discounts to individual subjects</p>\n                \n                <div className=\"space-y-4\">\n                  {formData.selectedSubjects?.map((subjectId) => {\n                    const subject = subjects?.find(s => s.id === subjectId);\n                    if (!subject) return null;\n                    \n                    const subjectDiscounts = formData.subjectDiscounts || {};\n                    const subjectDiscount = subjectDiscounts[subjectId] || { discountType: 'none', discountValue: 0, discountReason: '' };\n                    \n                    return (\n                      <div key={subjectId} className=\"p-4 border rounded-lg bg-gray-50\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div>\n                            <h4 className=\"font-medium text-gray-800\">{subject.name}</h4>\n                            <p className=\"text-sm text-gray-600\">Base Fee: Rs. {subject.baseFee}/month</p>\n                          </div>\n                          <div className=\"text-right\">\n                            {subjectDiscount.discountType !== 'none' && (\n                              <div className=\"text-sm text-green-600 font-medium\">\n                                Discount: {subjectDiscount.discountType === 'percentage' \n                                  ? `${subjectDiscount.discountValue}%` \n                                  : `Rs. ${subjectDiscount.discountValue}`}\n                              </div>\n                            )}\n                            <div className=\"text-lg font-semibold\">\n                              Final: Rs. {(\n                                subjectDiscount.discountType === 'percentage' \n                                  ? Number(subject.baseFee) - (Number(subject.baseFee) * Number(subjectDiscount.discountValue) / 100)\n                                  : Number(subject.baseFee) - Number(subjectDiscount.discountValue)\n                              ).toLocaleString()}/month\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                          <div>\n                            <Label className=\"text-sm text-gray-700\">Discount Type</Label>\n                            <Select \n                              value={subjectDiscount.discountType} \n                              onValueChange={(value) => {\n                                const newDiscounts = { ...formData.subjectDiscounts };\n                                newDiscounts[subjectId] = { \n                                  ...subjectDiscount, \n                                  discountType: value as 'none' | 'percentage' | 'fixed' \n                                };\n                                updateFormData('subjectDiscounts', newDiscounts);\n                              }}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue placeholder=\"Select type\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"none\">No Discount</SelectItem>\n                                <SelectItem value=\"percentage\">Percentage</SelectItem>\n                                <SelectItem value=\"fixed\">Fixed Amount</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          \n                          {subjectDiscount.discountType !== 'none' && (\n                            <>\n                              <div>\n                                <Label className=\"text-sm text-gray-700\">\n                                  {subjectDiscount.discountType === 'percentage' ? 'Percentage (%)' : 'Amount (Rs.)'}\n                                </Label>\n                                <Input\n                                  type=\"number\"\n                                  placeholder={subjectDiscount.discountType === 'percentage' ? 'e.g., 10' : 'e.g., 1000'}\n                                  value={subjectDiscount.discountValue}\n                                  onChange={(e) => {\n                                    const newDiscounts = { ...formData.subjectDiscounts };\n                                    newDiscounts[subjectId] = { \n                                      ...subjectDiscount, \n                                      discountValue: Number(e.target.value) \n                                    };\n                                    updateFormData('subjectDiscounts', newDiscounts);\n                                  }}\n                                  className=\"mt-1\"\n                                />\n                              </div>\n                              \n                              <div>\n                                <Label className=\"text-sm text-gray-700\">Reason</Label>\n                                <Input\n                                  placeholder=\"Reason for discount\"\n                                  value={subjectDiscount.discountReason}\n                                  onChange={(e) => {\n                                    const newDiscounts = { ...formData.subjectDiscounts };\n                                    newDiscounts[subjectId] = { \n                                      ...subjectDiscount, \n                                      discountReason: e.target.value \n                                    };\n                                    updateFormData('subjectDiscounts', newDiscounts);\n                                  }}\n                                  className=\"mt-1\"\n                                />\n                              </div>\n                            </>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  }) || []}\n                  \n                  {(!formData.selectedSubjects || formData.selectedSubjects.length === 0) && (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      No subjects selected. Go back to select subjects first.\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Step 5: Review */}\n            {currentStep === 5 && (\n              <div className=\"space-y-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">Review & Confirm</h2>\n                \n                <div className=\"space-y-6\">\n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-lg flex items-center\">\n                        <User className=\"w-4 h-4 mr-2\" />\n                        Student Information\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-2\">\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div><strong>Name:</strong> {formData.firstName} {formData.lastName}</div>\n                        <div><strong>Roll Number:</strong> {formData.rollNumber || 'Generating...'}</div>\n                        <div><strong>Date of Birth:</strong> {formData.dateOfBirth}</div>\n                        <div><strong>Gender:</strong> {formData.gender}</div>\n                        <div><strong>Class Levels:</strong> \n                          <div className=\"flex flex-wrap gap-1 mt-1\">\n                            {formData.classLevels?.map(level => (\n                              <Badge key={level} variant=\"secondary\" className=\"text-xs\">\n                                {classLevelOptions.find(opt => opt.value === level)?.label}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-lg flex items-center\">\n                        <FileText className=\"w-4 h-4 mr-2\" />\n                        Selected Subjects ({formData.selectedSubjects?.length || 0})\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        {formData.selectedSubjects?.map(subjectId => {\n                          const subject = subjects?.find(s => s.id === subjectId);\n                          return subject ? (\n                            <div key={subjectId} className=\"flex justify-between items-center p-2 bg-gray-50 rounded\">\n                              <div>\n                                <div className=\"font-medium\">{subject.name}</div>\n                                <div className=\"text-sm text-gray-600\">{subject.code}</div>\n                              </div>\n                              <div className=\"text-sm font-medium text-green-600\">Rs. {subject.baseFee}/month</div>\n                            </div>\n                          ) : null;\n                        })}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            )}\n\n            {/* Navigation Buttons */}\n            <div className=\"flex justify-between mt-8 pt-6 border-t\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}\n                disabled={currentStep === 1}\n              >\n                Previous\n              </Button>\n              \n              {currentStep < 5 ? (\n                <Button onClick={handleNext}>\n                  Next\n                </Button>\n              ) : (\n                <Button \n                  onClick={handleSubmit}\n                  disabled={createEnrollmentMutation.isPending}\n                >\n                  {createEnrollmentMutation.isPending ? 'Creating...' : 'Create Student'}\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":40322},"migrations/relations.ts":{"content":"import { relations } from \"drizzle-orm/relations\";\nimport { subjects, classes, users, cashDrawRequests, assessments, grades, students, payments, invoices, payoutRules, expenses, subjectCombos, comboSubjects, dailyClose, attendance, billingSchedules, paymentAllocations, invoiceAdjustments, enrollments, invoiceItems, addOns } from \"./schema\";\n\nexport const classesRelations = relations(classes, ({one, many}) => ({\n\tsubject: one(subjects, {\n\t\tfields: [classes.subjectId],\n\t\treferences: [subjects.id]\n\t}),\n\tuser: one(users, {\n\t\tfields: [classes.teacherId],\n\t\treferences: [users.id]\n\t}),\n\tattendances: many(attendance),\n}));\n\nexport const subjectsRelations = relations(subjects, ({many}) => ({\n\tclasses: many(classes),\n\tassessments: many(assessments),\n\tcomboSubjects: many(comboSubjects),\n\tenrollments: many(enrollments),\n\tinvoiceItems: many(invoiceItems),\n}));\n\nexport const usersRelations = relations(users, ({many}) => ({\n\tclasses: many(classes),\n\tcashDrawRequests_teacherId: many(cashDrawRequests, {\n\t\trelationName: \"cashDrawRequests_teacherId_users_id\"\n\t}),\n\tcashDrawRequests_reviewedBy: many(cashDrawRequests, {\n\t\trelationName: \"cashDrawRequests_reviewedBy_users_id\"\n\t}),\n\tassessments: many(assessments),\n\tgrades: many(grades),\n\tpayments: many(payments),\n\tpayoutRules: many(payoutRules),\n\texpenses_enteredBy: many(expenses, {\n\t\trelationName: \"expenses_enteredBy_users_id\"\n\t}),\n\texpenses_whoPaid: many(expenses, {\n\t\trelationName: \"expenses_whoPaid_users_id\"\n\t}),\n\tdailyCloses: many(dailyClose),\n\tattendances: many(attendance),\n\tstudents: many(students),\n\tenrollments: many(enrollments),\n}));\n\nexport const cashDrawRequestsRelations = relations(cashDrawRequests, ({one}) => ({\n\tuser_teacherId: one(users, {\n\t\tfields: [cashDrawRequests.teacherId],\n\t\treferences: [users.id],\n\t\trelationName: \"cashDrawRequests_teacherId_users_id\"\n\t}),\n\tuser_reviewedBy: one(users, {\n\t\tfields: [cashDrawRequests.reviewedBy],\n\t\treferences: [users.id],\n\t\trelationName: \"cashDrawRequests_reviewedBy_users_id\"\n\t}),\n}));\n\nexport const assessmentsRelations = relations(assessments, ({one, many}) => ({\n\tsubject: one(subjects, {\n\t\tfields: [assessments.subjectId],\n\t\treferences: [subjects.id]\n\t}),\n\tuser: one(users, {\n\t\tfields: [assessments.teacherId],\n\t\treferences: [users.id]\n\t}),\n\tgrades: many(grades),\n}));\n\nexport const gradesRelations = relations(grades, ({one}) => ({\n\tassessment: one(assessments, {\n\t\tfields: [grades.assessmentId],\n\t\treferences: [assessments.id]\n\t}),\n\tstudent: one(students, {\n\t\tfields: [grades.studentId],\n\t\treferences: [students.id]\n\t}),\n\tuser: one(users, {\n\t\tfields: [grades.enteredBy],\n\t\treferences: [users.id]\n\t}),\n}));\n\nexport const studentsRelations = relations(students, ({one, many}) => ({\n\tgrades: many(grades),\n\tpayments: many(payments),\n\tinvoices: many(invoices),\n\tattendances: many(attendance),\n\tuser: one(users, {\n\t\tfields: [students.parentId],\n\t\treferences: [users.id]\n\t}),\n\tbillingSchedules: many(billingSchedules),\n\tenrollments: many(enrollments),\n}));\n\nexport const paymentsRelations = relations(payments, ({one, many}) => ({\n\tstudent: one(students, {\n\t\tfields: [payments.studentId],\n\t\treferences: [students.id]\n\t}),\n\tinvoice: one(invoices, {\n\t\tfields: [payments.invoiceId],\n\t\treferences: [invoices.id]\n\t}),\n\tuser: one(users, {\n\t\tfields: [payments.receivedBy],\n\t\treferences: [users.id]\n\t}),\n\tpaymentAllocations: many(paymentAllocations),\n}));\n\nexport const invoicesRelations = relations(invoices, ({one, many}) => ({\n\tpayments: many(payments),\n\tstudent: one(students, {\n\t\tfields: [invoices.studentId],\n\t\treferences: [students.id]\n\t}),\n\tpaymentAllocations: many(paymentAllocations),\n\tinvoiceAdjustments: many(invoiceAdjustments),\n\tinvoiceItems: many(invoiceItems),\n}));\n\nexport const payoutRulesRelations = relations(payoutRules, ({one}) => ({\n\tuser: one(users, {\n\t\tfields: [payoutRules.teacherId],\n\t\treferences: [users.id]\n\t}),\n}));\n\nexport const expensesRelations = relations(expenses, ({one}) => ({\n\tuser_enteredBy: one(users, {\n\t\tfields: [expenses.enteredBy],\n\t\treferences: [users.id],\n\t\trelationName: \"expenses_enteredBy_users_id\"\n\t}),\n\tuser_whoPaid: one(users, {\n\t\tfields: [expenses.whoPaid],\n\t\treferences: [users.id],\n\t\trelationName: \"expenses_whoPaid_users_id\"\n\t}),\n}));\n\nexport const comboSubjectsRelations = relations(comboSubjects, ({one}) => ({\n\tsubjectCombo: one(subjectCombos, {\n\t\tfields: [comboSubjects.comboId],\n\t\treferences: [subjectCombos.id]\n\t}),\n\tsubject: one(subjects, {\n\t\tfields: [comboSubjects.subjectId],\n\t\treferences: [subjects.id]\n\t}),\n}));\n\nexport const subjectCombosRelations = relations(subjectCombos, ({many}) => ({\n\tcomboSubjects: many(comboSubjects),\n\tenrollments: many(enrollments),\n}));\n\nexport const dailyCloseRelations = relations(dailyClose, ({one}) => ({\n\tuser: one(users, {\n\t\tfields: [dailyClose.closedBy],\n\t\treferences: [users.id]\n\t}),\n}));\n\nexport const attendanceRelations = relations(attendance, ({one}) => ({\n\tclass: one(classes, {\n\t\tfields: [attendance.classId],\n\t\treferences: [classes.id]\n\t}),\n\tstudent: one(students, {\n\t\tfields: [attendance.studentId],\n\t\treferences: [students.id]\n\t}),\n\tuser: one(users, {\n\t\tfields: [attendance.markedBy],\n\t\treferences: [users.id]\n\t}),\n}));\n\nexport const billingSchedulesRelations = relations(billingSchedules, ({one}) => ({\n\tstudent: one(students, {\n\t\tfields: [billingSchedules.studentId],\n\t\treferences: [students.id]\n\t}),\n}));\n\nexport const paymentAllocationsRelations = relations(paymentAllocations, ({one}) => ({\n\tpayment: one(payments, {\n\t\tfields: [paymentAllocations.paymentId],\n\t\treferences: [payments.id]\n\t}),\n\tinvoice: one(invoices, {\n\t\tfields: [paymentAllocations.invoiceId],\n\t\treferences: [invoices.id]\n\t}),\n}));\n\nexport const invoiceAdjustmentsRelations = relations(invoiceAdjustments, ({one}) => ({\n\tinvoice: one(invoices, {\n\t\tfields: [invoiceAdjustments.invoiceId],\n\t\treferences: [invoices.id]\n\t}),\n}));\n\nexport const enrollmentsRelations = relations(enrollments, ({one}) => ({\n\tstudent: one(students, {\n\t\tfields: [enrollments.studentId],\n\t\treferences: [students.id]\n\t}),\n\tsubject: one(subjects, {\n\t\tfields: [enrollments.subjectId],\n\t\treferences: [subjects.id]\n\t}),\n\tsubjectCombo: one(subjectCombos, {\n\t\tfields: [enrollments.comboId],\n\t\treferences: [subjectCombos.id]\n\t}),\n\tuser: one(users, {\n\t\tfields: [enrollments.teacherId],\n\t\treferences: [users.id]\n\t}),\n}));\n\nexport const invoiceItemsRelations = relations(invoiceItems, ({one}) => ({\n\tinvoice: one(invoices, {\n\t\tfields: [invoiceItems.invoiceId],\n\t\treferences: [invoices.id]\n\t}),\n\tsubject: one(subjects, {\n\t\tfields: [invoiceItems.subjectId],\n\t\treferences: [subjects.id]\n\t}),\n\taddOn: one(addOns, {\n\t\tfields: [invoiceItems.addOnId],\n\t\treferences: [addOns.id]\n\t}),\n}));\n\nexport const addOnsRelations = relations(addOns, ({many}) => ({\n\tinvoiceItems: many(invoiceItems),\n}));","size_bytes":6734},"migrations/schema.ts":{"content":"import { pgTable, foreignKey, varchar, integer, boolean, timestamp, numeric, text, date, unique, index, jsonb, check, pgEnum } from \"drizzle-orm/pg-core\"\nimport { sql } from \"drizzle-orm\"\n\nexport const attendanceStatus = pgEnum(\"attendance_status\", ['present', 'absent', 'late'])\nexport const classLevel = pgEnum(\"class_level\", ['o-level', 'a-level'])\nexport const feeStatus = pgEnum(\"fee_status\", ['paid', 'pending', 'overdue', 'partial'])\nexport const gender = pgEnum(\"gender\", ['male', 'female'])\nexport const invoiceStatus = pgEnum(\"invoice_status\", ['draft', 'sent', 'paid', 'overdue'])\nexport const paymentMethod = pgEnum(\"payment_method\", ['cash', 'bank_transfer', 'card', 'cheque'])\n\n\nexport const classes = pgTable(\"classes\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tname: varchar().notNull(),\n\tsubjectId: varchar(\"subject_id\").notNull(),\n\tteacherId: varchar(\"teacher_id\").notNull(),\n\tstartTime: varchar(\"start_time\").notNull(),\n\tendTime: varchar(\"end_time\").notNull(),\n\tdayOfWeek: integer(\"day_of_week\").notNull(),\n\tisActive: boolean(\"is_active\").default(true),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.subjectId],\n\t\t\tforeignColumns: [subjects.id],\n\t\t\tname: \"classes_subject_id_subjects_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.teacherId],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"classes_teacher_id_users_id_fk\"\n\t\t}),\n]);\n\nexport const cashDrawRequests = pgTable(\"cash_draw_requests\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tteacherId: varchar(\"teacher_id\").notNull(),\n\tamount: numeric({ precision: 10, scale:  2 }).notNull(),\n\treason: text().notNull(),\n\tstatus: varchar().default('pending'),\n\trequestedAt: timestamp(\"requested_at\", { mode: 'string' }).defaultNow(),\n\treviewedBy: varchar(\"reviewed_by\"),\n\treviewedAt: timestamp(\"reviewed_at\", { mode: 'string' }),\n\tnotes: text(),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.teacherId],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"cash_draw_requests_teacher_id_users_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.reviewedBy],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"cash_draw_requests_reviewed_by_users_id_fk\"\n\t\t}),\n]);\n\nexport const assessments = pgTable(\"assessments\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tname: varchar().notNull(),\n\tsubjectId: varchar(\"subject_id\").notNull(),\n\tteacherId: varchar(\"teacher_id\").notNull(),\n\ttotalMarks: integer(\"total_marks\").notNull(),\n\tassessmentDate: date(\"assessment_date\").notNull(),\n\tdescription: text(),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.subjectId],\n\t\t\tforeignColumns: [subjects.id],\n\t\t\tname: \"assessments_subject_id_subjects_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.teacherId],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"assessments_teacher_id_users_id_fk\"\n\t\t}),\n]);\n\nexport const grades = pgTable(\"grades\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tassessmentId: varchar(\"assessment_id\").notNull(),\n\tstudentId: varchar(\"student_id\").notNull(),\n\tmarksObtained: integer(\"marks_obtained\").notNull(),\n\tgrade: varchar(),\n\tcomments: text(),\n\tenteredBy: varchar(\"entered_by\").notNull(),\n\tenteredAt: timestamp(\"entered_at\", { mode: 'string' }).defaultNow(),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.assessmentId],\n\t\t\tforeignColumns: [assessments.id],\n\t\t\tname: \"grades_assessment_id_assessments_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.studentId],\n\t\t\tforeignColumns: [students.id],\n\t\t\tname: \"grades_student_id_students_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.enteredBy],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"grades_entered_by_users_id_fk\"\n\t\t}),\n]);\n\nexport const payments = pgTable(\"payments\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\treceiptNumber: varchar(\"receipt_number\").notNull(),\n\tstudentId: varchar(\"student_id\").notNull(),\n\tinvoiceId: varchar(\"invoice_id\"),\n\tamount: numeric({ precision: 10, scale:  2 }).notNull(),\n\tpaymentMethod: paymentMethod(\"payment_method\").notNull(),\n\treceivedBy: varchar(\"received_by\"),\n\tpaymentDate: timestamp(\"payment_date\", { mode: 'string' }).defaultNow(),\n\tnotes: text(),\n\tisRefunded: boolean(\"is_refunded\").default(false),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n\ttransactionNumber: varchar(\"transaction_number\"),\n\tstatus: varchar().default('completed'),\n\trefundedAt: timestamp(\"refunded_at\", { mode: 'string' }),\n\trefundedBy: varchar(\"refunded_by\"),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.studentId],\n\t\t\tforeignColumns: [students.id],\n\t\t\tname: \"payments_student_id_students_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.invoiceId],\n\t\t\tforeignColumns: [invoices.id],\n\t\t\tname: \"payments_invoice_id_invoices_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.receivedBy],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"payments_received_by_users_id_fk\"\n\t\t}),\n\tunique(\"payments_receipt_number_unique\").on(table.receiptNumber),\n]);\n\nexport const invoices = pgTable(\"invoices\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tinvoiceNumber: varchar(\"invoice_number\").notNull(),\n\tstudentId: varchar(\"student_id\").notNull(),\n\tissueDate: date(\"issue_date\").notNull(),\n\tdueDate: date(\"due_date\").notNull(),\n\tsubtotal: numeric({ precision: 10, scale:  2 }).notNull(),\n\tdiscount: numeric({ precision: 10, scale:  2 }).default('0'),\n\tlateFee: numeric(\"late_fee\", { precision: 10, scale:  2 }).default('0'),\n\ttotal: numeric({ precision: 10, scale:  2 }).notNull(),\n\tstatus: invoiceStatus().default('draft'),\n\tnotes: text(),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n\tupdatedAt: timestamp(\"updated_at\", { mode: 'string' }).defaultNow(),\n\ttype: varchar().default('monthly'),\n\tbillingPeriodStart: date(\"billing_period_start\"),\n\tbillingPeriodEnd: date(\"billing_period_end\"),\n\tamountPaid: numeric(\"amount_paid\", { precision: 10, scale:  2 }).default('0'),\n\tbalanceDue: numeric(\"balance_due\", { precision: 10, scale:  2 }),\n\tadjustments: numeric({ precision: 10, scale:  2 }).default('0'),\n\tisRecurring: boolean(\"is_recurring\").default(false),\n\tcreatedBy: varchar(\"created_by\").default('system'),\n\tparentInvoiceId: varchar(\"parent_invoice_id\"),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.studentId],\n\t\t\tforeignColumns: [students.id],\n\t\t\tname: \"invoices_student_id_students_id_fk\"\n\t\t}),\n\tunique(\"invoices_invoice_number_unique\").on(table.invoiceNumber),\n]);\n\nexport const payoutRules = pgTable(\"payout_rules\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tteacherId: varchar(\"teacher_id\").notNull(),\n\tisFixed: boolean(\"is_fixed\").default(false),\n\tfixedPercentage: numeric(\"fixed_percentage\", { precision: 5, scale:  2 }),\n\ttier1Percentage: numeric(\"tier1_percentage\", { precision: 5, scale:  2 }),\n\ttier1Threshold: numeric(\"tier1_threshold\", { precision: 10, scale:  2 }),\n\ttier2Percentage: numeric(\"tier2_percentage\", { precision: 5, scale:  2 }),\n\tisActive: boolean(\"is_active\").default(true),\n\teffectiveFrom: date(\"effective_from\").notNull(),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.teacherId],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"payout_rules_teacher_id_users_id_fk\"\n\t\t}),\n]);\n\nexport const expenses = pgTable(\"expenses\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tcategory: varchar().notNull(),\n\tdescription: text().notNull(),\n\tamount: numeric({ precision: 10, scale:  2 }).notNull(),\n\texpenseDate: date(\"expense_date\").notNull(),\n\tpaymentMethod: paymentMethod(\"payment_method\").notNull(),\n\tenteredBy: varchar(\"entered_by\").notNull(),\n\treceiptUrl: varchar(\"receipt_url\"),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n\twhoPaid: varchar(\"who_paid\"),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.enteredBy],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"expenses_entered_by_users_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.whoPaid],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"expenses_who_paid_fkey\"\n\t\t}),\n]);\n\nexport const sessions = pgTable(\"sessions\", {\n\tsid: varchar().primaryKey().notNull(),\n\tsess: jsonb().notNull(),\n\texpire: timestamp({ mode: 'string' }).notNull(),\n}, (table) => [\n\tindex(\"IDX_session_expire\").using(\"btree\", table.expire.asc().nullsLast().op(\"timestamp_ops\")),\n]);\n\nexport const comboSubjects = pgTable(\"combo_subjects\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tcomboId: varchar(\"combo_id\").notNull(),\n\tsubjectId: varchar(\"subject_id\").notNull(),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.comboId],\n\t\t\tforeignColumns: [subjectCombos.id],\n\t\t\tname: \"combo_subjects_combo_id_subject_combos_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.subjectId],\n\t\t\tforeignColumns: [subjects.id],\n\t\t\tname: \"combo_subjects_subject_id_subjects_id_fk\"\n\t\t}),\n]);\n\nexport const dailyClose = pgTable(\"daily_close\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tcloseDate: date(\"close_date\").notNull(),\n\ttotalCash: numeric(\"total_cash\", { precision: 10, scale:  2 }).notNull(),\n\ttotalBank: numeric(\"total_bank\", { precision: 10, scale:  2 }).notNull(),\n\tvariance: numeric({ precision: 10, scale:  2 }).default('0'),\n\tisLocked: boolean(\"is_locked\").default(false),\n\tclosedBy: varchar(\"closed_by\").notNull(),\n\tclosedAt: timestamp(\"closed_at\", { mode: 'string' }).defaultNow(),\n\tnotes: text(),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.closedBy],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"daily_close_closed_by_users_id_fk\"\n\t\t}),\n\tunique(\"daily_close_close_date_unique\").on(table.closeDate),\n]);\n\nexport const subjects = pgTable(\"subjects\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tname: varchar().notNull(),\n\tcode: varchar().notNull(),\n\tclassLevel: classLevel(\"class_level\").notNull(),\n\tbaseFee: numeric(\"base_fee\", { precision: 10, scale:  2 }).notNull(),\n\tdescription: text(),\n\tisActive: boolean(\"is_active\").default(true),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n}, (table) => [\n\tunique(\"subjects_code_unique\").on(table.code),\n]);\n\nexport const users = pgTable(\"users\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\temail: varchar(),\n\tfirstName: varchar(\"first_name\"),\n\tlastName: varchar(\"last_name\"),\n\tprofileImageUrl: varchar(\"profile_image_url\"),\n\trole: varchar().notNull(),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n\tupdatedAt: timestamp(\"updated_at\", { mode: 'string' }).defaultNow(),\n}, (table) => [\n\tunique(\"users_email_unique\").on(table.email),\n]);\n\nexport const attendance = pgTable(\"attendance\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tclassId: varchar(\"class_id\").notNull(),\n\tstudentId: varchar(\"student_id\").notNull(),\n\tattendanceDate: date(\"attendance_date\").notNull(),\n\tstatus: attendanceStatus().notNull(),\n\tmarkedBy: varchar(\"marked_by\").notNull(),\n\tmarkedAt: timestamp(\"marked_at\", { mode: 'string' }).defaultNow(),\n\tnotes: text(),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.classId],\n\t\t\tforeignColumns: [classes.id],\n\t\t\tname: \"attendance_class_id_classes_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.studentId],\n\t\t\tforeignColumns: [students.id],\n\t\t\tname: \"attendance_student_id_students_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.markedBy],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"attendance_marked_by_users_id_fk\"\n\t\t}),\n]);\n\nexport const students = pgTable(\"students\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\trollNumber: varchar(\"roll_number\").notNull(),\n\tfirstName: varchar(\"first_name\").notNull(),\n\tlastName: varchar(\"last_name\").notNull(),\n\tdateOfBirth: date(\"date_of_birth\").notNull(),\n\tgender: gender().notNull(),\n\tclassLevel: classLevel(\"class_level\").notNull(),\n\tparentId: varchar(\"parent_id\"),\n\tprofileImageUrl: varchar(\"profile_image_url\"),\n\tisActive: boolean(\"is_active\").default(true),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n\tupdatedAt: timestamp(\"updated_at\", { mode: 'string' }).defaultNow(),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.parentId],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"students_parent_id_users_id_fk\"\n\t\t}),\n\tunique(\"students_roll_number_unique\").on(table.rollNumber),\n]);\n\nexport const subjectCombos = pgTable(\"subject_combos\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tname: varchar().notNull(),\n\tclassLevel: classLevel(\"class_level\").notNull(),\n\tdiscountedFee: numeric(\"discounted_fee\", { precision: 10, scale:  2 }).notNull(),\n\tdescription: text(),\n\tisActive: boolean(\"is_active\").default(true),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n});\n\nexport const billingSchedules = pgTable(\"billing_schedules\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tstudentId: varchar(\"student_id\").notNull(),\n\tbillingDay: integer(\"billing_day\").default(1),\n\tisActive: boolean(\"is_active\").default(true),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.studentId],\n\t\t\tforeignColumns: [students.id],\n\t\t\tname: \"billing_schedules_student_id_fkey\"\n\t\t}),\n]);\n\nexport const paymentAllocations = pgTable(\"payment_allocations\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tpaymentId: varchar(\"payment_id\").notNull(),\n\tinvoiceId: varchar(\"invoice_id\").notNull(),\n\tamount: numeric({ precision: 10, scale:  2 }).notNull(),\n\tallocatedAt: timestamp(\"allocated_at\", { mode: 'string' }).defaultNow(),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.paymentId],\n\t\t\tforeignColumns: [payments.id],\n\t\t\tname: \"payment_allocations_payment_id_fkey\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.invoiceId],\n\t\t\tforeignColumns: [invoices.id],\n\t\t\tname: \"payment_allocations_invoice_id_fkey\"\n\t\t}),\n]);\n\nexport const invoiceAdjustments = pgTable(\"invoice_adjustments\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tinvoiceId: varchar(\"invoice_id\").notNull(),\n\ttype: varchar().notNull(),\n\tamount: numeric({ precision: 10, scale:  2 }).notNull(),\n\treason: text().notNull(),\n\tappliedBy: varchar(\"applied_by\").notNull(),\n\tnotes: text(),\n\tappliedAt: timestamp(\"applied_at\", { mode: 'string' }).defaultNow(),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.invoiceId],\n\t\t\tforeignColumns: [invoices.id],\n\t\t\tname: \"invoice_adjustments_invoice_id_fkey\"\n\t\t}),\n]);\n\nexport const invoiceItems = pgTable(\"invoiceItems\", {\n\tid: varchar().primaryKey().notNull(),\n\tinvoiceId: varchar().notNull(),\n\ttype: varchar().notNull(),\n\titemId: varchar().notNull(),\n\tname: varchar().notNull(),\n\tdescription: text().default('),\n\tquantity: integer().default(1),\n\tunitPrice: varchar().notNull(),\n\ttotalPrice: varchar().notNull(),\n\tcreatedAt: timestamp({ mode: 'string' }).defaultNow(),\n}, (table) => [\n\tcheck(\"invoiceItems_type_check\", sql`(type)::text = ANY ((ARRAY['subject'::character varying, 'addon'::character varying])::text[])`),\n]);\n\nexport const announcements = pgTable(\"announcements\", {\n\tid: varchar().primaryKey().notNull(),\n\ttitle: varchar().notNull(),\n\tcontent: text().notNull(),\n\ttype: varchar().notNull(),\n\tpriority: varchar().notNull(),\n\tsubjectId: varchar(\"subject_id\"),\n\tclassId: varchar(\"class_id\"),\n\tdueDate: timestamp(\"due_date\", { mode: 'string' }),\n\tcreatedBy: varchar(\"created_by\").notNull(),\n\tisActive: boolean(\"is_active\").default(true),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n\tupdatedAt: timestamp(\"updated_at\", { mode: 'string' }).defaultNow(),\n});\n\nexport const addOns = pgTable(\"add_ons\", {\n\tid: varchar().primaryKey().notNull(),\n\tname: varchar().notNull(),\n\tdescription: text().default('),\n\tprice: varchar().notNull(),\n\tcategory: varchar().default('other'),\n\tisActive: boolean(\"is_active\").default(true),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n\tupdatedAt: timestamp(\"updated_at\", { mode: 'string' }).defaultNow(),\n});\n\nexport const announcementRecipients = pgTable(\"announcement_recipients\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tannouncementId: varchar(\"announcement_id\").notNull(),\n\tstudentId: varchar(\"student_id\").notNull(),\n\tisRead: boolean(\"is_read\").default(false),\n\treadAt: timestamp(\"read_at\", { mode: 'string' }),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n});\n\nexport const enrollments = pgTable(\"enrollments\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tstudentId: varchar(\"student_id\").notNull(),\n\tsubjectId: varchar(\"subject_id\"),\n\tcomboId: varchar(\"combo_id\"),\n\tteacherId: varchar(\"teacher_id\"),\n\tenrolledAt: timestamp(\"enrolled_at\", { mode: 'string' }).defaultNow(),\n\tisActive: boolean(\"is_active\").default(true),\n\tdiscountType: varchar(\"discount_type\").default('none'),\n\tdiscountValue: numeric(\"discount_value\", { precision: 10, scale:  2 }).default('0'),\n\tdiscountReason: varchar(\"discount_reason\"),\n\tdiscountApprovedBy: varchar(\"discount_approved_by\"),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.studentId],\n\t\t\tforeignColumns: [students.id],\n\t\t\tname: \"enrollments_student_id_students_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.subjectId],\n\t\t\tforeignColumns: [subjects.id],\n\t\t\tname: \"enrollments_subject_id_subjects_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.comboId],\n\t\t\tforeignColumns: [subjectCombos.id],\n\t\t\tname: \"enrollments_combo_id_subject_combos_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.teacherId],\n\t\t\tforeignColumns: [users.id],\n\t\t\tname: \"enrollments_teacher_id_users_id_fk\"\n\t\t}),\n]);\n\nexport const invoiceItems = pgTable(\"invoice_items\", {\n\tid: varchar().default(gen_random_uuid()).primaryKey().notNull(),\n\tinvoiceId: varchar(\"invoice_id\").notNull(),\n\tdescription: text().notNull(),\n\tquantity: integer().default(1),\n\tunitPrice: numeric(\"unit_price\", { precision: 10, scale:  2 }).notNull(),\n\ttotal: numeric({ precision: 10, scale:  2 }).notNull(),\n\tsubjectId: varchar(\"subject_id\"),\n\taddOnId: varchar(\"add_on_id\"),\n\ttype: varchar().default('custom').notNull(),\n\tdiscountType: varchar(\"discount_type\").default('none'),\n\tdiscountValue: numeric(\"discount_value\", { precision: 10, scale:  2 }).default('0'),\n\tdiscountAmount: numeric(\"discount_amount\", { precision: 10, scale:  2 }).default('0'),\n\tdiscountReason: varchar(\"discount_reason\"),\n}, (table) => [\n\tforeignKey({\n\t\t\tcolumns: [table.invoiceId],\n\t\t\tforeignColumns: [invoices.id],\n\t\t\tname: \"invoice_items_invoice_id_invoices_id_fk\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.subjectId],\n\t\t\tforeignColumns: [subjects.id],\n\t\t\tname: \"invoice_items_subject_id_fkey\"\n\t\t}),\n\tforeignKey({\n\t\t\tcolumns: [table.addOnId],\n\t\t\tforeignColumns: [addOns.id],\n\t\t\tname: \"invoice_items_add_on_id_fkey\"\n\t\t}),\n]);\n","size_bytes":18784},"client/src/components/AddStaffModal.tsx":{"content":"import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst addStaffSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  position: z.string().min(1, \"Position is required\"),\n  hireDate: z.string().min(1, \"Hire date is required\"),\n  role: z.enum(['finance', 'management'], {\n    required_error: \"Please select a role\",\n  }),\n});\n\ntype AddStaffForm = z.infer<typeof addStaffSchema>;\n\ninterface AddStaffModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst roleOptions = [\n  { value: 'finance', label: 'Finance Staff' },\n  { value: 'management', label: 'Management Staff' },\n];\n\nconst positionOptions = [\n  'Front Desk Officer',\n  'Finance Manager',\n  'Accounts Officer',\n  'Receptionist',\n  'Administrative Assistant',\n  'Operations Manager',\n  'Student Affairs Officer',\n  'IT Support',\n  'HR Manager',\n  'Marketing Coordinator',\n];\n\nexport default function AddStaffModal({ open, onOpenChange }: AddStaffModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<AddStaffForm>({\n    resolver: zodResolver(addStaffSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      position: \"\",\n      hireDate: \"\",\n      role: undefined,\n    },\n  });\n\n  const createStaffMutation = useMutation({\n    mutationFn: async (data: AddStaffForm) => {\n      const staffData = {\n        ...data,\n        isTeacher: false,\n        isActive: true,\n      };\n      return await apiRequest('POST', '/api/staff', staffData);\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Staff Member Added Successfully\",\n        description: (\n          <div>\n            Staff account created with temporary password: <strong>{data.tempPassword}</strong>. Share this with the staff member for their first login.\n          </div>\n        ),\n        className: \"max-w-md\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/staff'] });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AddStaffForm) => {\n    createStaffMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Add New Staff Member</DialogTitle>\n          <DialogDescription>\n            Fill out the form below to add a new staff member to the system with their personal information, role, and job details.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Personal Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Personal Information</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\">First Name *</Label>\n                <Input\n                  id=\"firstName\"\n                  {...form.register(\"firstName\")}\n                  placeholder=\"Enter first name\"\n                />\n                {form.formState.errors.firstName && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.firstName.message}</p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"lastName\">Last Name *</Label>\n                <Input\n                  id=\"lastName\"\n                  {...form.register(\"lastName\")}\n                  placeholder=\"Enter last name\"\n                />\n                {form.formState.errors.lastName && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.lastName.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"email\">Email Address *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...form.register(\"email\")}\n                  placeholder=\"staff@primax.edu\"\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.email.message}</p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"phone\">Phone Number *</Label>\n                <Input\n                  id=\"phone\"\n                  {...form.register(\"phone\")}\n                  placeholder=\"+92 300 1234567\"\n                />\n                {form.formState.errors.phone && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.phone.message}</p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Job Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Job Information</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"role\">Role *</Label>\n                <Select\n                  value={form.watch(\"role\")}\n                  onValueChange={(value) => form.setValue(\"role\", value as \"finance\" | \"management\")}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {roleOptions.map((role) => (\n                      <SelectItem key={role.value} value={role.value}>\n                        {role.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.role && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.role.message}</p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"position\">Position *</Label>\n                <Select\n                  value={form.watch(\"position\")}\n                  onValueChange={(value) => form.setValue(\"position\", value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select position\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {positionOptions.map((position) => (\n                      <SelectItem key={position} value={position}>\n                        {position}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.position && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.position.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"hireDate\">Hire Date *</Label>\n              <Input\n                id=\"hireDate\"\n                type=\"date\"\n                {...form.register(\"hireDate\")}\n              />\n              {form.formState.errors.hireDate && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.hireDate.message}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Submit Buttons */}\n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createStaffMutation.isPending}\n            >\n              {createStaffMutation.isPending ? \"Adding...\" : \"Add Staff Member\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8723},"client/src/components/AddTeacherModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst classLevelOptions = [\n  { value: 'o-level', label: 'O-Level' },\n  { value: 'igcse', label: 'IGCSE' },\n  { value: 'as-level', label: 'AS-Level' },\n  { value: 'a2-level', label: 'A2-Level' },\n];\n\nconst addTeacherSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  hireDate: z.string().min(1, \"Hire date is required\"),\n  teacherClassLevels: z.array(z.string()).min(1, \"At least one class level is required\"),\n  teacherSubjects: z.array(z.string()).min(1, \"At least one subject is required\"),\n  payoutPercentage: z.number().min(0).max(100),\n});\n\ntype AddTeacherForm = z.infer<typeof addTeacherSchema>;\n\ninterface AddTeacherModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function AddTeacherModal({ open, onOpenChange }: AddTeacherModalProps) {\n  const [selectedClassLevels, setSelectedClassLevels] = useState<string[]>([]);\n  const [selectedSubjects, setSelectedSubjects] = useState<string[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<AddTeacherForm>({\n    resolver: zodResolver(addTeacherSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      hireDate: \"\",\n      teacherClassLevels: [],\n      teacherSubjects: [],\n      payoutPercentage: 50,\n    },\n  });\n\n  // Fetch subjects for selection\n  const { data: subjects } = useQuery({\n    queryKey: ['/api/subjects'],\n  });\n\n  const createTeacherMutation = useMutation({\n    mutationFn: async (data: AddTeacherForm) => {\n      const teacherData = {\n        ...data,\n        role: 'teacher',\n        isTeacher: true,\n        isActive: true,\n      };\n      return await apiRequest('POST', '/api/teachers', teacherData);\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Teacher Added Successfully\", \n        description: (\n          <div>\n            Teacher created with temporary password: <strong>{data.tempPassword}</strong>. Share this with the teacher for their first login.\n          </div>\n        ),\n        className: \"max-w-md\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/teachers'] });\n      onOpenChange(false);\n      form.reset();\n      setSelectedClassLevels([]);\n      setSelectedSubjects([]);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add teacher\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClassLevelChange = (classLevel: string, checked: boolean) => {\n    const updated = checked \n      ? [...selectedClassLevels, classLevel]\n      : selectedClassLevels.filter(level => level !== classLevel);\n    \n    setSelectedClassLevels(updated);\n    form.setValue('teacherClassLevels', updated);\n  };\n\n  const handleSubjectChange = (subjectId: string, checked: boolean) => {\n    const updated = checked \n      ? [...selectedSubjects, subjectId]\n      : selectedSubjects.filter(id => id !== subjectId);\n    \n    setSelectedSubjects(updated);\n    form.setValue('teacherSubjects', updated);\n  };\n\n  const onSubmit = (data: AddTeacherForm) => {\n    createTeacherMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Add New Teacher</DialogTitle>\n          <DialogDescription>\n            Fill out the form below to add a new teacher to the system with their personal information, teaching assignments, and payout details.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Personal Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Personal Information</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\">First Name *</Label>\n                <Input\n                  id=\"firstName\"\n                  {...form.register(\"firstName\")}\n                  placeholder=\"Enter first name\"\n                />\n                {form.formState.errors.firstName && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.firstName.message}</p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"lastName\">Last Name *</Label>\n                <Input\n                  id=\"lastName\"\n                  {...form.register(\"lastName\")}\n                  placeholder=\"Enter last name\"\n                />\n                {form.formState.errors.lastName && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.lastName.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"email\">Email Address *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...form.register(\"email\")}\n                  placeholder=\"teacher@primax.edu\"\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.email.message}</p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"phone\">Phone Number *</Label>\n                <Input\n                  id=\"phone\"\n                  {...form.register(\"phone\")}\n                  placeholder=\"+92 300 1234567\"\n                />\n                {form.formState.errors.phone && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.phone.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"hireDate\">Hire Date *</Label>\n              <Input\n                id=\"hireDate\"\n                type=\"date\"\n                {...form.register(\"hireDate\")}\n              />\n              {form.formState.errors.hireDate && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.hireDate.message}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Teaching Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Teaching Information</h3>\n            \n            <div>\n              <Label>Class Levels *</Label>\n              <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                {classLevelOptions.map((level) => (\n                  <div key={level.value} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`classLevel-${level.value}`}\n                      checked={selectedClassLevels.includes(level.value)}\n                      onCheckedChange={(checked) => handleClassLevelChange(level.value, !!checked)}\n                    />\n                    <Label htmlFor={`classLevel-${level.value}`} className=\"text-sm\">\n                      {level.label}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n              {form.formState.errors.teacherClassLevels && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.teacherClassLevels.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label>Subjects *</Label>\n              <div className=\"grid grid-cols-2 gap-2 mt-2 max-h-40 overflow-y-auto\">\n                {subjects?.filter((subject: any) => \n                  subject.classLevels.some((level: string) => selectedClassLevels.includes(level))\n                ).map((subject: any) => (\n                  <div key={subject.id} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`subject-${subject.id}`}\n                      checked={selectedSubjects.includes(subject.id)}\n                      onCheckedChange={(checked) => handleSubjectChange(subject.id, !!checked)}\n                    />\n                    <Label htmlFor={`subject-${subject.id}`} className=\"text-sm\">\n                      {subject.name} ({subject.code})\n                    </Label>\n                  </div>\n                ))}\n              </div>\n              {form.formState.errors.teacherSubjects && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.teacherSubjects.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"payoutPercentage\">Payout Percentage *</Label>\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  id=\"payoutPercentage\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"100\"\n                  {...form.register(\"payoutPercentage\", { valueAsNumber: true })}\n                  className=\"w-24\"\n                />\n                <span className=\"text-sm text-gray-500\">%</span>\n              </div>\n              {form.formState.errors.payoutPercentage && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.payoutPercentage.message}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Submit Buttons */}\n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createTeacherMutation.isPending}\n            >\n              {createTeacherMutation.isPending ? \"Adding...\" : \"Add Teacher\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10727},"client/src/utils/pakistanTime.ts":{"content":"// Pakistan Time Utility Functions\n// App hardcoded to Pakistan timezone (PKT/PST - UTC+5)\n\nexport const PAKISTAN_TIMEZONE = 'Asia/Karachi';\n\n/**\n * Get current date and time in Pakistan timezone\n */\nexport function getCurrentPakistanTime(): Date {\n  return new Date(new Date().toLocaleString(\"en-US\", { timeZone: PAKISTAN_TIMEZONE }));\n}\n\n/**\n * Format date in Pakistan timezone\n */\nexport function formatPakistanDate(date: string | Date, options?: Intl.DateTimeFormatOptions): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  \n  const defaultOptions: Intl.DateTimeFormatOptions = {\n    timeZone: PAKISTAN_TIMEZONE,\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    ...options\n  };\n\n  return dateObj.toLocaleDateString('en-US', defaultOptions);\n}\n\n/**\n * Format date and time in Pakistan timezone\n */\nexport function formatPakistanDateTime(date: string | Date, options?: Intl.DateTimeFormatOptions): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  \n  const defaultOptions: Intl.DateTimeFormatOptions = {\n    timeZone: PAKISTAN_TIMEZONE,\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true,\n    ...options\n  };\n\n  return dateObj.toLocaleString('en-US', defaultOptions);\n}\n\n/**\n * Check if a date is overdue compared to current Pakistan time\n */\nexport function isOverdue(dueDate: string | Date): boolean {\n  const dueDateObj = typeof dueDate === 'string' ? new Date(dueDate) : dueDate;\n  const currentPakistanTime = getCurrentPakistanTime();\n  \n  // Set time to end of day for due date comparison\n  const dueDateEndOfDay = new Date(dueDateObj);\n  dueDateEndOfDay.setHours(23, 59, 59, 999);\n  \n  return currentPakistanTime > dueDateEndOfDay;\n}\n\n/**\n * Get Pakistan date in YYYY-MM-DD format\n */\nexport function getPakistanDateString(): string {\n  const now = getCurrentPakistanTime();\n  return now.toISOString().split('T')[0];\n}\n\n/**\n * Convert date to Pakistan timezone and return ISO string\n */\nexport function toPakistanISOString(date: string | Date): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return new Date(dateObj.toLocaleString(\"en-US\", { timeZone: PAKISTAN_TIMEZONE })).toISOString();\n}","size_bytes":2281},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":5543},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Upload a PDF file to object storage\n  async uploadPDF(pdfBuffer: Buffer, fileName: string): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    const objectPath = `${privateObjectDir}/daily-close-pdfs/${fileName}`;\n    \n    const { bucketName, objectName } = parseObjectPath(objectPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const file = bucket.file(objectName);\n\n    await file.save(pdfBuffer, {\n      metadata: {\n        contentType: 'application/pdf',\n      },\n    });\n\n    return `/objects/daily-close-pdfs/${fileName}`;\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":7107},"client/src/pages/management/DailyCloseLog.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Calendar, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport type { DailyClose } from \"@shared/schema\";\n\nexport default function DailyCloseLog() {\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  \n  const { data: allDailyCloses, isLoading } = useQuery<DailyClose[]>({\n    queryKey: [\"/api/daily-close\"],\n  });\n\n  // Filter records for the current month\n  const dailyCloses = allDailyCloses?.filter((record) => {\n    const recordDate = new Date(record.closeDate);\n    return recordDate.getMonth() === currentMonth.getMonth() && \n           recordDate.getFullYear() === currentMonth.getFullYear();\n  }) || [];\n\n  // Navigation functions\n  const goToPreviousMonth = () => {\n    setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() - 1, 1));\n  };\n\n  const goToNextMonth = () => {\n    const nextMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1);\n    const today = new Date();\n    // Only allow navigation to next month if it's not in the future\n    if (nextMonth <= today) {\n      setCurrentMonth(nextMonth);\n    }\n  };\n\n  const canGoToNextMonth = () => {\n    const nextMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1);\n    const today = new Date();\n    return nextMonth <= today;\n  };\n\n  const formatMonthYear = (date: Date) => {\n    return date.toLocaleDateString('en-PK', {\n      month: 'long',\n      year: 'numeric'\n    });\n  };\n\n  const formatCurrency = (amount: number | string) => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return new Intl.NumberFormat('en-PK', {\n      style: 'currency',\n      currency: 'PKR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(numAmount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-PK', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  const getVarianceColor = (variance: number | string) => {\n    const numVariance = typeof variance === 'string' ? parseFloat(variance) : variance;\n    if (numVariance > 0) return \"text-green-600\";\n    if (numVariance < 0) return \"text-red-600\";\n    return \"text-gray-600\";\n  };\n\n  const getVarianceBadge = (variance: number | string) => {\n    const numVariance = typeof variance === 'string' ? parseFloat(variance) : variance;\n    if (numVariance === 0) return <Badge variant=\"secondary\">Perfect Match</Badge>;\n    if (numVariance > 0) return <Badge className=\"bg-green-100 text-green-800\">Surplus</Badge>;\n    return <Badge variant=\"destructive\">Shortage</Badge>;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              Daily Close Records\n            </CardTitle>\n            <Badge variant=\"outline\" className=\"px-3 py-1\">\n              {dailyCloses?.length || 0} Records\n            </Badge>\n          </div>\n          <div className=\"flex items-center justify-between mt-4\">\n            <p className=\"text-sm text-gray-600\">\n              Monitor all daily close activities completed by finance staff\n            </p>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToPreviousMonth}\n                className=\"px-3 py-1\"\n                data-testid=\"button-previous-month\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <span className=\"text-sm font-medium px-3 py-1 bg-gray-50 rounded border min-w-[140px] text-center\">\n                {formatMonthYear(currentMonth)}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToNextMonth}\n                disabled={!canGoToNextMonth()}\n                className=\"px-3 py-1\"\n                data-testid=\"button-next-month\"\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {!dailyCloses || dailyCloses.length === 0 ? (\n            <div className=\"text-center py-12 text-gray-500\">\n              <Calendar className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-medium mb-2\">No Daily Close Records for {formatMonthYear(currentMonth)}</h3>\n              <p className=\"text-sm\">Daily close records for this month will appear here once finance staff completes them</p>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Expected Cash</TableHead>\n                  <TableHead>Actual Cash</TableHead>\n                  <TableHead>Expected Bank</TableHead>\n                  <TableHead>Actual Bank</TableHead>\n                  <TableHead>Total Variance</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Completed At</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {dailyCloses.map((record) => (\n                  <TableRow key={record.id}>\n                    <TableCell className=\"font-medium\">\n                      {formatDate(record.closeDate)}\n                    </TableCell>\n                    <TableCell>\n                      {formatCurrency(record.expectedCash || 0)}\n                    </TableCell>\n                    <TableCell>\n                      {formatCurrency(record.totalCash)}\n                    </TableCell>\n                    <TableCell>\n                      {formatCurrency(record.expectedBank || 0)}\n                    </TableCell>\n                    <TableCell>\n                      {formatCurrency(record.totalBank)}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <span className={getVarianceColor(record.variance || 0)}>\n                          {record.variance && Number(record.variance) > 0 ? '+' : ''}\n                          {formatCurrency(record.variance || 0)}\n                        </span>\n                        {getVarianceBadge(record.variance || 0)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {record.isLocked ? (\n                        <Badge className=\"bg-blue-100 text-blue-800\">\n                          <i className=\"fas fa-lock mr-1\"></i>\n                          Finalized\n                        </Badge>\n                      ) : (\n                        <Badge variant=\"outline\">Draft</Badge>\n                      )}\n                    </TableCell>\n                    <TableCell className=\"text-sm text-gray-600\">\n                      {record.closedAt ? new Date(record.closedAt).toLocaleString('en-PK') : 'In Progress'}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8007},"client/src/pages/management/StaffManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Users, UserPlus, Mail, Phone, User, Edit, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AddTeacherModal from \"@/components/AddTeacherModal\";\nimport AddStaffModal from \"@/components/AddStaffModal\";\nimport AddManagementModal from \"@/components/AddManagementModal\";\nimport EditTeacherModal from \"@/components/EditTeacherModal\";\nimport EditStaffModal from \"@/components/EditStaffModal\";\nimport EditManagementModal from \"@/components/EditManagementModal\";\n\ninterface Staff {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  isActive: boolean;\n  createdAt: string;\n  teacherSubjects?: string[];\n  teacherClassLevels?: string[];\n  hireDate?: string;\n  position?: string;\n  firstName?: string;\n  lastName?: string;\n  payoutPercentage?: number;\n}\n\nexport default function StaffManagement() {\n  const [addTeacherModalOpen, setAddTeacherModalOpen] = useState(false);\n  const [addStaffModalOpen, setAddStaffModalOpen] = useState(false);\n  const [addManagementModalOpen, setAddManagementModalOpen] = useState(false);\n  const [editTeacherModalOpen, setEditTeacherModalOpen] = useState(false);\n  const [editStaffModalOpen, setEditStaffModalOpen] = useState(false);\n  const [editManagementModalOpen, setEditManagementModalOpen] = useState(false);\n  const [selectedTeacher, setSelectedTeacher] = useState<Staff | null>(null);\n  const [selectedStaff, setSelectedStaff] = useState<Staff | null>(null);\n  const [selectedManagement, setSelectedManagement] = useState<Staff | null>(null);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: staff, isLoading } = useQuery<Staff[]>({\n    queryKey: [\"/api/staff\"],\n  });\n\n  // Fetch subjects to map IDs to names\n  const { data: subjects = [] } = useQuery<any[]>({\n    queryKey: ['/api/subjects'],\n  });\n\n  // Helper function to get subject names from IDs\n  const getSubjectNames = (subjectIds: string[] = []) => {\n    if (!subjects || !Array.isArray(subjects) || !subjectIds || !Array.isArray(subjectIds) || subjectIds.length === 0) return 'None';\n    const subjectNames = subjectIds\n      .map(id => subjects.find((s: any) => s.id === id)?.name)\n      .filter(Boolean);\n    return subjectNames.length > 0 ? subjectNames.join(', ') : 'None';\n  };\n\n  // Delete teacher mutation\n  const deleteTeacherMutation = useMutation({\n    mutationFn: async (teacherId: string) => {\n      return await apiRequest('DELETE', `/api/teachers/${teacherId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Teacher has been deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/staff'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete teacher\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete staff mutation\n  const deleteStaffMutation = useMutation({\n    mutationFn: async (staffId: string) => {\n      return await apiRequest('DELETE', `/api/staff/${staffId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Staff member has been deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/staff'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete management mutation\n  const deleteManagementMutation = useMutation({\n    mutationFn: async (managementId: string) => {\n      return await apiRequest('DELETE', `/api/management/${managementId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Management account has been deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/staff'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete management account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handlers\n  const handleEditTeacher = (teacher: Staff) => {\n    setSelectedTeacher(teacher);\n    setEditTeacherModalOpen(true);\n  };\n\n  const handleEditStaff = (staff: Staff) => {\n    setSelectedStaff(staff);\n    setEditStaffModalOpen(true);\n  };\n\n  const handleEditManagement = (management: Staff) => {\n    setSelectedManagement(management);\n    setEditManagementModalOpen(true);\n  };\n\n  const handleDeleteTeacher = (teacherId: string) => {\n    deleteTeacherMutation.mutate(teacherId);\n  };\n\n  const handleDeleteStaff = (staffId: string) => {\n    deleteStaffMutation.mutate(staffId);\n  };\n\n  const handleDeleteManagement = (managementId: string) => {\n    deleteManagementMutation.mutate(managementId);\n  };\n\n  const activeTeachers = staff?.filter(s => s.role === 'teacher' && s.isActive) || [];\n  const activeStaff = staff?.filter(s => s.role !== 'teacher' && s.role !== 'management' && s.isActive) || [];\n  const activeManagement = staff?.filter(s => s.role === 'management' && s.isActive) || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Staff Management</h1>\n          <p className=\"text-gray-600 mt-1\">Manage teachers and administrative staff</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Badge variant=\"outline\" className=\"px-3 py-1\">\n            {activeTeachers.length} Teachers\n          </Badge>\n          <Badge variant=\"outline\" className=\"px-3 py-1\">\n            {activeStaff.length} Staff\n          </Badge>\n          <Badge variant=\"outline\" className=\"px-3 py-1\">\n            {activeManagement.length} Management\n          </Badge>\n        </div>\n      </div>\n\n      {/* Add Staff Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Add New Staff</CardTitle>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Add new teachers or administrative staff to the system\n          </p>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6\">\n            <Button \n              onClick={() => setAddTeacherModalOpen(true)}\n              variant=\"outline\" \n              className=\"w-full h-32 flex flex-col items-center justify-center space-y-4 hover:shadow-md hover:border-blue-300 transition-all duration-200 group\"\n              data-testid=\"button-add-teacher\"\n            >\n              <div className=\"p-3 rounded-lg bg-blue-50 group-hover:bg-blue-100 transition-colors\">\n                <Users className=\"h-8 w-8 text-blue-600\" />\n              </div>\n              <div className=\"text-center\">\n                <span className=\"text-lg font-medium text-gray-700 group-hover:text-blue-600 transition-colors block\">\n                  Add New Teacher\n                </span>\n                <span className=\"text-sm text-gray-500\">\n                  Teaching staff with subject assignments\n                </span>\n              </div>\n            </Button>\n            \n            <Button \n              onClick={() => setAddStaffModalOpen(true)}\n              variant=\"outline\" \n              className=\"w-full h-32 flex flex-col items-center justify-center space-y-4 hover:shadow-md hover:border-green-300 transition-all duration-200 group\"\n              data-testid=\"button-add-staff\"\n            >\n              <div className=\"p-3 rounded-lg bg-green-50 group-hover:bg-green-100 transition-colors\">\n                <UserPlus className=\"h-8 w-8 text-green-600\" />\n              </div>\n              <div className=\"text-center\">\n                <span className=\"text-lg font-medium text-gray-700 group-hover:text-green-600 transition-colors block\">\n                  Add Finance/Front-Desk Staff\n                </span>\n                <span className=\"text-sm text-gray-500\">\n                  Administrative and support staff\n                </span>\n              </div>\n            </Button>\n\n            <Button \n              onClick={() => setAddManagementModalOpen(true)}\n              variant=\"outline\" \n              className=\"w-full h-32 flex flex-col items-center justify-center space-y-4 hover:shadow-md hover:border-purple-300 transition-all duration-200 group\"\n              data-testid=\"button-add-management\"\n            >\n              <div className=\"p-3 rounded-lg bg-purple-50 group-hover:bg-purple-100 transition-colors\">\n                <User className=\"h-8 w-8 text-purple-600\" />\n              </div>\n              <div className=\"text-center\">\n                <span className=\"text-lg font-medium text-gray-700 group-hover:text-purple-600 transition-colors block\">\n                  Add Management Account\n                </span>\n                <span className=\"text-sm text-gray-500\">\n                  Leadership and management staff\n                </span>\n              </div>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Teachers List */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              Teachers\n            </CardTitle>\n            <Badge variant=\"outline\" className=\"px-3 py-1\">\n              {activeTeachers.length} Active\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {activeTeachers.length === 0 ? (\n            <div className=\"text-center py-12 text-gray-500\">\n              <Users className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-medium mb-2\">No Teachers Added</h3>\n              <p className=\"text-sm mb-4\">Add your first teacher to get started</p>\n              <Button onClick={() => setAddTeacherModalOpen(true)} data-testid=\"button-add-first-teacher\">\n                Add Teacher\n              </Button>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Phone</TableHead>\n                  <TableHead>Subjects</TableHead>\n                  <TableHead>Hired</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {activeTeachers.map((teacher) => (\n                  <TableRow key={teacher.id}>\n                    <TableCell className=\"font-medium\">\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4 text-gray-500\" />\n                        {teacher.name}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Mail className=\"h-4 w-4 text-gray-500\" />\n                        {teacher.email}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Phone className=\"h-4 w-4 text-gray-500\" />\n                        {teacher.phone}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm text-gray-600\">\n                        {getSubjectNames(teacher.teacherSubjects)}\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-gray-500\">\n                      {teacher.hireDate ? new Date(teacher.hireDate).toLocaleDateString() : 'Not set'}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEditTeacher(teacher)}\n                          data-testid={`button-edit-teacher-${teacher.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                              data-testid={`button-delete-teacher-${teacher.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Teacher</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete {teacher.name}? This action cannot be undone and will remove all associated data.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => handleDeleteTeacher(teacher.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Administrative Staff List */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <UserPlus className=\"h-5 w-5\" />\n              Administrative Staff\n            </CardTitle>\n            <Badge variant=\"outline\" className=\"px-3 py-1\">\n              {activeStaff.length} Active\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {activeStaff.length === 0 ? (\n            <div className=\"text-center py-12 text-gray-500\">\n              <UserPlus className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-medium mb-2\">No Administrative Staff Added</h3>\n              <p className=\"text-sm mb-4\">Add finance or front-desk staff to manage operations</p>\n              <Button onClick={() => setAddStaffModalOpen(true)} data-testid=\"button-add-first-staff\">\n                Add Staff\n              </Button>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Phone</TableHead>\n                  <TableHead>Role</TableHead>\n                  <TableHead>Hired</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {activeStaff.map((staffMember) => (\n                  <TableRow key={staffMember.id}>\n                    <TableCell className=\"font-medium\">\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4 text-gray-500\" />\n                        {staffMember.name}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Mail className=\"h-4 w-4 text-gray-500\" />\n                        {staffMember.email}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Phone className=\"h-4 w-4 text-gray-500\" />\n                        {staffMember.phone}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\">\n                        {staffMember.role.charAt(0).toUpperCase() + staffMember.role.slice(1)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-gray-500\">\n                      {staffMember.hireDate ? new Date(staffMember.hireDate).toLocaleDateString() : 'Not set'}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEditStaff(staffMember)}\n                          data-testid={`button-edit-staff-${staffMember.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                              data-testid={`button-delete-staff-${staffMember.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Staff Member</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete {staffMember.name}? This action cannot be undone and will remove all associated data.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => handleDeleteStaff(staffMember.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Management Staff List */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Management Staff\n            </CardTitle>\n            <Badge variant=\"outline\" className=\"px-3 py-1\">\n              {activeManagement.length} Active\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          {activeManagement.length === 0 ? (\n            <div className=\"text-center py-12 text-gray-500\">\n              <User className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-medium mb-2\">No Management Staff Added</h3>\n              <p className=\"text-sm mb-4\">Add management accounts with leadership privileges</p>\n              <Button onClick={() => setAddManagementModalOpen(true)} data-testid=\"button-add-first-management\">\n                Add Management Account\n              </Button>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name & Contact</TableHead>\n                  <TableHead>Position</TableHead>\n                  <TableHead>Also Teacher</TableHead>\n                  <TableHead>Hire Date</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {activeManagement.map((managementMember) => (\n                  <TableRow key={managementMember.id}>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        <div className=\"font-medium\">{managementMember.name}</div>\n                        <div className=\"flex items-center gap-2 text-sm text-gray-500\">\n                          <Mail className=\"h-4 w-4 text-gray-500\" />\n                          {managementMember.email}\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm text-gray-500\">\n                          <Phone className=\"h-4 w-4 text-gray-500\" />\n                          {managementMember.phone}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\">\n                        {managementMember.position || 'Manager'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {managementMember.isTeacher ? (\n                        <Badge variant=\"default\" className=\"bg-purple-100 text-purple-800\">\n                          Yes - Super Admin Teacher\n                        </Badge>\n                      ) : (\n                        <Badge variant=\"secondary\">\n                          Management Only\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell className=\"text-gray-500\">\n                      {managementMember.hireDate ? new Date(managementMember.hireDate).toLocaleDateString() : 'Not set'}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEditManagement(managementMember)}\n                          data-testid={`button-edit-management-${managementMember.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                              data-testid={`button-delete-management-${managementMember.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Management Account</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete {managementMember.name}? This action cannot be undone and will remove all associated data.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => handleDeleteManagement(managementMember.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Add Teacher Modal */}\n      <AddTeacherModal \n        open={addTeacherModalOpen} \n        onOpenChange={setAddTeacherModalOpen} \n      />\n\n      {/* Add Staff Modal */}\n      <AddStaffModal \n        open={addStaffModalOpen} \n        onOpenChange={setAddStaffModalOpen} \n      />\n\n      {/* Add Management Modal */}\n      <AddManagementModal \n        open={addManagementModalOpen} \n        onOpenChange={setAddManagementModalOpen} \n      />\n\n      {/* Edit Teacher Modal */}\n      <EditTeacherModal\n        open={editTeacherModalOpen}\n        onOpenChange={setEditTeacherModalOpen}\n        teacher={selectedTeacher}\n      />\n\n      {/* Edit Staff Modal */}\n      <EditStaffModal\n        open={editStaffModalOpen}\n        onOpenChange={setEditStaffModalOpen}\n        staff={selectedStaff}\n      />\n\n      {/* Edit Management Modal */}\n      <EditManagementModal\n        open={editManagementModalOpen}\n        onOpenChange={setEditManagementModalOpen}\n        management={selectedManagement}\n      />\n    </div>\n  );\n}","size_bytes":26949},"client/src/pages/management/Reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport type { Payment, Invoice, Student } from \"@shared/schema\";\n\nexport default function Reports() {\n  const [dateFrom, setDateFrom] = useState(\"\");\n  const [dateTo, setDateTo] = useState(\"\");\n  const [reportType, setReportType] = useState(\"monthly\");\n\n  const { data: payments } = useQuery<Payment[]>({\n    queryKey: ['/api/payments'],\n  });\n\n  const { data: invoices } = useQuery<Invoice[]>({\n    queryKey: ['/api/invoices'],\n  });\n\n  const { data: students } = useQuery<Student[]>({\n    queryKey: ['/api/students'],\n  });\n\n  const handleExportPDF = (reportName: string) => {\n    console.log(`Exporting ${reportName} as PDF...`);\n  };\n\n  const handleExportCSV = (reportName: string) => {\n    console.log(`Exporting ${reportName} as CSV...`);\n  };\n\n  // Calculate financial metrics\n  const currentMonth = new Date();\n  const lastMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1);\n  \n  const currentMonthRevenue = payments?.filter(p => \n    new Date(p.paymentDate).getMonth() === currentMonth.getMonth()\n  ).reduce((sum, p) => sum + Number(p.amount), 0) || 0;\n\n  const lastMonthRevenue = payments?.filter(p => \n    new Date(p.paymentDate).getMonth() === lastMonth.getMonth()\n  ).reduce((sum, p) => sum + Number(p.amount), 0) || 0;\n\n  const totalOutstanding = invoices?.filter(i => \n    i.status === 'sent' || i.status === 'overdue'\n  ).reduce((sum, i) => sum + Number(i.total), 0) || 0;\n\n  const overdueAmount = invoices?.filter(i => \n    i.status === 'overdue'\n  ).reduce((sum, i) => sum + Number(i.total), 0) || 0;\n\n  const revenueGrowth = lastMonthRevenue > 0 ? \n    ((currentMonthRevenue - lastMonthRevenue) / lastMonthRevenue * 100) : 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <i className=\"fas fa-dollar-sign text-green-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">This Month Revenue</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-current-revenue\">\n                  Rs. {currentMonthRevenue.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <i className=\"fas fa-chart-line text-blue-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Growth Rate</p>\n                <p className={`text-2xl font-semibold ${revenueGrowth >= 0 ? 'text-green-600' : 'text-red-600'}`} data-testid=\"stat-growth-rate\">\n                  {revenueGrowth >= 0 ? '+' : ''}{revenueGrowth.toFixed(1)}%\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-orange-100 rounded-lg\">\n                <i className=\"fas fa-exclamation-triangle text-orange-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Outstanding</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-outstanding\">\n                  Rs. {totalOutstanding.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-red-100 rounded-lg\">\n                <i className=\"fas fa-clock text-red-600 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Overdue</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"stat-overdue\">\n                  Rs. {overdueAmount.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Report Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Report Filters</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"reportType\">Report Type</Label>\n              <Select value={reportType} onValueChange={setReportType}>\n                <SelectTrigger data-testid=\"select-report-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"monthly\">Monthly</SelectItem>\n                  <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                  <SelectItem value=\"yearly\">Yearly</SelectItem>\n                  <SelectItem value=\"custom\">Custom Range</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"dateFrom\">From Date</Label>\n              <Input\n                id=\"dateFrom\"\n                type=\"date\"\n                value={dateFrom}\n                onChange={(e) => setDateFrom(e.target.value)}\n                data-testid=\"input-date-from\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"dateTo\">To Date</Label>\n              <Input\n                id=\"dateTo\"\n                type=\"date\"\n                value={dateTo}\n                onChange={(e) => setDateTo(e.target.value)}\n                data-testid=\"input-date-to\"\n              />\n            </div>\n\n            <div className=\"flex items-end\">\n              <Button className=\"w-full\" data-testid=\"button-generate-report\">\n                <i className=\"fas fa-chart-bar mr-2\"></i>\n                Generate Report\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Report Tabs */}\n      <Tabs defaultValue=\"pl\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"pl\">P&L Statement</TabsTrigger>\n          <TabsTrigger value=\"aging\">Aging Report</TabsTrigger>\n          <TabsTrigger value=\"collection\">Collection Report</TabsTrigger>\n          <TabsTrigger value=\"student\">Student Report</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"pl\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Profit & Loss Statement</CardTitle>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" onClick={() => handleExportPDF('P&L Statement')} data-testid=\"button-export-pl-pdf\">\n                    <i className=\"fas fa-file-pdf mr-2\"></i>\n                    PDF\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleExportCSV('P&L Statement')} data-testid=\"button-export-pl-csv\">\n                    <i className=\"fas fa-file-csv mr-2\"></i>\n                    CSV\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold text-green-800 mb-2\">Revenue</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Student Fees</span>\n                      <span className=\"font-semibold\">Rs. {currentMonthRevenue.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Late Fees</span>\n                      <span className=\"font-semibold\">Rs. {(currentMonthRevenue * 0.02).toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between border-t pt-2 font-semibold\">\n                      <span>Total Revenue</span>\n                      <span>Rs. {(currentMonthRevenue * 1.02).toLocaleString()}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-red-50 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold text-red-800 mb-2\">Expenses</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Teacher Salaries</span>\n                      <span className=\"font-semibold\">Rs. {(currentMonthRevenue * 0.6).toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Utilities</span>\n                      <span className=\"font-semibold\">Rs. {(currentMonthRevenue * 0.05).toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Administrative</span>\n                      <span className=\"font-semibold\">Rs. {(currentMonthRevenue * 0.1).toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between border-t pt-2 font-semibold\">\n                      <span>Total Expenses</span>\n                      <span>Rs. {(currentMonthRevenue * 0.75).toLocaleString()}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <div className=\"flex justify-between items-center\">\n                    <h4 className=\"font-semibold text-blue-800\">Net Profit</h4>\n                    <span className=\"text-xl font-bold text-blue-800\" data-testid=\"text-net-profit\">\n                      Rs. {(currentMonthRevenue * 0.27).toLocaleString()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"aging\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Aging Receivables Report</CardTitle>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" onClick={() => handleExportPDF('Aging Report')} data-testid=\"button-export-aging-pdf\">\n                    <i className=\"fas fa-file-pdf mr-2\"></i>\n                    PDF\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleExportCSV('Aging Report')} data-testid=\"button-export-aging-csv\">\n                    <i className=\"fas fa-file-csv mr-2\"></i>\n                    CSV\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full text-sm\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Age Group</th>\n                      <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Number of Invoices</th>\n                      <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Amount</th>\n                      <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Percentage</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200\">\n                    <tr data-testid=\"row-current\">\n                      <td className=\"px-4 py-3\">Current (0-30 days)</td>\n                      <td className=\"px-4 py-3\">45</td>\n                      <td className=\"px-4 py-3 font-semibold\">Rs. 2,25,000</td>\n                      <td className=\"px-4 py-3\">75%</td>\n                    </tr>\n                    <tr data-testid=\"row-30-60\">\n                      <td className=\"px-4 py-3\">31-60 days</td>\n                      <td className=\"px-4 py-3\">12</td>\n                      <td className=\"px-4 py-3 font-semibold\">Rs. 54,000</td>\n                      <td className=\"px-4 py-3\">18%</td>\n                    </tr>\n                    <tr data-testid=\"row-60-90\">\n                      <td className=\"px-4 py-3\">61-90 days</td>\n                      <td className=\"px-4 py-3\">5</td>\n                      <td className=\"px-4 py-3 font-semibold\">Rs. 18,000</td>\n                      <td className=\"px-4 py-3\">6%</td>\n                    </tr>\n                    <tr data-testid=\"row-90-plus\">\n                      <td className=\"px-4 py-3\">90+ days</td>\n                      <td className=\"px-4 py-3\">2</td>\n                      <td className=\"px-4 py-3 font-semibold\">Rs. 3,000</td>\n                      <td className=\"px-4 py-3\">1%</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"collection\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Collection Report</CardTitle>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" onClick={() => handleExportPDF('Collection Report')} data-testid=\"button-export-collection-pdf\">\n                    <i className=\"fas fa-file-pdf mr-2\"></i>\n                    PDF\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleExportCSV('Collection Report')} data-testid=\"button-export-collection-csv\">\n                    <i className=\"fas fa-file-csv mr-2\"></i>\n                    CSV\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold text-green-800 mb-2\">Collection by Method</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Cash</span>\n                      <span className=\"font-semibold\">Rs. {(currentMonthRevenue * 0.6).toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Bank Transfer</span>\n                      <span className=\"font-semibold\">Rs. {(currentMonthRevenue * 0.3).toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Card</span>\n                      <span className=\"font-semibold\">Rs. {(currentMonthRevenue * 0.1).toLocaleString()}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold text-blue-800 mb-2\">Collection Efficiency</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Collection Rate</span>\n                      <span className=\"font-semibold\">94.2%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Average Days to Collect</span>\n                      <span className=\"font-semibold\">12 days</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Bad Debt %</span>\n                      <span className=\"font-semibold\">0.5%</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full text-sm\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Date</th>\n                      <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Cash</th>\n                      <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Bank</th>\n                      <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Card</th>\n                      <th className=\"px-4 py-3 text-left font-medium text-gray-700\">Total</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200\">\n                    {[1, 2, 3, 4, 5].map((day) => (\n                      <tr key={day} data-testid={`row-collection-${day}`}>\n                        <td className=\"px-4 py-3\">{new Date(Date.now() - day * 24 * 60 * 60 * 1000).toLocaleDateString()}</td>\n                        <td className=\"px-4 py-3\">Rs. {(15000 + day * 1000).toLocaleString()}</td>\n                        <td className=\"px-4 py-3\">Rs. {(8000 + day * 500).toLocaleString()}</td>\n                        <td className=\"px-4 py-3\">Rs. {(2000 + day * 200).toLocaleString()}</td>\n                        <td className=\"px-4 py-3 font-semibold\">Rs. {(25000 + day * 1700).toLocaleString()}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"student\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Student Analytics Report</CardTitle>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" onClick={() => handleExportPDF('Student Report')} data-testid=\"button-export-student-pdf\">\n                    <i className=\"fas fa-file-pdf mr-2\"></i>\n                    PDF\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => handleExportCSV('Student Report')} data-testid=\"button-export-student-csv\">\n                    <i className=\"fas fa-file-csv mr-2\"></i>\n                    CSV\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold text-blue-800 mb-2\">Enrollment by Class</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>O-Level</span>\n                      <span className=\"font-semibold\">{students?.filter(s => s.classLevel === 'o-level').length || 0}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>A-Level</span>\n                      <span className=\"font-semibold\">{students?.filter(s => s.classLevel === 'a-level').length || 0}</span>\n                    </div>\n                    <div className=\"flex justify-between border-t pt-2 font-semibold\">\n                      <span>Total</span>\n                      <span>{students?.length || 0}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold text-green-800 mb-2\">Fee Status</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Paid Up</span>\n                      <span className=\"font-semibold\">{Math.floor((students?.length || 0) * 0.85)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Pending</span>\n                      <span className=\"font-semibold\">{Math.floor((students?.length || 0) * 0.12)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Overdue</span>\n                      <span className=\"font-semibold\">{Math.floor((students?.length || 0) * 0.03)}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-orange-50 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold text-orange-800 mb-2\">Attendance</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Excellent (90%+)</span>\n                      <span className=\"font-semibold\">{Math.floor((students?.length || 0) * 0.7)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Good (75-89%)</span>\n                      <span className=\"font-semibold\">{Math.floor((students?.length || 0) * 0.25)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Poor (&lt;75%)</span>\n                      <span className=\"font-semibold\">{Math.floor((students?.length || 0) * 0.05)}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":22233},"client/src/components/EditStaffModal.tsx":{"content":"import { useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst editStaffSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  position: z.string().min(1, \"Position is required\"),\n  hireDate: z.string().min(1, \"Hire date is required\"),\n  role: z.enum(['finance', 'management'], {\n    required_error: \"Please select a role\",\n  }),\n});\n\ntype EditStaffForm = z.infer<typeof editStaffSchema>;\n\ninterface Staff {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  isActive: boolean;\n  createdAt: string;\n  position?: string;\n  hireDate?: string;\n  firstName?: string;\n  lastName?: string;\n}\n\ninterface EditStaffModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  staff: Staff | null;\n}\n\nconst roleOptions = [\n  { value: 'finance', label: 'Finance Staff' },\n  { value: 'management', label: 'Management Staff' },\n];\n\nconst positionOptions = [\n  'Front Desk Officer',\n  'Finance Manager',\n  'Accounts Officer',\n  'Receptionist',\n  'Administrative Assistant',\n  'Operations Manager',\n  'Student Affairs Officer',\n  'IT Support',\n  'HR Manager',\n  'Marketing Coordinator',\n];\n\nexport default function EditStaffModal({ open, onOpenChange, staff }: EditStaffModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<EditStaffForm>({\n    resolver: zodResolver(editStaffSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      position: \"\",\n      hireDate: \"\",\n      role: undefined,\n    },\n  });\n\n  // Update form when staff changes\n  useEffect(() => {\n    if (staff && open) {\n      form.reset({\n        firstName: staff.firstName || \"\",\n        lastName: staff.lastName || \"\",\n        email: staff.email || \"\",\n        phone: staff.phone || \"\",\n        position: staff.position || \"\",\n        hireDate: staff.hireDate || new Date().toISOString().split('T')[0],\n        role: staff.role as \"finance\" | \"management\",\n      });\n    }\n  }, [staff, open, form]);\n\n  const updateStaffMutation = useMutation({\n    mutationFn: async (data: EditStaffForm) => {\n      const staffData = {\n        ...data,\n        isTeacher: false,\n        isActive: true,\n      };\n      return await apiRequest('PUT', `/api/staff/${staff?.id}`, staffData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Staff member has been updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/staff'] });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EditStaffForm) => {\n    updateStaffMutation.mutate(data);\n  };\n\n  if (!staff) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Edit Staff Member</DialogTitle>\n          <DialogDescription>\n            Update the staff member's information, role, and job details.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Personal Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Personal Information</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\">First Name *</Label>\n                <Input\n                  id=\"firstName\"\n                  {...form.register(\"firstName\")}\n                  placeholder=\"Enter first name\"\n                />\n                {form.formState.errors.firstName && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.firstName.message}</p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"lastName\">Last Name *</Label>\n                <Input\n                  id=\"lastName\"\n                  {...form.register(\"lastName\")}\n                  placeholder=\"Enter last name\"\n                />\n                {form.formState.errors.lastName && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.lastName.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"email\">Email Address *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...form.register(\"email\")}\n                  placeholder=\"staff@primax.edu\"\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.email.message}</p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"phone\">Phone Number *</Label>\n                <Input\n                  id=\"phone\"\n                  {...form.register(\"phone\")}\n                  placeholder=\"+92 300 1234567\"\n                />\n                {form.formState.errors.phone && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.phone.message}</p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Job Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Job Information</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"role\">Role *</Label>\n                <Select\n                  value={form.watch(\"role\")}\n                  onValueChange={(value) => form.setValue(\"role\", value as \"finance\" | \"management\")}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {roleOptions.map((role) => (\n                      <SelectItem key={role.value} value={role.value}>\n                        {role.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.role && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.role.message}</p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"position\">Position *</Label>\n                <Select\n                  value={form.watch(\"position\")}\n                  onValueChange={(value) => form.setValue(\"position\", value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select position\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {positionOptions.map((position) => (\n                      <SelectItem key={position} value={position}>\n                        {position}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.position && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.position.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"hireDate\">Hire Date *</Label>\n              <Input\n                id=\"hireDate\"\n                type=\"date\"\n                {...form.register(\"hireDate\")}\n              />\n              {form.formState.errors.hireDate && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.hireDate.message}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Submit Buttons */}\n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={updateStaffMutation.isPending}\n            >\n              {updateStaffMutation.isPending ? \"Updating...\" : \"Update Staff Member\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9240},"client/src/components/EditTeacherModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst classLevelOptions = [\n  { value: 'o-level', label: 'O-Level' },\n  { value: 'igcse', label: 'IGCSE' },\n  { value: 'as-level', label: 'AS-Level' },\n  { value: 'a2-level', label: 'A2-Level' },\n];\n\nconst editTeacherSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  hireDate: z.string().min(1, \"Hire date is required\"),\n  teacherClassLevels: z.array(z.string()).min(1, \"At least one class level is required\"),\n  teacherSubjects: z.array(z.string()).min(1, \"At least one subject is required\"),\n  payoutPercentage: z.number().min(0).max(100),\n});\n\ntype EditTeacherForm = z.infer<typeof editTeacherSchema>;\n\ninterface Staff {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  isActive: boolean;\n  createdAt: string;\n  teacherSubjects?: string[];\n  teacherClassLevels?: string[];\n  hireDate?: string;\n  firstName?: string;\n  lastName?: string;\n  payoutPercentage?: number;\n}\n\ninterface EditTeacherModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  teacher: Staff | null;\n}\n\nexport default function EditTeacherModal({ open, onOpenChange, teacher }: EditTeacherModalProps) {\n  const [selectedClassLevels, setSelectedClassLevels] = useState<string[]>([]);\n  const [selectedSubjects, setSelectedSubjects] = useState<string[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<EditTeacherForm>({\n    resolver: zodResolver(editTeacherSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      hireDate: \"\",\n      teacherClassLevels: [],\n      teacherSubjects: [],\n      payoutPercentage: 50,\n    },\n  });\n\n  // Fetch subjects for selection\n  const { data: subjects } = useQuery({\n    queryKey: ['/api/subjects'],\n  });\n\n  // Update form when teacher changes\n  useEffect(() => {\n    if (teacher && open) {\n      const classLevels = teacher.teacherClassLevels || [];\n      const subjects = teacher.teacherSubjects || [];\n      \n      form.reset({\n        firstName: teacher.firstName || \"\",\n        lastName: teacher.lastName || \"\",\n        email: teacher.email || \"\",\n        phone: teacher.phone || \"\",\n        hireDate: teacher.hireDate || new Date().toISOString().split('T')[0],\n        teacherClassLevels: classLevels,\n        teacherSubjects: subjects,\n        payoutPercentage: teacher.payoutPercentage || 50,\n      });\n      setSelectedClassLevels(classLevels);\n      setSelectedSubjects(subjects);\n    }\n  }, [teacher, open, form]);\n\n  const updateTeacherMutation = useMutation({\n    mutationFn: async (data: EditTeacherForm) => {\n      const teacherData = {\n        ...data,\n        role: 'teacher',\n        isTeacher: true,\n        isActive: true,\n      };\n      return await apiRequest('PUT', `/api/teachers/${teacher?.id}`, teacherData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Teacher has been updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/staff'] });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update teacher\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClassLevelChange = (classLevel: string, checked: boolean) => {\n    const updated = checked \n      ? [...selectedClassLevels, classLevel]\n      : selectedClassLevels.filter(level => level !== classLevel);\n    \n    setSelectedClassLevels(updated);\n    form.setValue('teacherClassLevels', updated);\n  };\n\n  const handleSubjectChange = (subjectId: string, checked: boolean) => {\n    const updated = checked \n      ? [...selectedSubjects, subjectId]\n      : selectedSubjects.filter(id => id !== subjectId);\n    \n    setSelectedSubjects(updated);\n    form.setValue('teacherSubjects', updated);\n  };\n\n  const onSubmit = (data: EditTeacherForm) => {\n    updateTeacherMutation.mutate(data);\n  };\n\n  if (!teacher) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit Teacher</DialogTitle>\n          <DialogDescription>\n            Update the teacher's information, teaching assignments, and payout details.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Personal Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Personal Information</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\">First Name *</Label>\n                <Input\n                  id=\"firstName\"\n                  {...form.register(\"firstName\")}\n                  placeholder=\"Enter first name\"\n                />\n                {form.formState.errors.firstName && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.firstName.message}</p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"lastName\">Last Name *</Label>\n                <Input\n                  id=\"lastName\"\n                  {...form.register(\"lastName\")}\n                  placeholder=\"Enter last name\"\n                />\n                {form.formState.errors.lastName && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.lastName.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"email\">Email Address *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...form.register(\"email\")}\n                  placeholder=\"teacher@primax.edu\"\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.email.message}</p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"phone\">Phone Number *</Label>\n                <Input\n                  id=\"phone\"\n                  {...form.register(\"phone\")}\n                  placeholder=\"+92 300 1234567\"\n                />\n                {form.formState.errors.phone && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.phone.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"hireDate\">Hire Date *</Label>\n              <Input\n                id=\"hireDate\"\n                type=\"date\"\n                {...form.register(\"hireDate\")}\n              />\n              {form.formState.errors.hireDate && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.hireDate.message}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Teaching Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Teaching Information</h3>\n            \n            <div>\n              <Label>Class Levels *</Label>\n              <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                {classLevelOptions.map((level) => (\n                  <div key={level.value} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`classLevel-${level.value}`}\n                      checked={selectedClassLevels.includes(level.value)}\n                      onCheckedChange={(checked) => handleClassLevelChange(level.value, !!checked)}\n                    />\n                    <Label htmlFor={`classLevel-${level.value}`} className=\"text-sm\">\n                      {level.label}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n              {form.formState.errors.teacherClassLevels && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.teacherClassLevels.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label>Subjects *</Label>\n              <div className=\"grid grid-cols-2 gap-2 mt-2 max-h-40 overflow-y-auto\">\n                {subjects?.filter((subject: any) => \n                  subject.classLevels.some((level: string) => selectedClassLevels.includes(level))\n                ).map((subject: any) => (\n                  <div key={subject.id} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`subject-${subject.id}`}\n                      checked={selectedSubjects.includes(subject.id)}\n                      onCheckedChange={(checked) => handleSubjectChange(subject.id, !!checked)}\n                    />\n                    <Label htmlFor={`subject-${subject.id}`} className=\"text-sm\">\n                      {subject.name} ({subject.code})\n                    </Label>\n                  </div>\n                ))}\n              </div>\n              {form.formState.errors.teacherSubjects && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.teacherSubjects.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"payoutPercentage\">Payout Percentage *</Label>\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  id=\"payoutPercentage\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"100\"\n                  {...form.register(\"payoutPercentage\", { valueAsNumber: true })}\n                  className=\"w-24\"\n                />\n                <span className=\"text-sm text-gray-500\">%</span>\n              </div>\n              {form.formState.errors.payoutPercentage && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.payoutPercentage.message}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Submit Buttons */}\n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={updateTeacherMutation.isPending}\n            >\n              {updateTeacherMutation.isPending ? \"Updating...\" : \"Update Teacher\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11394},"client/src/components/AddManagementModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst classLevelOptions = [\n  { value: 'o-level', label: 'O-Level' },\n  { value: 'igcse', label: 'IGCSE' },\n  { value: 'as-level', label: 'AS-Level' },\n  { value: 'a2-level', label: 'A2-Level' },\n];\n\nconst positionOptions = [\n  'Principal',\n  'Vice Principal',\n  'Academic Director',\n  'Operations Manager',\n  'Finance Manager',\n  'HR Manager',\n  'IT Manager',\n  'Student Affairs Officer',\n  'Administrative Assistant',\n  'Coordinator',\n];\n\nconst addManagementSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  position: z.string().min(1, \"Position is required\"),\n  hireDate: z.string().min(1, \"Hire date is required\"),\n  isAlsoTeacher: z.boolean().default(false),\n  teacherClassLevels: z.array(z.string()).optional(),\n  teacherSubjects: z.array(z.string()).optional(),\n  payoutPercentage: z.number().min(0).max(100).optional(),\n});\n\ntype AddManagementForm = z.infer<typeof addManagementSchema>;\n\ninterface AddManagementModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function AddManagementModal({ open, onOpenChange }: AddManagementModalProps) {\n  const [selectedClassLevels, setSelectedClassLevels] = useState<string[]>([]);\n  const [selectedSubjects, setSelectedSubjects] = useState<string[]>([]);\n  const [isTeacher, setIsTeacher] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<AddManagementForm>({\n    resolver: zodResolver(addManagementSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      position: \"\",\n      hireDate: \"\",\n      isAlsoTeacher: false,\n      teacherClassLevels: [],\n      teacherSubjects: [],\n      payoutPercentage: 50,\n    },\n  });\n\n  // Fetch subjects for selection\n  const { data: subjects } = useQuery({\n    queryKey: ['/api/subjects'],\n  });\n\n  const addManagementMutation = useMutation({\n    mutationFn: async (data: AddManagementForm) => {\n      const managementData = {\n        ...data,\n        role: 'management',\n        isSuperAdmin: true,\n        isTeacher: data.isAlsoTeacher,\n        isActive: true,\n      };\n      return await apiRequest('POST', '/api/management', managementData);\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Management Account Created Successfully\",\n        description: (\n          <div>\n            Management account created with temporary password: <strong>{data.tempPassword}</strong>. Share this with the manager for their first login.\n          </div>\n        ),\n        className: \"max-w-md\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/staff'] });\n      form.reset();\n      setSelectedClassLevels([]);\n      setSelectedSubjects([]);\n      setIsTeacher(false);\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create management account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClassLevelChange = (classLevel: string, checked: boolean) => {\n    const updated = checked \n      ? [...selectedClassLevels, classLevel]\n      : selectedClassLevels.filter(level => level !== classLevel);\n    \n    setSelectedClassLevels(updated);\n    form.setValue('teacherClassLevels', updated);\n  };\n\n  const handleSubjectChange = (subjectId: string, checked: boolean) => {\n    const updated = checked \n      ? [...selectedSubjects, subjectId]\n      : selectedSubjects.filter(id => id !== subjectId);\n    \n    setSelectedSubjects(updated);\n    form.setValue('teacherSubjects', updated);\n  };\n\n  const handleTeacherCheckboxChange = (checked: boolean) => {\n    setIsTeacher(checked);\n    form.setValue('isAlsoTeacher', checked);\n    if (!checked) {\n      setSelectedClassLevels([]);\n      setSelectedSubjects([]);\n      form.setValue('teacherClassLevels', []);\n      form.setValue('teacherSubjects', []);\n    }\n  };\n\n  const onSubmit = (data: AddManagementForm) => {\n    addManagementMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Add Management Account</DialogTitle>\n          <DialogDescription>\n            Create a new management account. If they also teach, they will be given super admin teacher privileges.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Personal Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Personal Information</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\">First Name *</Label>\n                <Input\n                  id=\"firstName\"\n                  {...form.register(\"firstName\")}\n                  placeholder=\"Enter first name\"\n                  data-testid=\"input-firstName\"\n                />\n                {form.formState.errors.firstName && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.firstName.message}</p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"lastName\">Last Name *</Label>\n                <Input\n                  id=\"lastName\"\n                  {...form.register(\"lastName\")}\n                  placeholder=\"Enter last name\"\n                  data-testid=\"input-lastName\"\n                />\n                {form.formState.errors.lastName && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.lastName.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"email\">Email Address *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...form.register(\"email\")}\n                  placeholder=\"admin@primax.edu\"\n                  data-testid=\"input-email\"\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.email.message}</p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"phone\">Phone Number *</Label>\n                <Input\n                  id=\"phone\"\n                  {...form.register(\"phone\")}\n                  placeholder=\"+92 300 1234567\"\n                  data-testid=\"input-phone\"\n                />\n                {form.formState.errors.phone && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.phone.message}</p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Job Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Job Information</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"position\">Position *</Label>\n                <Select\n                  value={form.watch(\"position\")}\n                  onValueChange={(value) => form.setValue(\"position\", value)}\n                >\n                  <SelectTrigger data-testid=\"select-position\">\n                    <SelectValue placeholder=\"Select position\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {positionOptions.map((position) => (\n                      <SelectItem key={position} value={position}>\n                        {position}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.position && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.position.message}</p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"hireDate\">Hire Date *</Label>\n                <Input\n                  id=\"hireDate\"\n                  type=\"date\"\n                  {...form.register(\"hireDate\")}\n                  data-testid=\"input-hireDate\"\n                />\n                {form.formState.errors.hireDate && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.hireDate.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"isAlsoTeacher\"\n                checked={isTeacher}\n                onCheckedChange={handleTeacherCheckboxChange}\n                data-testid=\"checkbox-isAlsoTeacher\"\n              />\n              <Label htmlFor=\"isAlsoTeacher\" className=\"text-sm font-medium\">\n                This person is also a teacher (Super Admin Teacher privileges)\n              </Label>\n            </div>\n          </div>\n\n          {/* Teaching Information - Only show if they are also a teacher */}\n          {isTeacher && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Teaching Information</h3>\n              \n              <div>\n                <Label>Class Levels *</Label>\n                <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                  {classLevelOptions.map((level) => (\n                    <div key={level.value} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`classLevel-${level.value}`}\n                        checked={selectedClassLevels.includes(level.value)}\n                        onCheckedChange={(checked) => handleClassLevelChange(level.value, !!checked)}\n                        data-testid={`checkbox-classLevel-${level.value}`}\n                      />\n                      <Label htmlFor={`classLevel-${level.value}`} className=\"text-sm\">\n                        {level.label}\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n                {form.formState.errors.teacherClassLevels && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.teacherClassLevels.message}</p>\n                )}\n              </div>\n\n              <div>\n                <Label>Subjects *</Label>\n                <div className=\"grid grid-cols-2 gap-2 mt-2 max-h-40 overflow-y-auto\">\n                  {subjects?.filter((subject: any) => \n                    subject.classLevels.some((level: string) => selectedClassLevels.includes(level))\n                  ).map((subject: any) => (\n                    <div key={subject.id} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`subject-${subject.id}`}\n                        checked={selectedSubjects.includes(subject.id)}\n                        onCheckedChange={(checked) => handleSubjectChange(subject.id, !!checked)}\n                        data-testid={`checkbox-subject-${subject.id}`}\n                      />\n                      <Label htmlFor={`subject-${subject.id}`} className=\"text-sm\">\n                        {subject.name} ({subject.code})\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n                {form.formState.errors.teacherSubjects && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.teacherSubjects.message}</p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"payoutPercentage\">Payout Percentage *</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <Input\n                    id=\"payoutPercentage\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"100\"\n                    {...form.register(\"payoutPercentage\", { valueAsNumber: true })}\n                    className=\"w-24\"\n                    data-testid=\"input-payoutPercentage\"\n                  />\n                  <span className=\"text-sm text-gray-500\">%</span>\n                </div>\n                {form.formState.errors.payoutPercentage && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.payoutPercentage.message}</p>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Submit Buttons */}\n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={addManagementMutation.isPending}\n              data-testid=\"button-submit\"\n            >\n              {addManagementMutation.isPending ? \"Creating...\" : \"Create Management Account\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13962},"client/src/components/EditManagementModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst editManagementSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  position: z.string().min(1, \"Position is required\"),\n  hireDate: z.string().min(1, \"Hire date is required\"),\n  isAlsoTeacher: z.boolean().default(false),\n  teacherSubjects: z.array(z.string()).default([]),\n  teacherClassLevels: z.array(z.string()).default([]),\n  payoutPercentage: z.number().min(0).max(100).optional(),\n});\n\ntype EditManagementForm = z.infer<typeof editManagementSchema>;\n\ninterface EditManagementModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  management: any;\n}\n\nconst classLevelOptions = ['Nursery', 'LKG', 'UKG', '1st', '2nd', '3rd', '4th', '5th'];\n\nexport default function EditManagementModal({ open, onOpenChange, management }: EditManagementModalProps) {\n  const [selectedClassLevels, setSelectedClassLevels] = useState<string[]>([]);\n  const [selectedSubjects, setSelectedSubjects] = useState<string[]>([]);\n  const [isTeacher, setIsTeacher] = useState(false);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<EditManagementForm>({\n    resolver: zodResolver(editManagementSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      position: \"\",\n      hireDate: \"\",\n      isAlsoTeacher: false,\n      teacherSubjects: [],\n      teacherClassLevels: [],\n      payoutPercentage: 50,\n    },\n  });\n\n  // Fetch subjects for selection\n  const { data: subjects } = useQuery({\n    queryKey: ['/api/subjects'],\n  });\n\n  const updateManagementMutation = useMutation({\n    mutationFn: async (data: EditManagementForm) => {\n      const managementData = {\n        ...data,\n        role: 'management',\n        isSuperAdmin: true,\n        isTeacher: data.isAlsoTeacher,\n        isActive: true,\n      };\n      return await apiRequest('PUT', `/api/management/${management.id}`, managementData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Management Account Updated Successfully\",\n        description: \"The management account has been updated with the new information.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/staff'] });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update management account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClassLevelChange = (classLevel: string, checked: boolean) => {\n    const updated = checked \n      ? [...selectedClassLevels, classLevel]\n      : selectedClassLevels.filter(level => level !== classLevel);\n    \n    setSelectedClassLevels(updated);\n    form.setValue('teacherClassLevels', updated);\n  };\n\n  const handleSubjectChange = (subjectId: string, checked: boolean) => {\n    const updated = checked \n      ? [...selectedSubjects, subjectId]\n      : selectedSubjects.filter(id => id !== subjectId);\n    \n    setSelectedSubjects(updated);\n    form.setValue('teacherSubjects', updated);\n  };\n\n  const handleTeacherCheckboxChange = (checked: boolean) => {\n    setIsTeacher(checked);\n    form.setValue('isAlsoTeacher', checked);\n    if (!checked) {\n      setSelectedClassLevels([]);\n      setSelectedSubjects([]);\n      form.setValue('teacherClassLevels', []);\n      form.setValue('teacherSubjects', []);\n    }\n  };\n\n  // Reset form when management data changes\n  useEffect(() => {\n    if (management && open) {\n      const formData = {\n        firstName: management.firstName || '',\n        lastName: management.lastName || '',\n        email: management.email || '',\n        phone: management.phone || '',\n        position: management.position || '',\n        hireDate: management.hireDate?.split('T')[0] || '',\n        isAlsoTeacher: management.isTeacher || false,\n        teacherSubjects: management.teacherSubjects || [],\n        teacherClassLevels: management.teacherClassLevels || [],\n        payoutPercentage: management.payoutPercentage || 50,\n      };\n      \n      form.reset(formData);\n      setIsTeacher(management.isTeacher || false);\n      setSelectedSubjects(management.teacherSubjects || []);\n      setSelectedClassLevels(management.teacherClassLevels || []);\n    }\n  }, [management, open, form]);\n\n  const onSubmit = (data: EditManagementForm) => {\n    updateManagementMutation.mutate(data);\n  };\n\n  if (!management) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit Management Account</DialogTitle>\n          <DialogDescription>\n            Update the management account information. If they also teach, they will maintain super admin teacher privileges.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Personal Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Personal Information</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\">First Name *</Label>\n                <Input\n                  id=\"firstName\"\n                  {...form.register(\"firstName\")}\n                  placeholder=\"Enter first name\"\n                />\n                {form.formState.errors.firstName && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.firstName.message}</p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"lastName\">Last Name *</Label>\n                <Input\n                  id=\"lastName\"\n                  {...form.register(\"lastName\")}\n                  placeholder=\"Enter last name\"\n                />\n                {form.formState.errors.lastName && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.lastName.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"email\">Email Address *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...form.register(\"email\")}\n                  placeholder=\"Enter email address\"\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.email.message}</p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"phone\">Phone Number *</Label>\n                <Input\n                  id=\"phone\"\n                  {...form.register(\"phone\")}\n                  placeholder=\"Enter phone number\"\n                />\n                {form.formState.errors.phone && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.phone.message}</p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Job Details */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Job Details</h3>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"position\">Position *</Label>\n                <Input\n                  id=\"position\"\n                  {...form.register(\"position\")}\n                  placeholder=\"e.g., Principal, Director, Manager\"\n                />\n                {form.formState.errors.position && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.position.message}</p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"hireDate\">Hire Date *</Label>\n                <Input\n                  id=\"hireDate\"\n                  type=\"date\"\n                  {...form.register(\"hireDate\")}\n                />\n                {form.formState.errors.hireDate && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.hireDate.message}</p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Teacher Privileges */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Teaching Privileges</h3>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"isAlsoTeacher\"\n                checked={isTeacher}\n                onCheckedChange={handleTeacherCheckboxChange}\n              />\n              <Label htmlFor=\"isAlsoTeacher\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                This person also teaches (Super Admin Teacher privileges)\n              </Label>\n            </div>\n\n            {isTeacher && (\n              <>\n                <div>\n                  <Label className=\"text-sm font-medium\">Class Levels *</Label>\n                  <div className=\"grid grid-cols-4 gap-2 mt-2\">\n                    {classLevelOptions.map((level) => (\n                      <div key={level} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={level}\n                          checked={selectedClassLevels.includes(level)}\n                          onCheckedChange={(checked) => handleClassLevelChange(level, !!checked)}\n                        />\n                        <Label htmlFor={level} className=\"text-sm\">{level}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium\">Subjects *</Label>\n                  <div className=\"grid grid-cols-2 gap-2 mt-2 max-h-32 overflow-y-auto\">\n                    {subjects?.map((subject: any) => (\n                      <div key={subject.id} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={subject.id}\n                          checked={selectedSubjects.includes(subject.id)}\n                          onCheckedChange={(checked) => handleSubjectChange(subject.id, !!checked)}\n                        />\n                        <Label htmlFor={subject.id} className=\"text-sm\">{subject.name}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"payoutPercentage\">Payout Percentage (%) *</Label>\n                  <Input\n                    id=\"payoutPercentage\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"100\"\n                    {...form.register(\"payoutPercentage\", { valueAsNumber: true })}\n                    placeholder=\"Enter payout percentage (0-100)\"\n                  />\n                  {form.formState.errors.payoutPercentage && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.payoutPercentage.message}</p>\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={updateManagementMutation.isPending}\n              data-testid=\"button-update-management\"\n            >\n              {updateManagementMutation.isPending ? \"Updating...\" : \"Update Management Account\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12640},"client/src/hooks/useAuth.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function useAuth() {\n  const { toast } = useToast();\n\n  const { data: user, isLoading, error, refetch } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      return response;\n    },\n    onSuccess: () => {\n      // Clear local storage\n      localStorage.removeItem('selectedRole');\n      // Clear query cache\n      queryClient.clear();\n      // Show success message\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been successfully logged out.\",\n      });\n      // Direct redirect - no timeout needed\n      window.location.href = '/';\n    },\n    onError: (error: any) => {\n      console.error('Logout error:', error);\n      toast({\n        title: \"Logout Error\", \n        description: \"Failed to logout properly\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Simple logout function\n  const logout = async () => {\n    try {\n      logoutMutation.mutate();\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  return {\n    user,\n    isLoading,\n    error,\n    isAuthenticated: !!user,\n    refetch,\n    logout,\n    isLoggingOut: logoutMutation.isPending,\n  };\n}","size_bytes":1553},"client/src/pages/LoginPage.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Eye, EyeOff, Mail, Lock, KeyRound } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport primaxLogoPath from \"@assets/primax_logo_1756452842865.png\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst forgotPasswordSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype ForgotPasswordForm = z.infer<typeof forgotPasswordSchema>;\n\ninterface LoginPageProps {\n  onLoginSuccess: (user: any) => void;\n}\n\nexport default function LoginPage({ onLoginSuccess }: LoginPageProps) {\n  const [showPassword, setShowPassword] = useState(false);\n  const [forgotPasswordOpen, setForgotPasswordOpen] = useState(false);\n  const { toast } = useToast();\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const forgotPasswordForm = useForm<ForgotPasswordForm>({\n    resolver: zodResolver(forgotPasswordSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      return await apiRequest('POST', '/api/auth/login', data);\n    },\n    onSuccess: async (response) => {\n      const user = await response.json();\n      \n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome to Primax School Management System!\",\n      });\n      \n      // Smart redirect based on user role - skip RoleSelector for non-super admins\n      if (!user.isSuperAdmin) {\n        let targetDashboard: string;\n        \n        if (user.role === 'teacher') {\n          targetDashboard = 'teacher';\n        } else if (user.role === 'finance') {\n          targetDashboard = 'finance';\n        } else if (user.role === 'management') {\n          targetDashboard = 'management';\n        } else {\n          targetDashboard = 'finance'; // Default fallback\n        }\n        \n        // Set role and redirect directly to dashboard\n        localStorage.setItem('selectedRole', targetDashboard);\n        window.location.href = '/dashboard';\n      } else {\n        // Super admins go to role selector\n        window.location.href = '/';\n      }\n      \n      onLoginSuccess(user);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid email or password. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const forgotPasswordMutation = useMutation({\n    mutationFn: async (data: ForgotPasswordForm) => {\n      return await apiRequest('POST', '/api/auth/forgot-password', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Password Reset Email Sent\",\n        description: \"If an account exists with this email, you will receive password reset instructions.\",\n      });\n      setForgotPasswordOpen(false);\n      forgotPasswordForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send password reset email. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onLoginSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  const onForgotPasswordSubmit = (data: ForgotPasswordForm) => {\n    forgotPasswordMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-8\">\n          {/* Logo and Header Section */}\n          <div className=\"text-center mb-8\">\n            <img \n              src={primaxLogoPath} \n              alt=\"Primax Logo\" \n              className=\"mx-auto mb-6\"\n              style={{ width: 'auto', height: '72px' }}\n            />\n            \n            <h1 className=\"text-2xl font-semibold text-gray-900 mb-2\">\n              Welcome to Primax\n            </h1>\n            <p className=\"text-gray-600 text-sm\">\n              Sign in to access your account\n            </p>\n          </div>\n\n          <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-5\">\n            {/* Email Field */}\n            <div className=\"space-y-1\">\n              <label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700 block\">\n                Email\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"hello@example.com\"\n                  className=\"pl-10 h-12 border-gray-300 focus:border-orange-500 focus:ring-orange-500\"\n                  {...loginForm.register(\"email\")}\n                  data-testid=\"input-email\"\n                />\n              </div>\n              {loginForm.formState.errors.email && (\n                <p className=\"text-sm text-red-600\">{loginForm.formState.errors.email.message}</p>\n              )}\n            </div>\n\n            {/* Password Field */}\n            <div className=\"space-y-1\">\n              <label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700 block\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"........\"\n                  className=\"pl-10 pr-10 h-12 border-gray-300 focus:border-orange-500 focus:ring-orange-500\"\n                  {...loginForm.register(\"password\")}\n                  data-testid=\"input-password\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"button-toggle-password\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </button>\n              </div>\n              {loginForm.formState.errors.password && (\n                <p className=\"text-sm text-red-600\">{loginForm.formState.errors.password.message}</p>\n              )}\n            </div>\n\n            {/* Login Button */}\n            <Button\n              type=\"submit\"\n              className=\"w-full h-12 text-white font-medium text-base rounded-md\"\n              style={{ backgroundColor: '#253C8D' }}\n              onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#1e2f6b'}\n              onMouseLeave={(e) => e.currentTarget.style.backgroundColor = '#253C8D'}\n              disabled={loginMutation.isPending}\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n            </Button>\n\n            {/* Forgot Password Link */}\n            <div className=\"text-center pt-2\">\n              <Dialog open={forgotPasswordOpen} onOpenChange={setForgotPasswordOpen}>\n                <DialogTrigger asChild>\n                  <Button\n                    type=\"button\"\n                    variant=\"link\"\n                    className=\"text-sm p-0 h-auto font-medium\"\n                    style={{ color: '#253C8D' }}\n                    onMouseEnter={(e) => e.currentTarget.style.color = '#1e2f6b'}\n                    onMouseLeave={(e) => e.currentTarget.style.color = '#253C8D'}\n                    data-testid=\"button-forgot-password\"\n                  >\n                    Forgot Password?\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle className=\"flex items-center gap-2\">\n                      <KeyRound className=\"h-5 w-5\" />\n                      Reset Password\n                    </DialogTitle>\n                    <DialogDescription>\n                      Enter your email address and we'll send you instructions to reset your password.\n                    </DialogDescription>\n                  </DialogHeader>\n                  \n                  <form onSubmit={forgotPasswordForm.handleSubmit(onForgotPasswordSubmit)} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <label htmlFor=\"forgot-email\" className=\"text-sm font-medium text-gray-700\">\n                        Email Address\n                      </label>\n                      <div className=\"relative\">\n                        <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                        <Input\n                          id=\"forgot-email\"\n                          type=\"email\"\n                          placeholder=\"Enter your email\"\n                          className=\"pl-10\"\n                          {...forgotPasswordForm.register(\"email\")}\n                          data-testid=\"input-forgot-email\"\n                        />\n                      </div>\n                      {forgotPasswordForm.formState.errors.email && (\n                        <p className=\"text-sm text-red-600\">{forgotPasswordForm.formState.errors.email.message}</p>\n                      )}\n                    </div>\n\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setForgotPasswordOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={forgotPasswordMutation.isPending}\n                        className=\"text-white\"\n                        style={{ backgroundColor: '#253C8D' }}\n                        onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#1e2f6b'}\n                        onMouseLeave={(e) => e.currentTarget.style.backgroundColor = '#253C8D'}\n                        data-testid=\"button-send-reset\"\n                      >\n                        {forgotPasswordMutation.isPending ? \"Sending...\" : \"Send Reset Email\"}\n                      </Button>\n                    </div>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11380},"server/auth-traditional.ts":{"content":"import { Express, RequestHandler } from \"express\";\nimport session from \"express-session\";\nimport { storage } from \"./storage\";\nimport { comparePassword } from \"./passwordUtils\";\nimport connectPg from \"connect-pg-simple\";\n\n// Session configuration for traditional auth\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false, // Don't create table, use existing one\n    ttl: sessionTtl,\n    tableName: \"sessions\", // Use existing sessions table\n  });\n  \n  return session({\n    secret: process.env.SESSION_SECRET || 'primax-secret-key',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to true in production with HTTPS\n      maxAge: sessionTtl,\n    },\n  });\n}\n\n// Authentication middleware\nexport const requireAuth: RequestHandler = (req, res, next) => {\n  if (req.session?.user) {\n    return next();\n  }\n  res.status(401).json({ message: \"Authentication required\" });\n};\n\n// Set up traditional authentication routes\nexport function setupTraditionalAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n\n  // Login endpoint\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n\n      // Find user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      // Check if user is active\n      if (!user.isActive) {\n        return res.status(401).json({ message: \"Account is deactivated. Please contact administrator.\" });\n      }\n\n      // Verify password\n      const isValidPassword = await comparePassword(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      // Store user in session (exclude password)\n      const userSession = {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        isSuperAdmin: user.isSuperAdmin,\n        isTeacher: user.isTeacher,\n      };\n\n      req.session.user = userSession;\n\n      res.json(userSession);\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get current user endpoint\n  app.get('/api/auth/user', (req, res) => {\n    if (req.session?.user) {\n      res.json(req.session.user);\n    } else {\n      res.status(401).json({ message: \"Not authenticated\" });\n    }\n  });\n\n  // Logout endpoint\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error('Logout error:', err);\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.clearCookie('connect.sid');\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Forgot password endpoint (placeholder for future email functionality)\n  app.post('/api/auth/forgot-password', async (req, res) => {\n    try {\n      const { email } = req.body;\n\n      if (!email) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      // Check if user exists\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // Don't reveal if email exists or not for security\n        return res.json({ message: \"If an account exists with this email, you will receive password reset instructions.\" });\n      }\n\n      // TODO: Implement email sending functionality\n      // For now, just log the reset request\n      console.log(`Password reset requested for user: ${email} (ID: ${user.id})`);\n      \n      // In a real implementation, you would:\n      // 1. Generate a secure reset token\n      // 2. Store it in the database with expiration\n      // 3. Send email with reset link\n      // 4. Implement reset password endpoint\n\n      res.json({ message: \"If an account exists with this email, you will receive password reset instructions.\" });\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n}","size_bytes":4497},"server/passwordUtils.ts":{"content":"import bcrypt from 'bcryptjs';\n\n// Generate a fixed temporary password\nexport function generateTemporaryPassword(): string {\n  return 'Password123';\n}\n\n// Hash a password using bcrypt\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 12;\n  return await bcrypt.hash(password, saltRounds);\n}\n\n// Compare a password with a hash\nexport async function comparePassword(password: string, hash: string): Promise<boolean> {\n  return await bcrypt.compare(password, hash);\n}\n\n// Generate user credentials with temporary password\nexport async function generateUserCredentials() {\n  const tempPassword = generateTemporaryPassword();\n  const hashedPassword = await hashPassword(tempPassword);\n  \n  return {\n    temporaryPassword: tempPassword, // Store plaintext for display to admin\n    password: hashedPassword, // Store hashed version in database\n    mustChangePassword: true\n  };\n}","size_bytes":914},"client/src/pages/management/ReadOnlyTeacherDashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Switch, Route, Link } from \"wouter\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport primaxLogo from \"@assets/primax_logo_1756370699409.png\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { User, LogOut, ArrowLeft } from \"lucide-react\";\n\n// Import teacher pages\nimport TeacherDashboard from \"@/pages/teacher/Dashboard\";\nimport Attendance from \"@/pages/teacher/Attendance\";\nimport Gradebook from \"@/pages/teacher/Gradebook\";\nimport Earnings from \"@/pages/teacher/Earnings\";\nimport DigitalDiary from \"@/pages/teacher/DigitalDiary\";\nimport ScheduleManager from \"@/pages/teacher/ScheduleManager\";\n// NotFound component not needed - using inline component\n\ninterface ImpersonationData {\n  teacherId: string;\n  teacherName: string;\n  originalRole: string;\n}\n\nexport default function ReadOnlyTeacherDashboard() {\n  const [impersonationData, setImpersonationData] = useState<ImpersonationData | null>(null);\n  const { user, logout, isLoggingOut } = useAuth() as any;\n\n  useEffect(() => {\n    const data = sessionStorage.getItem('impersonatingTeacher');\n    if (data) {\n      setImpersonationData(JSON.parse(data));\n    } else {\n      // If no impersonation data, redirect back to management\n      window.location.href = '/teacher-impersonation';\n    }\n  }, []);\n\n  const handleBackToManagement = () => {\n    sessionStorage.removeItem('impersonatingTeacher');\n    localStorage.setItem('selectedRole', 'management');\n    window.location.href = '/dashboard';\n  };\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  // Get user initials for profile circle\n  const getUserInitials = () => {\n    if (!user?.firstName || !user?.lastName) return 'DU';\n    return `${user.firstName.charAt(0)}${user.lastName.charAt(0)}`.toUpperCase();\n  };\n\n  if (!impersonationData) {\n    return (\n      <div className=\"p-6 text-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n        <p>Loading impersonation session...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Custom Teacher Sidebar for Impersonation */}\n      <div className=\"w-64 bg-white shadow-lg flex flex-col\">\n        <div className=\"px-6 py-4 border-b min-h-[88px] flex items-center\">\n          <img src={primaxLogo} alt=\"Primax\" className=\"h-8\" />\n        </div>\n        \n        <nav className=\"flex-1 px-4 py-6 space-y-1\">\n          <Link href=\"/teacher-view-readonly/dashboard\" \n                className=\"flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50\">\n            <i className=\"fas fa-home w-5 mr-3\"></i>\n            Today\n          </Link>\n          <Link href=\"/teacher-view-readonly/attendance\" \n                className=\"flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50\">\n            <i className=\"fas fa-calendar-check w-5 mr-3\"></i>\n            Attendance\n          </Link>\n          <Link href=\"/teacher-view-readonly/gradebook\" \n                className=\"flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50\">\n            <i className=\"fas fa-book w-5 mr-3\"></i>\n            Gradebook\n          </Link>\n          <Link href=\"/teacher-view-readonly/schedule-manager\" \n                className=\"flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50\">\n            <i className=\"fas fa-calendar-alt w-5 mr-3\"></i>\n            Schedule Manager\n          </Link>\n          <Link href=\"/teacher-view-readonly/digital-diary\" \n                className=\"flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50\">\n            <i className=\"fas fa-bullhorn w-5 mr-3\"></i>\n            Digital Diary\n          </Link>\n          <Link href=\"/teacher-view-readonly/earnings\" \n                className=\"flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50\">\n            <i className=\"fas fa-dollar-sign w-5 mr-3\"></i>\n            Earnings\n          </Link>\n        </nav>\n      </div>\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header with Impersonation Banner */}\n        <header className=\"bg-white border-b px-6 py-4 min-h-[88px] flex items-center\">\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center space-x-4\">\n              <div>\n                <h1 className=\"text-2xl font-semibold text-gray-800\">\n                  Teacher Dashboard (Read-Only)\n                </h1>\n                <nav className=\"text-sm text-gray-600\">\n                  Home {'>'} teacher-impersonation {'>'} Dashboard\n                </nav>\n              </div>\n              \n              {/* Back to Management Dashboard Button */}\n              <Button\n                onClick={handleBackToManagement}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"ml-4 bg-[#253C8D] text-white border-[#253C8D] hover:bg-[#1e3071] hover:border-[#1e3071]\"\n                data-testid=\"button-back-to-management\"\n              >\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Back to Management\n              </Button>\n            </div>\n            \n            {/* User Profile Dropdown */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <div className=\"flex items-center space-x-4 cursor-pointer hover:bg-gray-50 rounded-lg p-2 transition-colors\">\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-medium text-gray-800\">\n                      {user?.firstName} {user?.lastName}\n                    </p>\n                    <p className=\"text-xs text-gray-600 capitalize\">teacher-impersonation</p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center\">\n                    <span className=\"text-sm font-medium text-gray-600\">{getUserInitials()}</span>\n                  </div>\n                </div>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-48\">\n                <DropdownMenuItem className=\"cursor-pointer\">\n                  <User className=\"mr-2 h-4 w-4\" />\n                  <span>Profile</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  className=\"cursor-pointer text-red-600 focus:text-red-600\"\n                  onClick={handleLogout}\n                  disabled={isLoggingOut}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>{isLoggingOut ? 'Signing Out...' : 'Sign Out'}</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Impersonation Alert */}\n          <div className=\"mb-6\">\n            <Alert className=\"bg-orange-50 border-orange-200\">\n              <AlertDescription className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-eye text-orange-600\"></i>\n                  <span className=\"font-medium text-orange-800\">\n                    Viewing as: {impersonationData.teacherName}\n                  </span>\n                  <span className=\"text-sm text-orange-600\">(Read-Only Mode)</span>\n                </div>\n              </AlertDescription>\n            </Alert>\n          </div>\n\n          {/* Teacher Dashboard Routes */}\n          <Switch>\n            <Route path=\"/teacher-view-readonly/dashboard\" component={TeacherDashboard} />\n            <Route path=\"/teacher-view-readonly/attendance\" component={Attendance} />\n            <Route path=\"/teacher-view-readonly/gradebook\" component={Gradebook} />\n            <Route path=\"/teacher-view-readonly/earnings\" component={Earnings} />\n            <Route path=\"/teacher-view-readonly/digital-diary\" component={DigitalDiary} />\n            <Route path=\"/teacher-view-readonly/schedule-manager\" component={ScheduleManager} />\n            <Route path=\"/teacher-view-readonly\" component={TeacherDashboard} />\n            <Route>\n              {() => <div className=\"p-6 text-center\">\n                <h2 className=\"text-xl font-semibold mb-2\">Page Not Found</h2>\n                <p className=\"text-gray-600\">The requested page could not be found.</p>\n              </div>}\n            </Route>\n          </Switch>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":9012},"client/src/pages/management/StandaloneFinanceDashboard.tsx":{"content":"import { Switch, Route, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { User, LogOut, ArrowLeft } from \"lucide-react\";\nimport primaxLogo from \"@assets/primax_logo_1756370699409.png\";\n\n// Import finance pages\nimport FinanceDashboard from \"@/pages/finance/Dashboard\";\nimport EnrollmentNew from \"@/pages/finance/EnrollmentNew\";\nimport StudentLedger from \"@/pages/finance/StudentLedger\";\nimport Invoices from \"@/pages/finance/Invoices\";\nimport Receipts from \"@/pages/finance/Receipts\";\nimport DailyClose from \"@/pages/finance/DailyClose\";\nimport AttendanceManagement from \"@/pages/finance/AttendanceManagement\";\nimport PortalLinks from \"@/pages/finance/PortalLinks\";\n\nexport default function StandaloneFinanceDashboard() {\n  const { user, logout, isLoggingOut } = useAuth() as any;\n\n  const handleBackToManagement = () => {\n    localStorage.setItem('selectedRole', 'management');\n    window.location.href = '/dashboard';\n  };\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  // Get user initials for profile circle\n  const getUserInitials = () => {\n    if (!user?.firstName || !user?.lastName) return 'DU';\n    return `${user.firstName.charAt(0)}${user.lastName.charAt(0)}`.toUpperCase();\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Finance Sidebar */}\n      <div className=\"w-64 bg-white shadow-lg flex flex-col\">\n        <div className=\"px-6 py-4 border-b min-h-[88px] flex items-center\">\n          <img src={primaxLogo} alt=\"Primax\" className=\"h-8\" />\n        </div>\n        \n        <nav className=\"flex-1 px-4 py-6 space-y-1\">\n          <Link href=\"/finance-dashboard/dashboard\" \n                className=\"flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50\">\n            <i className=\"fas fa-tachometer-alt w-5 mr-3\"></i>\n            Dashboard\n          </Link>\n          <Link href=\"/finance-dashboard/enrollment\" \n                className=\"flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50\">\n            <i className=\"fas fa-user-plus w-5 mr-3\"></i>\n            Enrollment\n          </Link>\n          <Link href=\"/finance-dashboard/invoices\" \n                className=\"flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50\">\n            <i className=\"fas fa-file-invoice w-5 mr-3\"></i>\n            Invoices\n          </Link>\n          <Link href=\"/finance-dashboard/receipts\" \n                className=\"flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50\">\n            <i className=\"fas fa-receipt w-5 mr-3\"></i>\n            Receipts\n          </Link>\n          <Link href=\"/finance-dashboard/students\" \n                className=\"flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50\">\n            <i className=\"fas fa-users w-5 mr-3\"></i>\n            Student Ledger\n          </Link>\n          <Link href=\"/finance-dashboard/attendance-management\" \n                className=\"flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50\">\n            <i className=\"fas fa-calendar-check w-5 mr-3\"></i>\n            Attendance\n          </Link>\n          <Link href=\"/finance-dashboard/daily-close\" \n                className=\"flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50\">\n            <i className=\"fas fa-lock w-5 mr-3\"></i>\n            Daily Close\n          </Link>\n          <Link href=\"/finance-dashboard/portal-links\" \n                className=\"flex items-center px-3 py-2 text-sm font-medium rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50\">\n            <i className=\"fas fa-link w-5 mr-3\"></i>\n            Portal Links\n          </Link>\n        </nav>\n      </div>\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header with Back to Management Button */}\n        <header className=\"bg-white border-b px-6 py-4 min-h-[88px] flex items-center\">\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center space-x-4\">\n              <div>\n                <h1 className=\"text-2xl font-semibold text-gray-800\">\n                  Finance Dashboard\n                </h1>\n                <nav className=\"text-sm text-gray-600\">\n                  Home {'>'} finance {'>'} Dashboard\n                </nav>\n              </div>\n              \n              {/* Back to Management Dashboard Button */}\n              <Button\n                onClick={handleBackToManagement}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"ml-4 bg-[#253C8D] text-white border-[#253C8D] hover:bg-[#1e3071] hover:border-[#1e3071]\"\n                data-testid=\"button-back-to-management\"\n              >\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Back to Management\n              </Button>\n            </div>\n            \n            {/* User Profile Dropdown */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <div className=\"flex items-center space-x-4 cursor-pointer hover:bg-gray-50 rounded-lg p-2 transition-colors\">\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-medium text-gray-800\">\n                      {user?.firstName} {user?.lastName}\n                    </p>\n                    <p className=\"text-xs text-gray-600 capitalize\">finance</p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center\">\n                    <span className=\"text-sm font-medium text-gray-600\">{getUserInitials()}</span>\n                  </div>\n                </div>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-48\">\n                <DropdownMenuItem className=\"cursor-pointer\">\n                  <User className=\"mr-2 h-4 w-4\" />\n                  <span>Profile</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  className=\"cursor-pointer text-red-600 focus:text-red-600\"\n                  onClick={handleLogout}\n                  disabled={isLoggingOut}\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>{isLoggingOut ? 'Signing Out...' : 'Sign Out'}</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Finance Dashboard Routes */}\n          <Switch>\n            <Route path=\"/finance-dashboard/dashboard\" component={FinanceDashboard} />\n            <Route path=\"/finance-dashboard/enrollment\" component={EnrollmentNew} />\n            <Route path=\"/finance-dashboard/students\" component={StudentLedger} />\n            <Route path=\"/finance-dashboard/invoices\" component={Invoices} />\n            <Route path=\"/finance-dashboard/receipts\" component={Receipts} />\n            <Route path=\"/finance-dashboard/daily-close\" component={DailyClose} />\n            <Route path=\"/finance-dashboard/attendance-management\" component={AttendanceManagement} />\n            <Route path=\"/finance-dashboard/portal-links\" component={PortalLinks} />\n            <Route path=\"/finance-dashboard\" component={FinanceDashboard} />\n            <Route>\n              {() => <div className=\"p-6 text-center\">\n                <h2 className=\"text-xl font-semibold mb-2\">Page Not Found</h2>\n                <p className=\"text-gray-600\">The requested page could not be found.</p>\n              </div>}\n            </Route>\n          </Switch>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":8138},"client/src/pages/management/TeacherImpersonation.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Teacher {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  role: string;\n  isTeacher: boolean;\n  subjects?: string[];\n}\n\nexport default function TeacherImpersonation() {\n  const [selectedTeacher, setSelectedTeacher] = useState<string>(\"\");\n  const [isImpersonating, setIsImpersonating] = useState(false);\n  const { toast } = useToast();\n\n  const { data: teachers, isLoading } = useQuery({\n    queryKey: [\"/api/staff\"],\n    select: (data: Teacher[]) => data.filter(staff => staff.isTeacher)\n  });\n\n  const handleImpersonate = (teacherId: string) => {\n    const teacher = teachers?.find(t => t.id === teacherId);\n    if (!teacher) return;\n\n    // Set special session flag for impersonation mode\n    sessionStorage.setItem('impersonatingTeacher', JSON.stringify({\n      teacherId: teacher.id,\n      teacherName: `${teacher.firstName} ${teacher.lastName}`,\n      originalRole: 'management'\n    }));\n\n    // Navigate to teacher dashboard in read-only mode\n    window.location.href = '/teacher-view-readonly';\n    \n    toast({\n      title: \"Teacher Impersonation Started\",\n      description: `Now viewing as ${teacher.firstName} ${teacher.lastName}`,\n    });\n  };\n\n  const stopImpersonation = () => {\n    sessionStorage.removeItem('impersonatingTeacher');\n    setIsImpersonating(false);\n    window.location.href = '/dashboard';\n    \n    toast({\n      title: \"Impersonation Ended\",\n      description: \"Returned to Management Dashboard\",\n    });\n  };\n\n  // Check if currently impersonating\n  const impersonationData = sessionStorage.getItem('impersonatingTeacher');\n  const currentImpersonation = impersonationData ? JSON.parse(impersonationData) : null;\n\n  if (currentImpersonation) {\n    return (\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <Alert className=\"mb-6 border-orange-200 bg-orange-50\">\n          <AlertDescription className=\"flex items-center justify-between\">\n            <div>\n              <strong>Currently impersonating:</strong> {currentImpersonation.teacherName}\n              <br />\n              <span className=\"text-sm text-gray-600\">You are viewing the system as this teacher (read-only mode)</span>\n            </div>\n            <Button onClick={stopImpersonation} variant=\"outline\" size=\"sm\">\n              End Impersonation\n            </Button>\n          </AlertDescription>\n        </Alert>\n\n        <div className=\"text-center py-12\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Teacher Dashboard View</h2>\n          <p className=\"text-gray-600 mb-6\">This would show the teacher's dashboard in read-only mode</p>\n          <Badge variant=\"secondary\">Read-Only Mode Active</Badge>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Teacher Impersonation</h1>\n        <p className=\"text-gray-600\">\n          Select a teacher to view their dashboard as they would see it. This is read-only access for supervision purposes.\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-chalkboard-teacher text-blue-600\"></i>\n            Select Teacher to Impersonate\n          </CardTitle>\n          <CardDescription>\n            Choose from the list of active teachers to view their dashboard perspective\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n              <p className=\"mt-2 text-gray-600\">Loading teachers...</p>\n            </div>\n          ) : (\n            <>\n              <div className=\"grid gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Available Teachers\n                  </label>\n                  <Select value={selectedTeacher} onValueChange={setSelectedTeacher}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a teacher to impersonate...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {teachers?.map((teacher) => (\n                        <SelectItem key={teacher.id} value={teacher.id}>\n                          <div className=\"flex items-center justify-between w-full\">\n                            <span>{teacher.firstName} {teacher.lastName}</span>\n                            <Badge variant=\"secondary\" className=\"ml-2 text-xs\">\n                              {teacher.role}\n                            </Badge>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {selectedTeacher && (\n                  <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                    <h3 className=\"font-medium text-blue-900 mb-2\">Impersonation Details</h3>\n                    <ul className=\"text-sm text-blue-800 space-y-1\">\n                      <li>• You will see the Teacher Dashboard exactly as this teacher sees it</li>\n                      <li>• Access is read-only - you cannot make any changes</li>\n                      <li>• This session will be logged for audit purposes</li>\n                      <li>• Click \"End Impersonation\" to return to your dashboard</li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex justify-end pt-4\">\n                <Button\n                  onClick={() => handleImpersonate(selectedTeacher)}\n                  disabled={!selectedTeacher}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <i className=\"fas fa-eye mr-2\"></i>\n                  Start Impersonation\n                </Button>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n\n      {teachers && teachers.length === 0 && (\n        <Alert className=\"mt-6\">\n          <AlertDescription>\n            No teachers found in the system. Teachers must be created in Staff Management first.\n          </AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n}","size_bytes":6932}},"version":1}